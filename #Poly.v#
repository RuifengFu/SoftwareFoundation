(** * Poly: \u591a\u6001\u4e0e\u9ad8\u9636\u51fd\u6570 *)

(* \u6700\u540e\u63d0\u9192\uff1a\u8bf7\u52ff\u5c06\u4e60\u9898\u89e3\u7b54\u653e\u5728\u53ef\u4ee5\u516c\u5f00\u8bbf\u95ee\u7684\u5730\u65b9\uff0c\u8c22\u8c22\uff01 *)

(* Suppress some annoying warnings from Coq: *)
Set Warnings "-notation-overridden,-parsing".
From LF Require Export Lists.

(* ################################################################# *)
(** * \u591a\u6001 *)

(** \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u4f1a\u7ee7\u7eed\u53d1\u5c55\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5176\u4e2d\u6700\u5173\u952e\u7684\u65b0\u6982\u5ff5\u5c31\u662f
    _'\u591a\u6001'_\uff08\u5728\u6240\u5904\u7406\u7684\u6570\u636e\u7c7b\u578b\u4e0a\u62bd\u8c61\u51fa\u51fd\u6570\uff09\u548c_'\u9ad8\u9636\u51fd\u6570'_\uff08\u51fd\u6570\u4f5c\u4e3a\u6570\u636e\uff09\u3002 *)

(* ================================================================= *)
(** ** \u591a\u6001\u5217\u8868 *)

(** \u5728\u4e0a\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u53ea\u5305\u542b\u6570\u7684\u5217\u8868\u3002\u5f88\u660e\u663e\uff0c
    \u6709\u8da3\u7684\u7a0b\u5e8f\u8fd8\u9700\u8981\u80fd\u591f\u5904\u7406\u5176\u5b83\u5143\u7d20\u7c7b\u578b\u7684\u5217\u8868\uff0c\u5982\u5b57\u7b26\u4e32\u5217\u8868\u3001\u5e03\u5c14\u503c\u5217\u8868\u3001
    \u5217\u8868\u7684\u5217\u8868\u7b49\u7b49\u3002\u6211\u4eec_'\u53ef\u4ee5'_\u5206\u522b\u4e3a\u5b83\u4eec\u5b9a\u4e49\u65b0\u7684\u5f52\u7eb3\u6570\u636e\u7c7b\u578b\uff0c\u4f8b\u5982... *)

Inductive boollist : Type :=
  | bool_nil
  | bool_cons (b : bool) (l : boollist).

(** ...\u4e0d\u8fc7\u8fd9\u6837\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u4e4f\u5473\u3002
    \u90e8\u5206\u539f\u56e0\u5728\u4e8e\u6211\u4eec\u5fc5\u987b\u4e3a\u6bcf\u79cd\u6570\u636e\u7c7b\u578b\u90fd\u5b9a\u4e49\u4e0d\u540c\u7684\u6784\u9020\u5b50\uff0c
    \u7136\u800c\u4e3b\u56e0\u8fd8\u662f\u6211\u4eec\u5fc5\u987b\u4e3a\u6bcf\u79cd\u6570\u636e\u7c7b\u578b\u518d\u91cd\u65b0\u5b9a\u4e49\u4e00\u904d\u6240\u6709\u7684\u5217\u8868\u5904\u7406\u51fd\u6570
    \uff08 [length]\u3001[rev] \u7b49\uff09\u4ee5\u53ca\u5b83\u4eec\u6240\u6709\u7684\u6027\u8d28\uff08[rev_length]\u3001[app_assoc] \u7b49\uff09\u3002 *)

(** \u4e3a\u907f\u514d\u8fd9\u4e9b\u91cd\u590d\uff0cCoq \u652f\u6301\u5b9a\u4e49_'\u591a\u6001'_\u5f52\u7eb3\u7c7b\u578b\u3002
    \u4f8b\u5982\uff0c\u4ee5\u4e0b\u5c31\u662f_'\u591a\u6001\u5217\u8868'_\u6570\u636e\u7c7b\u578b\u3002 *)

Inductive list (X:Type) : Type :=
  | nil
  | cons (x : X) (l : list X).

(** \u8fd9\u548c\u4e0a\u4e00\u7ae0\u4e2d [natlist] \u7684\u5b9a\u4e49\u57fa\u672c\u4e00\u6837\uff0c\u53ea\u662f\u5c06 [cons] \u6784\u9020\u5b50\u7684
    [nat] \u53c2\u6570\u6362\u6210\u4e86\u4efb\u610f\u7684\u7c7b\u578b [X]\uff0c\u51fd\u6570\u5934\u7684\u7b2c\u4e00\u884c\u6dfb\u52a0\u4e86 [X] \u7684\u7ed1\u5b9a\uff0c
    \u800c\u6784\u9020\u5b50\u7c7b\u578b\u4e2d\u7684 [natlist] \u5219\u6362\u6210\u4e86 [list X]\u3002\uff08\u6211\u4eec\u53ef\u4ee5\u91cd\u7528\u6784\u9020\u5b50\u540d
    [nil] \u548c [cons]\uff0c\u56e0\u4e3a\u4e4b\u524d\u5b9a\u4e49\u7684 [natlist] \u5728\u5f53\u524d\u4f5c\u7528\u4e4b\u5916\u7684\u4e00\u4e2a [Module] \u4e2d\u3002\uff09

    [list] \u672c\u8eab\u53c8\u662f\u4ec0\u4e48\u7c7b\u578b\uff1f\u4e00\u79cd\u4e0d\u9519\u7684\u601d\u8def\u5c31\u662f\u628a [list] \u5f53\u505a\u4ece [Type]
    \u7c7b\u578b\u5230 [Inductive] \u5f52\u7eb3\u5b9a\u4e49\u7684_'\u51fd\u6570'_\uff1b\u6216\u8005\u6362\u79cd\u66f4\u7b80\u660e\u7684\u601d\u8def\uff0c\u5373 [list]
    \u662f\u4e2a\u4ece [Type] \u7c7b\u578b\u5230 [Type] \u7c7b\u578b\u7684\u51fd\u6570\u3002\u5bf9\u4e8e\u4efb\u4f55\u7279\u5b9a\u7684\u7c7b\u578b [X]\uff0c
    \u7c7b\u578b [list X] \u662f\u4e00\u4e2a [Inductive] \u5f52\u7eb3\u5b9a\u4e49\u7684\uff0c\u5143\u7d20\u7c7b\u578b\u4e3a [X] \u7684\u5217\u8868\u7684\u96c6\u5408\u3002 *)

Check list : Type -> Type.

(** [list] \u7684\u5b9a\u4e49\u4e2d\u7684\u53c2\u6570 [X] \u81ea\u52a8
    \u6210\u4e3a\u6784\u9020\u5b50 [nil] \u548c [cons] \u7684\u53c2\u6570 \u2014\u2014 \u4e5f\u5c31\u662f\u8bf4\uff0c[nil] \u548c [cons] \u5728\u8fd9\u91cc\u662f\u591a\u6001
    \u7684\u6784\u9020\u5b50\uff1b\u73b0\u5728\u6211\u4eec\u8c03\u7528\u5b83\u4eec\u7684\u65f6\u5019\u5fc5\u987b\u8981\u63d0\u4f9b\u4e00\u4e2a\u53c2\u6570\uff0c\u5c31\u662f\u5b83\u4eec\u8981\u6784\u9020\u7684\u5217\u8868\u7684\u5177
    \u4f53\u7c7b\u578b\u3002\u4f8b\u5982\uff0c[nil nat] \u6784\u9020\u7684\u662f [nat] \u7c7b\u578b\u7684\u7a7a\u5217\u8868\u3002 *)

Check (nil nat) : list nat.

(** [cons nat] \u4e0e\u6b64\u7c7b\u4f3c\uff0c\u5b83\u5c06\u7c7b\u578b\u4e3a [nat] \u7684\u5143\u7d20\u6dfb\u52a0\u5230\u7c7b\u578b\u4e3a
    [list nat] \u7684\u5217\u8868\u4e2d\u3002\u4ee5\u4e0b\u793a\u4f8b\u6784\u9020\u4e86\u4e00\u4e2a\u53ea\u5305\u542b\u81ea\u7136\u6570 3 \u7684\u5217\u8868\uff1a *)

Check (cons nat 3 (nil nat)) : list nat.

(** [nil] \u7684\u7c7b\u578b\u4f1a\u662f\u4ec0\u4e48\u5462\uff1f\u4e5f\u8bb8\u6211\u4eec\u53ef\u4ee5\uff08\u6839\u636e\u5b9a\u4e49\uff09\u8bf4\u5b83\u662f [list X]\uff0c
    \u4e0d\u8fc7\u8fd9\u6837\u5b83\u5c31\u4e0d\u662f\u63a5\u53d7 [X] \u8fd4\u56de [list] \u7684\u51fd\u6570\u4e86\u3002\u518d\u63d0\u51fa\u4e00\u79cd\uff1a[Type -> list X]
    \u5e76\u6ca1\u6709\u89e3\u91ca [X] \u662f\u4ec0\u4e48\uff0c[(X : Type) -> list X] \u5219\u6bd4\u8f83\u63a5\u8fd1\u3002
    Coq \u5bf9\u8fd9\u79cd\u60c5\u51b5\u7684\u8bb0\u6cd5\u4e3a [forall X : Type, list X]\uff1a *)

Check nil : forall X : Type, list X.

(** \u7c7b\u4f3c\u5730\uff0c\u5b9a\u4e49\u4e2d [cons] \u7684\u7c7b\u578b\u770b\u8d77\u6765\u50cf [X -> list X -> list X]
    \u7136\u800c\u4ee5\u4e0a\u8ff0\u7ea6\u5b9a\u6765\u89e3\u91ca [X] \u7684\u542b\u4e49\u5219\u53ef\u4ee5\u5f97\u5230\u7c7b\u578b
    [forall X, X -> list X -> list X]\u3002 *)

Check cons : forall X : Type, X -> list X -> list X.

(** \uff08\u5173\u4e8e\u8bb0\u6cd5\u7684\u9644\u6ce8\uff1a\u5728 [.v] \u6587\u4ef6\u4e2d\uff0c\u91cf\u8bcd\u201cforall\u201d\u4f1a\u5199\u6210\u5b57\u6bcd\u7684\u5f62\u5f0f\uff0c
    \u800c\u5728\u751f\u6210\u7684 HTML \u548c\u4e00\u4e9b\u8bbe\u7f6e\u4e86\u663e\u793a\u63a7\u5236\u7684 IDE \u4e2d\uff0c[forall]
    \u901a\u5e38\u4f1a\u6e32\u67d3\u6210\u4e00\u822c\u7684\u201c\u5012 A\u201d\u6570\u5b66\u7b26\u53f7\uff0c\u867d\u7136\u4f60\u5076\u5c14\u8fd8\u662f\u4f1a\u770b\u5230\u82f1\u6587\u62fc\u5199\u7684
    \u201cforall\u201d\u3002\u8fd9\u53ea\u662f\u6392\u7248\u4e0a\u7684\u6548\u679c\uff0c\u5b83\u4eec\u7684\u542b\u4e49\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u3002\uff09 *)

(** \u5982\u679c\u5728\u6bcf\u6b21\u4f7f\u7528\u5217\u8868\u6784\u9020\u5b50\u65f6\uff0c\u90fd\u8981\u4e3a\u5b83\u63d0\u4f9b\u7c7b\u578b\u53c2\u6570\uff0c\u90a3\u6837\u4f1a\u5f88\u9ebb\u70e6\u3002
    \u4e0d\u8fc7\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u770b\u5230\u5982\u4f55\u7701\u53bb\u8fd9\u79cd\u9ebb\u70e6\u3002 *)

Check (cons nat 2 (cons nat 1 (nil nat)))
      : list nat.

(** \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u56de\u8fc7\u5934\u6765\u5b9a\u4e49\u4e4b\u524d\u5199\u4e0b\u7684\u5217\u8868\u5904\u7406\u51fd\u6570\u7684\u591a\u6001\u7248\u672c\u4e86\u3002
    \u4f8b\u5982 [repeat]\uff1a*)

Fixpoint repeat (X : Type) (x : X) (count : nat) : list X :=
  match count with
  | 0 => nil X
  | S count' => cons X x (repeat X x count')
  end.

(** \u540c [nil] \u4e0e [cons] \u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06 [repeat]
    \u5e94\u7528\u5230\u4e00\u4e2a\u7c7b\u578b\u3001\u4e00\u4e2a\u8be5\u7c7b\u578b\u7684\u5143\u7d20\u4ee5\u53ca\u4e00\u4e2a\u6570\u5b57\u6765\u4f7f\u7528\u5b83\uff1a *)

Example test_repeat1 :
  repeat nat 4 2 = cons nat 4 (cons nat 4 (nil nat)).
Proof. reflexivity. Qed.

(** \u8981\u7528 [repeat] \u6784\u9020\u5176\u5b83\u79cd\u7c7b\u7684\u5217\u8868\uff0c
    \u6211\u4eec\u53ea\u9700\u901a\u8fc7\u5bf9\u5e94\u7c7b\u578b\u7684\u53c2\u6570\u5c06\u5b83\u5b9e\u4f8b\u5316\u5373\u53ef\uff1a *)

Example test_repeat2 :
  repeat bool false 1 = cons bool false (nil bool).
Proof. reflexivity. Qed.


(** **** \u7ec3\u4e60\uff1a2 \u661f, standard (mumble_grumble) 

    \u8003\u8651\u4ee5\u4e0b\u4e24\u4e2a\u5f52\u7eb3\u5b9a\u4e49\u7684\u7c7b\u578b\uff1a *)

Module MumbleGrumble.

Inductive mumble : Type :=
  | a
  | b (x : mumble) (y : nat)
  | c.

Inductive grumble (X:Type) : Type :=
  | d (m : mumble)
  | e (x : X).

(** \u5bf9\u4e8e\u67d0\u4e2a\u7c7b\u578b [X]\uff0c\u4ee5\u4e0b\u54ea\u4e9b\u662f [grumble X] \u826f\u5b9a\u4e49\u7684\u5143\u7d20\uff1f
    \uff08\u5728\u5404\u9009\u9879\u540e\u586b\u201c\u662f\u201d\u6216\u201c\u5426\u201d\u3002\uff09
      - [d (b a 5)]
      - [d mumble (b a 5)]
      - [d bool (b a 5)]
      - [e bool true]
      - [e mumble (b c 0)]
      - [e bool (b c 0)]
      - [c] *)
(* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *)
End MumbleGrumble.

(* \u8bf7\u52ff\u4fee\u6539\u4e0b\u9762\u8fd9\u4e00\u884c\uff1a *)
Definition manual_grade_for_mumble_grumble : option (nat*string) := None.
(** [] *)

(* ----------------------------------------------------------------- *)
(** *** \u7c7b\u578b\u6807\u6ce8\u7684\u63a8\u65ad *)

(** \u6211\u4eec\u518d\u5199\u4e00\u904d [repeat] \u7684\u5b9a\u4e49\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u4e0d\u6307\u5b9a\u4efb\u4f55\u53c2\u6570\u7684\u7c7b\u578b\u3002
    Coq \u8fd8\u4f1a\u63a5\u53d7\u5b83\u4e48\uff1f *)

Fixpoint repeat' X x count : list X :=
  match count with
  | 0        => nil X
  | S count' => cons X x (repeat' X x count')
  end.

(** \u786e\u5b9e\u4f1a\u3002\u6211\u4eec\u6765\u770b\u770b Coq \u8d4b\u4e88\u4e86 [repeat'] \u4ec0\u4e48\u7c7b\u578b\uff1a *)

Check repeat'
  : forall X : Type, X -> nat -> list X.
Check repeat
  : forall X : Type, X -> nat -> list X.

(** \u5b83\u4e0e [repeat] \u7684\u7c7b\u578b\u5b8c\u5168\u4e00\u81f4\u3002Coq \u53ef\u4ee5\u4f7f\u7528_'\u7c7b\u578b\u63a8\u65ad'_
    \u57fa\u4e8e\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u5f0f\u6765\u63a8\u51fa [X]\u3001[x] \u548c [count] \u4e00\u5b9a\u662f\u4ec0\u4e48\u7c7b\u578b\u3002\u4f8b\u5982\uff0c
    \u7531\u4e8e [X] \u662f\u4f5c\u4e3a [cons] \u7684\u53c2\u6570\u4f7f\u7528\u7684\uff0c\u56e0\u6b64\u5b83\u5fc5\u5b9a\u662f\u4e2a [Type] \u7c7b\u578b\uff0c
    \u56e0\u4e3a [cons] \u671f\u671b\u4e00\u4e2a [Type] \u4f5c\u4e3a\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u800c\u7528 [0] \u548c [S] \u6765\u5339\u914d
    [count] \u610f\u5473\u7740\u5b83\u5fc5\u987b\u662f\u4e2a [nat]\uff0c\u8bf8\u5982\u6b64\u7c7b\u3002

    \u8fd9\u79cd\u5f3a\u5927\u7684\u529f\u80fd\u610f\u5473\u7740\u6211\u4eec\u4e0d\u5fc5\u603b\u662f\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u663e\u5f0f\u5730\u5199\u51fa\u7c7b\u578b\u6807\u6ce8\uff0c
    \u4e0d\u8fc7\u663e\u5f0f\u7684\u7c7b\u578b\u6807\u6ce8\u5bf9\u4e8e\u6587\u6863\u548c\u5b8c\u6574\u6027\u68c0\u67e5\u6765\u8bf4\u4ecd\u7136\u975e\u5e38\u6709\u7528\uff0c
    \u56e0\u6b64\u6211\u4eec\u4ecd\u4f1a\u7ee7\u7eed\u4f7f\u7528\u5b83\u3002\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u7c7b\u578b\u6807\u6ce8\u65f6\uff0c\u4f60\u5e94\u5f53\u628a\u63e1\u597d\u4e00\u4e2a\u5ea6\uff0c
    \u592a\u591a\u4f1a\u5bfc\u81f4\u6df7\u4e71\u5e76\u5206\u6563\u6ce8\u610f\u529b\uff0c\u592a\u5c11\u5219\u4f1a\u8feb\u4f7f\u8bfb\u8005\u4e3a\u7406\u89e3\u4f60\u7684\u4ee3\u7801\u800c\u5728\u5927\u8111\u4e2d\u8fdb\u884c\u7c7b\u578b\u63a8\u65ad\u3002 *)

(* ----------------------------------------------------------------- *)
(** *** \u7c7b\u578b\u53c2\u6570\u7684\u63a8\u65ad *)

(** \u8981\u4f7f\u7528\u591a\u6001\u51fd\u6570\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u5176\u53c2\u6570\u518d\u989d\u5916\u4f20\u5165\u4e00\u4e2a\u6216\u66f4\u591a\u7c7b\u578b\u3002
    \u4f8b\u5982\uff0c\u524d\u9762 [repeat] \u51fd\u6570\u4f53\u4e2d\u7684\u9012\u5f52\u8c03\u7528\u5fc5\u987b\u4f20\u9012\u7c7b\u578b [X]\u3002\u4e0d\u8fc7\u7531\u4e8e
    [repeat] \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a [X] \u7c7b\u578b\u7684\u5143\u7d20\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u660e\u663e\u53ea\u80fd\u662f [X]\uff0c
    \u65e2\u7136\u5982\u6b64\uff0c\u6211\u4eec\u4f55\u5fc5\u663e\u5f0f\u5730\u5199\u51fa\u5b83\u5462\uff1f

    \u5e78\u8fd0\u7684\u662f\uff0cCoq \u5141\u8bb8\u6211\u4eec\u907f\u514d\u8fd9\u79cd\u5197\u4f59\u3002\u5728\u4efb\u4f55\u6211\u4eec\u53ef\u4ee5\u5199\u7c7b\u578b\u53c2\u6570\u7684\u5730\u65b9\uff0c\u6211\u4eec\u90fd\u53ef
    \u4ee5\u5c06\u7c7b\u578b\u53c2\u6570\u5199\u4e3a \u201c\u6d1e\u201d [_]\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u8bf4 \u201c\u8bf7 Coq \u81ea\u884c\u627e\u51fa\u8fd9\u91cc\u5e94\u8be5\u586b\u4ec0\u4e48\u3002\u201d
    \u66f4\u786e\u5207\u5730\u8bf4\uff0c\u5f53 Coq \u9047\u5230 [_] \u65f6\uff0c\u5b83\u4f1a\u5c1d\u8bd5_'\u7edf\u4e00'_\u6240\u6709\u7684\u5c40\u90e8\u53d8\u91cf\u4fe1\u606f\uff0c
    \u5305\u62ec\u51fd\u6570\u5e94\u5f53\u5e94\u7528\u5230\u7684\u7c7b\u578b\uff0c\u5176\u5b83\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u4ee5\u53ca\u5e94\u7528\u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4e2d\u671f\u671b\u7684\u7c7b\u578b\uff0c
    \u4ee5\u6b64\u6765\u786e\u5b9a [_] \u5904\u5e94\u5f53\u586b\u5165\u7684\u5177\u4f53\u7c7b\u578b\u3002

    \u8fd9\u542c\u8d77\u6765\u5f88\u50cf\u7c7b\u578b\u6807\u6ce8\u63a8\u65ad\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e24\u79cd\u4e2a\u8fc7\u7a0b\u4f9d\u8d56\u4e8e\u540c\u6837\u7684\u5e95\u5c42\u673a\u5236\u3002
    \u9664\u4e86\u7b80\u5355\u5730\u5ffd\u7565\u51fd\u6570\u4e2d\u67d0\u4e9b\u53c2\u6570\u7684\u7c7b\u578b\uff1a

      repeat' X x count : list X :=

    \u6211\u4eec\u8fd8\u53ef\u4ee5\u5c06\u7c7b\u578b\u6362\u6210\u6d1e\uff1a

      repeat' (X : _) (x : _) (count : _) : list X :=

    \u4ee5\u6b64\u6765\u544a\u8bc9 Coq \u8981\u5c1d\u8bd5\u63a8\u65ad\u51fa\u7f3a\u5c11\u7684\u4fe1\u606f\u3002

    Using holes, the [repeat] function can be written like this: *)

Fixpoint repeat'' X x count : list X :=
  match count with
  | 0        => nil _
  | S count' => cons _ x (repeat'' _ x count')
  end.

(** \u5728\u6b64\u4f8b\u4e2d\uff0c\u6211\u4eec\u5199\u51fa [_] \u5e76\u6ca1\u6709\u7701\u7565\u591a\u5c11 [X]\u3002\u7136\u800c\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c
    \u8fd9\u5bf9\u51cf\u5c11\u51fb\u952e\u6b21\u6570\u548c\u63d0\u9ad8\u53ef\u8bfb\u6027\u8fd8\u662f\u5f88\u6709\u6548\u7684\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u5199\u4e0b\u4e00\u4e2a\u5305\u542b\u6570\u5b57
    [1]\u3001[2] \u548c [3] \u7684\u5217\u8868\uff0c\u6b64\u65f6\u4e0d\u5fc5\u5199\u6210\u8fd9\u6837\uff1a *)

Definition list123 :=
  cons nat 1 (cons nat 2 (cons nat 3 (nil nat))).

(** \u2026\u2026\u6211\u4eec\u53ef\u4ee5\u7528\u6d1e\u6765\u8fd9\u6837\u5199\uff1a *)

Definition list123' :=
  cons _ 1 (cons _ 2 (cons _ 3 (nil _))).

(* ----------------------------------------------------------------- *)
(** *** \u9690\u5f0f\u53c2\u6570 *)

(** \u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7\u544a\u8bc9 Coq _'\u603b\u662f'_\u63a8\u65ad\u7ed9\u5b9a\u51fd\u6570\u7684\u7c7b\u578b\u53c2\u6570\u6765\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b
    \u76f4\u63a5\u907f\u514d\u5199 [_]\u3002

    [Arguments] \u7528\u4e8e\u6307\u4ee4\u6307\u5b9a\u51fd\u6570\u6216\u6784\u9020\u5b50\u7684\u540d\u5b57\u5e76\u5217\u51fa\u5176\u53c2\u6570\u540d\uff0c
    \u82b1\u62ec\u53f7\u4e2d\u7684\u4efb\u4f55\u53c2\u6570\u90fd\u4f1a\u88ab\u89c6\u4f5c\u9690\u5f0f\u53c2\u6570\u3002\uff08\u5982\u679c\u5b9a\u4e49\u4e2d\u7684\u67d0\u4e2a\u53c2\u6570\u6ca1\u6709\u540d\u5b57\uff0c
    \u90a3\u4e48\u5b83\u53ef\u4ee5\u7528\u901a\u914d\u6a21\u5f0f [_] \u6765\u6807\u8bb0\u3002\u8fd9\u79cd\u60c5\u51b5\u5e38\u89c1\u4e8e\u6784\u9020\u5b50\u4e2d\u3002\uff09 *)

Arguments nil {X}.
Arguments cons {X} _ _.
Arguments repeat {X} x count.

(** \u73b0\u5728\u6211\u4eec\u5b8c\u5168\u4e0d\u7528\u63d0\u4f9b\u7c7b\u578b\u53c2\u6570\u4e86\uff1a *)

Definition list123'' := cons 1 (cons 2 (cons 3 nil)).

(** \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728\u5b9a\u4e49\u51fd\u6570\u65f6\u5c31\u58f0\u660e\u9690\u5f0f\u53c2\u6570\uff0c
    \u53ea\u9700\u8981\u5c06\u67d0\u4e2a\u53c2\u6570\u4e24\u8fb9\u7684\u5706\u62ec\u53f7\u6362\u6210\u82b1\u62ec\u53f7\u3002\u4f8b\u5982\uff1a *)

Fixpoint repeat''' {X : Type} (x : X) (count : nat) : list X :=
  match count with
  | 0        => nil
  | S count' => cons x (repeat''' x count')
  end.

(** \uff08\u6ce8\u610f\u6211\u4eec\u73b0\u5728\u751a\u81f3\u4e0d\u5fc5\u5728 [repeat'''] \u7684\u9012\u5f52\u8c03\u7528\u4e2d\u63d0\u4f9b\u7c7b\u578b\u53c2\u6570\u4e86\uff0c
      \u5b9e\u9645\u4e0a\u63d0\u4f9b\u4e86\u53cd\u800c\u662f\u65e0\u6548\u7684\uff0c\u56e0\u4e3a Coq \u5e76\u4e0d\u60f3\u8981\u5b83\u3002\uff09

    \u6211\u4eec\u4f1a\u5c3d\u53ef\u80fd\u4f7f\u7528\u6700\u540e\u4e00\u79cd\u98ce\u683c\uff0c\u4e0d\u8fc7\u8fd8\u4f1a\u7ee7\u7eed\u5728 [Inductive] \u6784\u9020\u5b50\u4e2d\u4f7f\u7528\u663e\u5f0f\u7684
    [Argument] \u58f0\u660e\u3002\u539f\u56e0\u5728\u4e8e\u5982\u679c\u5c06\u5f52\u7eb3\u7c7b\u578b\u7684\u5f62\u53c2\u6807\u4e3a\u9690\u5f0f\u7684\u8bdd\uff0c
    \u4e0d\u4ec5\u6784\u9020\u5b50\u7684\u7c7b\u578b\u4f1a\u53d8\u6210\u9690\u5f0f\u7684\uff0c\u7c7b\u578b\u672c\u8eab\u4e5f\u4f1a\u53d8\u6210\u9690\u5f0f\u7684\u3002\u4f8b\u5982\uff0c
    \u8003\u8651\u4ee5\u4e0b [list] \u7c7b\u578b\u7684\u53e6\u4e00\u79cd\u5b9a\u4e49\uff1a *)

Inductive list' {X:Type} : Type :=
  | nil'
  | cons' (x : X) (l : list').

(** \u7531\u4e8e [X] \u5728\u5305\u62ec [list'] \u672c\u8eab\u7684_'\u6574\u4e2a'_\u5f52\u7eb3\u5b9a\u4e49\u4e2d\u90fd\u662f\u9690\u5f0f\u58f0\u660e\u7684\uff0c
    \u56e0\u6b64\u5f53\u6211\u4eec\u8ba8\u8bba\u6570\u503c\u3001\u5e03\u5c14\u503c\u6216\u5176\u5b83\u4efb\u4f55\u7c7b\u578b\u7684\u5217\u8868\u65f6\uff0c\u90fd\u53ea\u80fd\u5199 [list']\uff0c
    \u800c\u5199\u4e0d\u4e86 [list' nat]\u3001[list' bool] \u7b49\u7b49\uff0c\u8fd9\u6837\u5c31\u6709\u70b9\u8fc7\u5206\u4e86\u3002 *)

(** \u4f5c\u4e3a\u672c\u8282\u7684\u6536\u5c3e\uff0c\u6211\u4eec\u4e3a\u65b0\u7684\u591a\u6001\u5217\u8868\u91cd\u65b0\u5b9e\u73b0\u51e0\u4e2a\u5176\u5b83\u7684\u6807\u51c6\u5217\u8868\u51fd\u6570... *)

Fixpoint app {X : Type} (l1 l2 : list X)
             : (list X) :=
  match l1 with
  | nil      => l2
  | cons h t => cons h (app t l2)
  end.

Fixpoint rev {X:Type} (l:list X) : list X :=
  match l with
  | nil      => nil
  | cons h t => app (rev t) (cons h nil)
  end.

Fixpoint length {X : Type} (l : list X) : nat :=
  match l with
  | nil => 0
  | cons _ l' => S (length l')
  end.

Example test_rev1 :
  rev (cons 1 (cons 2 nil)) = (cons 2 (cons 1 nil)).
Proof. reflexivity. Qed.

Example test_rev2:
  rev (cons true nil) = cons true nil.
Proof. reflexivity. Qed.

Example test_length1: length (cons 1 (cons 2 (cons 3 nil))) = 3.
Proof. reflexivity. Qed.

(* ----------------------------------------------------------------- *)
(** *** \u663e\u5f0f\u63d0\u4f9b\u7c7b\u578b\u53c2\u6570 *)

(** \u7528 [Implicit] \u5c06\u53c2\u6570\u58f0\u660e\u4e3a\u9690\u5f0f\u7684\u4f1a\u6709\u4e2a\u5c0f\u95ee\u9898\uff1aCoq
    \u5076\u5c14\u4f1a\u6ca1\u6709\u8db3\u591f\u7684\u5c40\u90e8\u4fe1\u606f\u6765\u786e\u5b9a\u7c7b\u578b\u53c2\u6570\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u9700\u8981\u544a\u8bc9 Coq
    \u8fd9\u6b21\u6211\u4eec\u4f1a\u663e\u793a\u5730\u7ed9\u51fa\u53c2\u6570\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u5199\u4e86\u5982\u4e0b\u5b9a\u4e49\uff1a *)

Fail Definition mynil := nil.

(** \uff08[Definition] \u524d\u9762\u7684 [Fail] \u9650\u5b9a\u7b26\u53ef\u7528\u4e8e_'\u4efb\u4f55'_\u6307\u4ee4\uff0c
    \u5b83\u7684\u4f5c\u7528\u662f\u786e\u4fdd\u8be5\u6307\u4ee4\u5728\u6267\u884c\u65f6\u786e\u5b9e\u4f1a\u5931\u8d25\u3002\u5982\u679c\u8be5\u6307\u4ee4\u5931\u8d25\u4e86\uff0cCoq
    \u5c31\u4f1a\u6253\u5370\u51fa\u76f8\u5e94\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u4e0d\u8fc7\u4e4b\u540e\u4f1a\u7ee7\u7eed\u5904\u7406\u6587\u4ef6\u4e2d\u5269\u4e0b\u7684\u90e8\u5206\u3002\uff09

    \u5728\u8fd9\u91cc\uff0cCoq \u7ed9\u51fa\u4e86\u4e00\u6761\u9519\u8bef\u4fe1\u606f\uff0c\u56e0\u4e3a\u5b83\u4e0d\u77e5\u9053\u5e94\u8be5\u4e3a [nil] \u63d0\u4f9b\u4f55\u79cd\u7c7b\u578b\u3002
    \u6211\u4eec\u53ef\u4ee5\u4e3a\u5b83\u63d0\u4f9b\u4e2a\u663e\u5f0f\u7684\u7c7b\u578b\u58f0\u660e\u6765\u5e2e\u52a9\u5b83\uff0c\u8fd9\u6837 Coq \u5728\u201c\u5e94\u7528\u201d[nil]
    \u65f6\u5c31\u6709\u66f4\u591a\u53ef\u7528\u7684\u4fe1\u606f\u4e86\uff1a *)

Definition mynil : list nat := nil.

(** \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728\u51fd\u6570\u540d\u524d\u52a0\u4e0a\u524d\u7f00 [@] \u6765\u5f3a\u5236\u5c06\u9690\u5f0f\u53c2\u6570\u53d8\u6210\u663e\u5f0f\u7684\uff1a *)

Check @nil : forall X : Type, list X.

Definition mynil' := @nil nat.

(** \u4f7f\u7528\u53c2\u6570\u63a8\u65ad\u548c\u9690\u5f0f\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u5217\u8868\u5b9a\u4e49\u548c\u524d\u9762\u4e00\u6837\u7684\u7b80\u4fbf\u8bb0\u6cd5\u3002
    \u7531\u4e8e\u6211\u4eec\u8ba9\u6784\u9020\u5b50\u7684\u7684\u7c7b\u578b\u53c2\u6570\u53d8\u6210\u4e86\u9690\u5f0f\u7684\uff0c\u56e0\u6b64 Coq
    \u5c31\u77e5\u9053\u5728\u6211\u4eec\u4f7f\u7528\u8be5\u8bb0\u6cd5\u65f6\u81ea\u52a8\u63a8\u65ad\u5b83\u4eec\u4e86\u3002 *)

Notation "x :: y" := (cons x y)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y []) ..).
Notation "x ++ y" := (app x y)
                     (at level 60, right associativity).

(** \u73b0\u5728\u5217\u8868\u5c31\u80fd\u5199\u6210\u6211\u4eec\u5e0c\u671b\u7684\u65b9\u5f0f\u4e86\uff1a *)

Definition list123''' := [1; 2; 3].

(* ----------------------------------------------------------------- *)
(** *** \u7ec3\u4e60 *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard, optional (poly_exercises) 

    \u4e0b\u9762\u662f\u4e00\u4e9b\u7b80\u5355\u7684\u7ec3\u4e60\uff0c\u548c [Lists] \u4e00\u7ae0\u4e2d\u7684\u4e00\u6837\u3002
    \u4e3a\u4e86\u5b9e\u8df5\u591a\u6001\uff0c\u8bf7\u5b8c\u6210\u4e0b\u9762\u7684\u8bc1\u660e\u3002 *)

Theorem app_nil_r : forall (X:Type), forall l:list X,
  l ++ [] = l.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem app_assoc : forall A (l m n:list A),
  l ++ m ++ n = (l ++ m) ++ n.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Lemma app_length : forall (X:Type) (l1 l2 : list X),
  length (l1 ++ l2) = length l1 + length l2.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard, optional (more_poly_exercises) 

    \u8fd9\u513f\u6709\u4e9b\u66f4\u6709\u8da3\u7684\u4e1c\u897f... *)

Theorem rev_app_distr: forall X (l1 l2 : list X),
  rev (l1 ++ l2) = rev l2 ++ rev l1.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem rev_involutive : forall X : Type, forall l : list X,
  rev (rev l) = l.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(* ================================================================= *)
(** ** \u591a\u6001\u5e8f\u5bf9 *)

(** \u6309\u7167\u76f8\u540c\u7684\u6a21\u5f0f\uff0c\u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4e2d\u7ed9\u51fa\u7684\u6570\u503c\u5e8f\u5bf9\u7684\u5b9a\u4e49\u53ef\u88ab\u63a8\u5e7f\u4e3a
    _'\u591a\u6001\u5e8f\u5bf9\uff08Polymorphic Pairs\uff09'_\uff0c\u5b83\u901a\u5e38\u53eb\u505a_'\u79ef\uff08Products\uff09'_\uff1a *)

Inductive prod (X Y : Type) : Type :=
| pair (x : X) (y : Y).

Arguments pair {X} {Y} _ _.

(** \u548c\u5217\u8868\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u7c7b\u578b\u53c2\u6570\u5b9a\u4e49\u6210\u9690\u5f0f\u7684\uff0c
    \u5e76\u4ee5\u6b64\u5b9a\u4e49\u7c7b\u4f3c\u7684\u5177\u4f53\u8bb0\u6cd5\uff1a *)

Notation "( x , y )" := (pair x y).

(** \u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 [Notation] \u6765\u5b9a\u4e49\u6807\u51c6\u7684_'\u79ef\u7c7b\u578b\uff08Product Types\uff09'_\u8bb0\u6cd5\uff1a *)

Notation "X * Y" := (prod X Y) : type_scope.

(** \uff08\u6807\u6ce8 [: type_scope] \u4f1a\u544a\u8bc9 Coq \u8be5\u7f29\u5199\u53ea\u80fd\u5728\u89e3\u6790\u7c7b\u578b\u800c\u975e\u8868\u8fbe\u5f0f\u65f6\u4f7f\u7528\u3002
      \u8fd9\u907f\u514d\u4e86\u4e0e\u4e58\u6cd5\u7b26\u53f7\u7684\u51b2\u7a81\u3002) *)

(** \u4e00\u5f00\u59cb\u4f1a\u5f88\u5bb9\u6613\u6df7\u6dc6 [(x,y)] \u548c [X*Y]\u3002\u4e0d\u8fc7\u8981\u8bb0\u4f4f [(x,y)]
    \u662f\u4e00\u4e2a_'\u503c'_\uff0c\u5b83\u7531\u4e24\u4e2a\u5176\u5b83\u7684\u503c\u6784\u9020\u5f97\u6765\uff1b\u800c [X*Y] \u662f\u4e00\u4e2a_'\u7c7b\u578b'_\uff0c
    \u5b83\u7531\u4e24\u4e2a\u5176\u5b83\u7684\u7c7b\u578b\u6784\u9020\u5f97\u6765\u3002\u5982\u679c [x] \u7684\u7c7b\u578b\u4e3a [X] \u800c [y] \u7684\u7c7b\u578b\u4e3a [Y]\uff0c
    \u90a3\u4e48 [(x,y)] \u7684\u7c7b\u578b\u5c31\u662f [X*Y]\u3002 *)

(** \u7b2c\u4e00\u5143\uff08first\uff09\u548c\u7b2c\u4e8c\u5143\uff08second\uff09\u7684\u5c04\u5f71\u51fd\u6570\uff08Projection Functions\uff09
    \u73b0\u5728\u770b\u8d77\u6765\u548c\u5176\u5b83\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u5f88\u50cf\u4e86\uff1a *)

Definition fst {X Y : Type} (p : X * Y) : X :=
  match p with
  | (x, y) => x
  end.

Definition snd {X Y : Type} (p : X * Y) : Y :=
  match p with
  | (x, y) => y
  end.

(** \u4ee5\u4e0b\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u5217\u8868\uff0c\u5e76\u5c06\u5b83\u4eec\u7ed3\u5408\u6210\u4e00\u4e2a\u5e8f\u5bf9\u7684\u5217\u8868\u3002
    \u5728\u5176\u5b83\u51fd\u6570\u5f0f\u8bed\u8a00\u4e2d\uff0c\u5b83\u901a\u5e38\u88ab\u79f0\u4f5c [zip]\u3002\u6211\u4eec\u4e3a\u4e86\u4e0e Coq \u7684\u6807\u51c6\u5e93\u4fdd\u6301\u4e00\u81f4\uff0c
    \u5c06\u5b83\u547d\u540d\u4e3a [combine]\u3002*)

Fixpoint combine {X Y : Type} (lx : list X) (ly : list Y)
           : list (X*Y) :=
  match lx, ly with
  | [], _ => []
  | _, [] => []
  | x :: tx, y :: ty => (x, y) :: (combine tx ty)
  end.

(** **** \u7ec3\u4e60\uff1a1 \u661f, standard, optional (combine_checks) 

    \u8bf7\u5c1d\u8bd5\u5728\u7eb8\u4e0a\u56de\u7b54\u4ee5\u4e0b\u95ee\u9898\u5e76\u5728 Coq \u4e2d\u68c0\u9a8c\u4f60\u7684\u89e3\u7b54\uff1a
    - [combine] \u7684\u7c7b\u578b\u662f\u4ec0\u4e48\uff1f\uff08\u5373 [Check @combine] \u4f1a\u6253\u5370\u51fa\u4ec0\u4e48\uff1f\uff09
    - \u4ee5\u4e0b\u6307\u4ee4\u4f1a\u6253\u5370\u51fa\u4ec0\u4e48\uff1f

        Compute (combine [1;2] [false;false;true;true]).
*)
(** [] *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard, recommended (split) 

    \u51fd\u6570 [split] \u662f [combine] \u7684\u53f3\u9006\uff08right inverse\uff09\uff1a
    \u5b83\u63a5\u53d7\u4e00\u4e2a\u5e8f\u5bf9\u7684\u5217\u8868\u5e76\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\u7684\u5e8f\u5bf9\u3002
    \u5728\u5f88\u591a\u51fd\u6570\u5f0f\u8bed\u8a00\u4e2d\uff0c\u5b83\u88ab\u79f0\u4f5c [unzip]\u3002

    \u8bf7\u5728\u4e0b\u9762\u5b8c\u6210 [split] \u7684\u5b9a\u4e49\uff0c\u786e\u4fdd\u5b83\u80fd\u591f\u901a\u8fc7\u7ed9\u5b9a\u7684\u5355\u5143\u6d4b\u8bd5\u3002 *)

Fixpoint split {X Y : Type} (l : list (X*Y))
               : (list X) * (list Y)
  (* \u5c06\u672c\u884c\u66ff\u6362\u6210 ":= _\u4f60\u7684_\u5b9a\u4e49_ ." *). Admitted.

Example test_split:
  split [(1,false);(2,false)] = ([1;2],[false;false]).
Proof.
(* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(* ================================================================= *)
(** ** \u591a\u6001\u5019\u9009 *)

(** \u6700\u540e\u4e00\u79cd\u8981\u4ecb\u7ecd\u7684\u591a\u6001\u7c7b\u578b\u662f_'\u591a\u6001\u5019\u9009\uff08Polymorphic Options\uff09'_,
    \u5b83\u63a8\u5e7f\u4e86\u4e0a\u4e00\u7ae0\u4e2d\u7684 [natoption]\uff08\u7531\u4e8e\u6211\u4eec\u4e4b\u540e\u8981\u7528\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684
    [option] \u7248\u672c\uff0c\u56e0\u6b64\u8fd9\u91cc\u7684\u5b9a\u4e49\u6211\u4eec\u628a\u5b83\u653e\u5728\u6a21\u5757\u4e2d\uff09\uff1a *)

Module OptionPlayground.

Inductive option (X:Type) : Type :=
  | Some (x : X)
  | None.

Arguments Some {X} _.
Arguments None {X}.

End OptionPlayground.

(** \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u91cd\u5199 [nth_error] \u51fd\u6570\u6765\u8ba9\u5b83\u9002\u7528\u4e8e\u4efb\u4f55\u7c7b\u578b\u7684\u5217\u8868\u4e86\u3002 *)

Fixpoint nth_error {X : Type} (l : list X) (n : nat)
                   : option X :=
  match l with
  | [] => None
  | a :: l' => if n =? O then Some a else nth_error l' (pred n)
  end.

Example test_nth_error1 : nth_error [4;5;6;7] 0 = Some 4.
Proof. reflexivity. Qed.
Example test_nth_error2 : nth_error [[1];[2]] 1 = Some [2].
Proof. reflexivity. Qed.
Example test_nth_error3 : nth_error [true] 2 = None.
Proof. reflexivity. Qed.

(** **** \u7ec3\u4e60\uff1a1 \u661f, standard, optional (hd_error_poly) 

    \u8bf7\u5b8c\u6210\u4e0a\u4e00\u7ae0\u4e2d [hd_error] \u7684\u591a\u6001\u5b9a\u4e49\uff0c\u786e\u4fdd\u5b83\u80fd\u901a\u8fc7\u4e0b\u65b9\u7684\u5355\u5143\u6d4b\u8bd5\u3002 *)

Definition hd_error {X : Type} (l : list X) : option X
  (* \u5c06\u672c\u884c\u66ff\u6362\u6210 ":= _\u4f60\u7684_\u5b9a\u4e49_ ." *). Admitted.

(** \u518d\u8bf4\u4e00\u904d\uff0c\u8981\u5f3a\u5236\u5c06\u9690\u5f0f\u53c2\u6570\u8f6c\u4e3a\u663e\u5f0f\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u51fd\u6570\u540d\u524d\u4f7f\u7528 [@]\u3002 *)

Check @hd_error : forall X : Type, list X -> option X.

Example test_hd_error1 : hd_error [1;2] = Some 1.
 (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
Example test_hd_error2 : hd_error  [[1];[2]]  = Some [1].
 (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(* ################################################################# *)
(** * \u51fd\u6570\u4f5c\u4e3a\u6570\u636e *)

(** \u548c\u5927\u90e8\u5206\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0c\u7279\u522b\u662f\u201c\u51fd\u6570\u5f0f\u201d\u7684\u8bed\u8a00\uff0c\u5305\u62ec OCaml\u3001Haskell\u3001
    Racket\u3001Scala\u3001Clojure \u7b49\uff0cCoq \u4e5f\u5c06\u51fd\u6570\u89c6\u4f5c\u201c\u4e00\u7b49\u516c\u6c11\uff08First-Class Citizens\uff09\u201d\uff0c
    \u5373\u5141\u8bb8\u5c06\u5b83\u4eec\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u5176\u5b83\u51fd\u6570\u3001\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de\u3001\u4ee5\u53ca\u5b58\u50a8\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u7b49\u7b49\u3002 *)

(* ================================================================= *)
(** ** \u9ad8\u9636\u51fd\u6570 *)

(** \u7528\u4e8e\u64cd\u4f5c\u5176\u5b83\u51fd\u6570\u7684\u51fd\u6570\u901a\u5e38\u53eb\u505a_'\u9ad8\u9636\u51fd\u6570'_\u3002\u4ee5\u4e0b\u662f\u7b80\u5355\u7684\u793a\u4f8b\uff1a *)

Definition doit3times {X:Type} (f:X->X) (n:X) : X :=
  f (f (f n)).

(** \u8fd9\u91cc\u7684\u53c2\u6570 [f] \u672c\u8eab\u4e5f\u662f\u4e2a\uff08\u4ece [X] \u5230 [X] \u7684\uff09\u51fd\u6570\uff0c
    [doit3times] \u7684\u51fd\u6570\u4f53\u5c06 [f] \u5bf9\u67d0\u4e2a\u503c [n] \u5e94\u7528\u4e09\u6b21\u3002 *)

Check @doit3times : forall X : Type, (X -> X) -> X -> X.

Example test_doit3times: doit3times minustwo 9 = 3.
Proof. reflexivity. Qed.

Example test_doit3times': doit3times negb true = false.
Proof. reflexivity. Qed.

(* ================================================================= *)
(** ** \u8fc7\u6ee4\u5668 *)

(** \u4e0b\u9762\u662f\u4e2a\u66f4\u6709\u7528\u7684\u9ad8\u9636\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\u4e3a [X] \u7684\u5217\u8868\u548c\u4e00\u4e2a
    [X] \u7684\u8c13\u8bcd\uff08\u5373\u4e00\u4e2a\u4ece [X] \u5230 [bool] \u7684\u51fd\u6570\uff09\uff0c\u7136\u540e\u201c\u8fc7\u6ee4\u201d\u6b64\u5217\u8868\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u5217\u8868\uff0c
    \u5176\u4e2d\u4ec5\u5305\u542b\u5bf9\u8be5\u8c13\u8bcd\u8fd4\u56de [true] \u7684\u5143\u7d20\u3002 *)

Fixpoint filter {X:Type} (test: X->bool) (l:list X)
                : (list X) :=
  match l with
  | []     => []
  | h :: t => if test h then h :: (filter test t)
                        else       filter test t
  end.

(** \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u5c06 [filter] \u5e94\u7528\u5230\u8c13\u8bcd [evenb] \u548c\u4e00\u4e2a\u6570\u503c\u5217\u8868 [l]
    \u4e0a\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a\u53ea\u5305\u542b [l] \u4e2d\u5076\u6570\u7684\u5217\u8868\u3002 *)

Example test_filter1: filter evenb [1;2;3;4] = [2;4].
Proof. reflexivity. Qed.

Definition length_is_1 {X : Type} (l : list X) : bool :=
  (length l) =? 1.

Example test_filter2:
    filter length_is_1
           [ [1; 2]; [3]; [4]; [5;6;7]; []; [8] ]
  = [ [3]; [4]; [8] ].
Proof. reflexivity. Qed.

(** \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 [filter] \u7ed9\u51fa [Lists] \u4e2d [countoddmembers]
    \u51fd\u6570\u7684\u7b80\u6d01\u7684\u7248\u672c\u3002 *)

Definition countoddmembers' (l:list nat) : nat :=
  length (filter oddb l).

Example test_countoddmembers'1:   countoddmembers' [1;0;3;1;4;5] = 4.
Proof. reflexivity. Qed.
Example test_countoddmembers'2:   countoddmembers' [0;2;4] = 0.
Proof. reflexivity. Qed.
Example test_countoddmembers'3:   countoddmembers' nil = 0.
Proof. reflexivity. Qed.

(* ================================================================= *)
(** ** \u533f\u540d\u51fd\u6570 *)

(** \u5728\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a [length_is_1] \u7684\u51fd\u6570\uff0c
    \u4ee5\u4fbf\u8ba9\u5b83\u80fd\u591f\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u5230 [filter] \u4e2d\uff0c\u7531\u4e8e\u8be5\u51fd\u6570\u53ef\u80fd\u518d\u4e5f\u7528\u4e0d\u5230\u4e86\uff0c
    \u8fd9\u6709\u70b9\u4ee4\u4eba\u6cae\u4e27\u3002\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u4f20\u5165\u201c\u4e00\u6b21\u6027\u201d\u7684\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u4e4b\u540e\u4e0d\u4f1a\u518d\u7528\uff0c
    \u800c\u4e3a\u6bcf\u4e2a\u51fd\u6570\u53d6\u540d\u662f\u5341\u5206\u65e0\u804a\u7684\u3002

    \u5e78\u8fd0\u7684\u662f\uff0c\u6709\u4e00\u79cd\u66f4\u597d\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u6309\u9700\u968f\u65f6\u6784\u9020\u51fd\u6570\u800c\u4e0d\u5fc5\u5728\u9876\u5c42\u4e2d\u58f0\u660e\u5b83
    \u6216\u7ed9\u5b83\u53d6\u540d\u3002 *)

Example test_anon_fun':
  doit3times (fun n => n * n) 2 = 256.
Proof. reflexivity. Qed.

(** \u8868\u8fbe\u5f0f [(fun n => n * n)] \u53ef\u8bfb\u4f5c\u201c\u4e00\u4e2a\u7ed9\u5b9a [n] \u5e76\u8fd4\u56de [n * n] \u7684\u51fd\u6570\u3002\u201d *)

(** \u4ee5\u4e0b\u4e3a\u4f7f\u7528\u533f\u540d\u51fd\u6570\u91cd\u5199\u7684 [filter] \u793a\u4f8b\uff1a*)

Example test_filter2':
    filter (fun l => (length l) =? 1)
           [ [1; 2]; [3]; [4]; [5;6;7]; []; [8] ]
  = [ [3]; [4]; [8] ].
Proof. reflexivity. Qed.

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard (filter_even_gt7) 

    \u4f7f\u7528 [filter]\uff08\u800c\u975e [Fixpoint]\uff09\u6765\u7f16\u5199 Coq \u51fd\u6570 [filter_even_gt7]\uff0c
    \u5b83\u63a5\u53d7\u4e00\u4e2a\u81ea\u7136\u6570\u5217\u8868\u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u4e00\u4e2a\u53ea\u5305\u542b\u5927\u4e8e [7] \u7684\u5076\u6570\u7684\u5217\u8868\u3002 *)

Definition filter_even_gt7 (l : list nat) : list nat
  (* \u5c06\u672c\u884c\u66ff\u6362\u6210 ":= _\u4f60\u7684_\u5b9a\u4e49_ ." *). Admitted.

Example test_filter_even_gt7_1 :
  filter_even_gt7 [1;2;6;9;10;3;12;8] = [10;12;8].
 (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Example test_filter_even_gt7_2 :
  filter_even_gt7 [5;2;6;19;129] = [].
 (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(** **** \u7ec3\u4e60\uff1a3 \u661f, standard (partition) 

    \u4f7f\u7528 [filter] \u7f16\u5199\u4e00\u4e2a Coq \u51fd\u6570 [partition]\uff1a

      partition : forall X : Type,
                  (X -> bool) -> list X -> list X * list X

   \u7ed9\u5b9a\u4e00\u4e2a\u96c6\u5408 [X]\u3001\u4e00\u4e2a\u7c7b\u578b\u4e3a [X -> bool] \u7684\u65ad\u8a00\u548c\u4e00\u4e2a [list X]\uff0c
   [partition] \u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\u7684\u5e8f\u5bf9\u3002\u8be5\u5e8f\u5bf9\u7684\u7b2c\u4e00\u4e2a\u6210\u5458\u4e3a\u5305\u542b\u539f\u59cb\u5217\u8868\u4e2d
   \u6ee1\u8db3\u8be5\u6d4b\u8bd5\u7684\u5b50\u5217\u8868\uff0c\u800c\u7b2c\u4e8c\u4e2a\u6210\u5458\u4e3a\u5305\u542b\u4e0d\u6ee1\u8db3\u8be5\u6d4b\u8bd5\u7684\u5143\u7d20\u7684\u5b50\u5217\u8868\u3002
   \u4e24\u4e2a\u5b50\u5217\u8868\u4e2d\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u5f53\u4e0e\u5b83\u4eec\u5728\u539f\u59cb\u5217\u8868\u4e2d\u7684\u987a\u5e8f\u76f8\u540c\u3002 *)

Definition partition {X : Type}
                     (test : X -> bool)
                     (l : list X)
                   : list X * list X
  (* \u5c06\u672c\u884c\u66ff\u6362\u6210 ":= _\u4f60\u7684_\u5b9a\u4e49_ ." *). Admitted.

Example test_partition1: partition oddb [1;2;3;4;5] = ([1;3;5], [2;4]).
(* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
Example test_partition2: partition (fun x => false) [5;9;0] = ([], [5;9;0]).
(* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(* ================================================================= *)
(** ** \u6620\u5c04 *)

(** \u53e6\u4e00\u4e2a\u65b9\u4fbf\u7684\u9ad8\u9636\u51fd\u6570\u53eb\u505a [map]\u3002 *)

Fixpoint map {X Y: Type} (f:X->Y) (l:list X) : (list Y) :=
  match l with
  | []     => []
  | h :: t => (f h) :: (map f t)
  end.

(** \u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570 [f] \u548c\u4e00\u4e2a\u5217\u8868 [ l = [n1, n2, n3, ...] ]
    \u5e76\u8fd4\u56de\u5217\u8868 [ [f n1, f n2, f n3,...] ]\uff0c\u5176\u4e2d [f] \u53ef\u5206\u522b\u5e94\u7528\u4e8e [l]
    \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002\u4f8b\u5982\uff1a *)

Example test_map1: map (fun x => plus 3 x) [2;0;2] = [5;3;5].
Proof. reflexivity. Qed.

(** \u8f93\u5165\u5217\u8868\u548c\u8f93\u51fa\u5217\u8868\u7684\u5143\u7d20\u7c7b\u578b\u4e0d\u5fc5\u76f8\u540c\uff0c\u56e0\u4e3a [map] \u4f1a\u63a5\u53d7_'\u4e24\u4e2a'_\u7c7b\u578b\u53c2\u6570
    [X] \u548c [Y]\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u5e94\u7528\u5230\u4e00\u4e2a\u6570\u503c\u7684\u5217\u8868\u548c\u4e00\u4e2a\u4ece\u6570\u503c\u5230\u5e03\u5c14\u503c\u7684\u51fd\u6570\uff0c
    \u5e76\u4ea7\u751f\u4e00\u4e2a\u5e03\u5c14\u503c\u5217\u8868\uff1a *)

Example test_map2:
  map oddb [2;1;2;5] = [false;true;false;true].
Proof. reflexivity. Qed.

(** \u5b83\u751a\u81f3\u53ef\u4ee5\u5e94\u7528\u5230\u4e00\u4e2a\u6570\u503c\u7684\u5217\u8868\u548c\u4e00\u4e2a\u4ece\u6570\u503c\u5230\u5e03\u5c14\u503c\u5217\u8868\u7684\u51fd\u6570\uff0c
    \u5e76\u4ea7\u751f\u4e00\u4e2a\u5e03\u5c14\u503c\u7684_'\u5217\u8868\u7684\u5217\u8868'_\uff1a *)

Example test_map3:
    map (fun n => [evenb n;oddb n]) [2;1;2;5]
  = [[true;false];[false;true];[true;false];[false;true]].
Proof. reflexivity. Qed.

(* ----------------------------------------------------------------- *)
(** *** \u4e60\u9898 *)

(** **** \u7ec3\u4e60\uff1a3 \u661f, standard (map_rev) 

    \u8bf7\u8bc1\u660e [map] \u548c [rev] \u53ef\u4ea4\u6362\u3002\u4f60\u53ef\u80fd\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u8f85\u52a9\u5f15\u7406 *)

Theorem map_rev : forall (X Y : Type) (f : X -> Y) (l : list X),
  map f (rev l) = rev (map f l).
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard, recommended (flat_map) 

    \u51fd\u6570 [map] \u901a\u8fc7\u4e00\u4e2a\u7c7b\u578b\u4e3a [X -> Y] \u7684\u51fd\u6570\u5c06 [list X] \u6620\u5c04\u5230 [list Y]\u3002
    \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u4f3c\u7684\u51fd\u6570 [flat_map]\uff0c\u5b83\u901a\u8fc7\u4e00\u4e2a\u7c7b\u578b\u4e3a [X -> list Y]
    \u7684\u51fd\u6570 [f] \u5c06 [list X] \u6620\u5c04\u5230 [list Y]\u3002\u4f60\u7684\u5b9a\u4e49\u5e94\u5f53\u53ef\u4ee5\u201c\u538b\u6241\u201d[f]
    \u7684\u7ed3\u679c\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a

        flat_map (fun n => [n;n+1;n+2]) [1;5;10]
      = [1; 2; 3; 5; 6; 7; 10; 11; 12].
*)

Fixpoint flat_map {X Y: Type} (f: X -> list Y) (l: list X)
                   : (list Y)
  (* \u5c06\u672c\u884c\u66ff\u6362\u6210 ":= _\u4f60\u7684_\u5b9a\u4e49_ ." *). Admitted.

Example test_flat_map1:
  flat_map (fun n => [n;n;n]) [1;5;4]
  = [1; 1; 1; 5; 5; 5; 4; 4; 4].
 (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(** [map] \u8fd9\u4e2a\u51fd\u6570\u4e0d\u6b62\u5bf9\u5217\u8868\u6709\u610f\u4e49\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5728 [option] \u4e0a\u7684 [map]\uff1a*)

Definition option_map {X Y : Type} (f : X -> Y) (xo : option X)
                      : option Y :=
  match xo with
    | None => None
    | Some x => Some (f x)
  end.

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard, optional (implicit_args) 

    [filter] \u548c [map] \u7684\u5b9a\u4e49\u548c\u5e94\u7528\u5728\u5f88\u591a\u5730\u65b9\u4f7f\u7528\u4e86\u9690\u5f0f\u53c2\u6570\u3002
    \u8bf7\u5c06\u9690\u5f0f\u53c2\u6570\u5916\u5c42\u7684\u82b1\u62ec\u53f7\u66ff\u6362\u4e3a\u5706\u62ec\u53f7\uff0c\u7136\u540e\u5728\u5fc5\u8981\u7684\u5730\u65b9\u8865\u5145\u663e\u5f0f\u7c7b\u578b\u5f62\u53c2\u5e76\u7528
    Coq \u68c0\u67e5\u4f60\u505a\u7684\u662f\u5426\u6b63\u786e\u3002\uff08\u672c\u7ec3\u4e60\u5e76\u4e0d\u4f1a\u6253\u5206\uff0c\u4f60\u53ef\u4ee5\u5728\u672c\u6587\u4ef6\u7684_'\u526f\u672c'_\u4e2d\u505a\u5b83\uff0c
    \u4e4b\u540e\u4e22\u6389\u5373\u53ef\u3002\uff09
*)
(** [] *)

(* ================================================================= *)
(** ** \u6298\u53e0 *)

(** \u4e00\u4e2a\u66f4\u52a0\u5f3a\u5927\u7684\u9ad8\u9636\u51fd\u6570\u53eb\u505a [fold]\u3002\u672c\u51fd\u6570\u542f\u53d1\u81ea\u201c[reduce] \u5f52\u7ea6\u201d
    \u64cd\u4f5c\uff0c\u5b83\u662f Google \u7684 map/reduce \u5206\u5e03\u5f0f\u7f16\u7a0b\u6846\u67b6\u7684\u6838\u5fc3\u3002 *)

Fixpoint fold {X Y: Type} (f: X->Y->Y) (l: list X) (b: Y)
                         : Y :=
  match l with
  | nil => b
  | h :: t => f h (fold f t b)
  end.

(** \u76f4\u89c2\u4e0a\u6765\u8bf4\uff0c[fold] \u64cd\u4f5c\u7684\u884c\u4e3a\u5c31\u662f\u5c06\u7ed9\u5b9a\u7684\u4e8c\u5143\u64cd\u4f5c\u7b26 [f]
    \u63d2\u5165\u5230\u7ed9\u5b9a\u5217\u8868\u7684\u6bcf\u4e00\u5bf9\u5143\u7d20\u4e4b\u95f4\u3002\u4f8b\u5982\uff0c[ fold plus [1;2;3;4] ]
    \u76f4\u89c2\u4e0a\u7684\u610f\u601d\u662f [1+2+3+4]\u3002\u4e3a\u4e86\u8ba9\u5b83\u66f4\u7cbe\u786e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u201c\u8d77\u59cb\u5143\u7d20\u201d
    \u4f5c\u4e3a [f] \u521d\u59cb\u7684\u7b2c\u4e8c\u4e2a\u8f93\u5165\u3002\u56e0\u6b64\uff0c\u4f8b\u5982

       fold plus [1;2;3;4] 0

    \u5c31\u4f1a\u4ea7\u751f

       1 + (2 + (3 + (4 + 0))).

    \u4ee5\u4e0b\u662f\u66f4\u591a\u4f8b\u5b50\uff1a *)

Check (fold andb) : list bool -> bool -> bool.

Example fold_example1 :
  fold mult [1;2;3;4] 1 = 24.
Proof. reflexivity. Qed.

Example fold_example2 :
  fold andb [true;true;false;true] true = false.
Proof. reflexivity. Qed.

Example fold_example3 :
  fold app  [[1];[];[2;3];[4]] [] = [1;2;3;4].
Proof. reflexivity. Qed.

(** **** \u7ec3\u4e60\uff1a1 \u661f, advanced (fold_types_different) 

    \u6211\u4eec\u89c2\u5bdf\u5230 [fold] \u7531 [X] \u548c [Y] \u8fd9_'\u4e24\u4e2a'_\u7c7b\u578b\u53d8\u91cf\u53c2\u6570\u5316\uff0c\u5f62\u53c2 [f]
    \u5219\u662f\u4e2a\u63a5\u53d7 [X] \u548c [Y] \u5e76\u8fd4\u56de [Y] \u7684\u4e8c\u5143\u64cd\u4f5c\u7b26\u3002\u4f60\u80fd\u60f3\u51fa\u4e00\u79cd [X] \u548c
    [Y] \u4e0d\u540c\u65f6\u7684\u5e94\u7528\u60c5\u666f\u5417\uff1f *)

(* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *)

(* \u8bf7\u52ff\u4fee\u6539\u4e0b\u9762\u8fd9\u4e00\u884c\uff1a *)
Definition manual_grade_for_fold_types_different : option (nat*string) := None.
(** [] *)

(* ================================================================= *)
(** ** \u7528\u51fd\u6570\u6784\u9020\u51fd\u6570 *)

(** \u76ee\u524d\u6211\u4eec\u8ba8\u8bba\u8fc7\u7684\u5927\u90e8\u5206\u9ad8\u9636\u51fd\u6570\u90fd\u662f\u63a5\u53d7\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u3002
    \u73b0\u5728\u6211\u4eec\u6765\u770b\u4e00\u4e9b\u5c06\u51fd\u6570\u4f5c\u4e3a\u5176\u5b83\u51fd\u6570\u7684\u7ed3\u679c_'\u8fd4\u56de'_\u7684\u4f8b\u5b50\u3002
    \u9996\u5148\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u63a5\u53d7\u503c [x]\uff08\u7531\u67d0\u4e2a\u7c7b\u578b [X] \u523b\u753b\uff09\u5e76\u8fd4\u56de\u4e00\u4e2a\u4ece
    [nat] \u5230 [X] \u7684\u51fd\u6570\uff0c\u5f53\u5b83\u88ab\u8c03\u7528\u65f6\u603b\u662f\u4ea7\u751f [x] \u5e76\u5ffd\u7565\u5176 [nat] \u53c2\u6570\u3002 *)

Definition constfun {X: Type} (x: X) : nat->X :=
  fun (k:nat) => x.

Definition ftrue := constfun true.

Example constfun_example1 : ftrue 0 = true.
Proof. reflexivity. Qed.

Example constfun_example2 : (constfun 5) 99 = 5.
Proof. reflexivity. Qed.

(** \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u89c1\u8fc7\u7684\u591a\u53c2\u51fd\u6570\u4e5f\u662f\u8bb2\u51fd\u6570\u4f5c\u4e3a\u6570\u636e\u4f20\u5165\u7684\u4f8b\u5b50\u3002
    \u4e3a\u4e86\u7406\u89e3\u4e3a\u4ec0\u4e48\uff0c\u8bf7\u56de\u60f3 [plus] \u7684\u7c7b\u578b\u3002 *)

Check plus : nat -> nat -> nat.

(** \u8be5\u8868\u8fbe\u5f0f\u4e2d\u7684\u6bcf\u4e2a [->] \u5b9e\u9645\u4e0a\u90fd\u662f\u4e00\u4e2a\u7c7b\u578b\u4e0a\u7684_'\u4e8c\u5143'_\u64cd\u4f5c\u7b26\u3002
    \u8be5\u64cd\u4f5c\u7b26\u662f_'\u53f3\u7ed3\u5408'_\u7684\uff0c\u56e0\u6b64 [plus] \u7684\u7c7b\u578b\u5176\u5b9e\u662f [nat -> (nat -> nat)]
    \u7684\u7b80\u5199\uff0c\u5373\uff0c\u5b83\u53ef\u4ee5\u8bfb\u4f5c\u201c[plus] \u662f\u4e00\u4e2a\u5355\u53c2\u6570\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a [nat]
    \u5e76\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u53e6\u4e00\u4e2a [nat] \u5e76\u8fd4\u56de\u4e00\u4e2a [nat]\u201d\u3002
    \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u5c06 [plus] \u4e00\u6b21\u540c\u65f6\u5e94\u7528\u5230\u4e24\u4e2a\u53c2\u6570\u4e0a\u3002
    \u4e0d\u8fc7\u5982\u679c\u6211\u4eec\u559c\u6b22\uff0c\u4e5f\u53ef\u4ee5\u4e00\u6b21\u53ea\u63d0\u4f9b\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd9\u53eb\u505a_'\u504f\u5e94\u7528\uff08Partial
    Application\uff09'_\u3002 *)

Definition plus3 := plus 3.
Check plus3 : nat -> nat.

Example test_plus3 :    plus3 4 = 7.
Proof. reflexivity. Qed.
Example test_plus3' :   doit3times plus3 0 = 9.
Proof. reflexivity. Qed.
Example test_plus3'' :  doit3times (plus 3) 0 = 9.
Proof. reflexivity. Qed.

(* ################################################################# *)
(** * \u9644\u52a0\u7ec3\u4e60 *)

Module Exercises.

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard (fold_length) 

    \u5217\u8868\u7684\u5f88\u591a\u901a\u7528\u51fd\u6570\u90fd\u53ef\u4ee5\u901a\u8fc7 [fold] \u6765\u5b9e\u73b0\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u662f
    [length] \u7684\u53e6\u4e00\u79cd\u5b9e\u73b0\uff1a *)

Definition fold_length {X : Type} (l : list X) : nat :=
  fold (fun _ n => S n) l 0.

Example test_fold_length1 : fold_length [4;7;0] = 3.
Proof. reflexivity. Qed.

(** \u8bf7\u8bc1\u660e [fold_length] \u7684\u6b63\u786e\u6027\u3002
    \uff08\u63d0\u793a\uff1a\u77e5\u9053 [reflexivity] \u7684\u5316\u7b80\u529b\u5ea6\u6bd4 [simpl]
    \u66f4\u5927\u6216\u8bb8\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u6216\u8bb8\u4f1a\u9047\u5230 [simpl] \u65e0\u6cd5\u89e3\u51b3\u4f46 [reflexivity]
    \u53ef\u4ee5\u89e3\u51b3\u7684\u76ee\u6807\u3002\uff09 *)

Theorem fold_length_correct : forall X (l : list X),
  fold_length l = length l.
Proof.
(* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(** **** \u7ec3\u4e60\uff1a3 \u661f, standard (fold_map) 

    \u6211\u4eec\u4e5f\u53ef\u4ee5\u7528 [fold] \u6765\u5b9a\u4e49 [map]\u3002\u8bf7\u5b8c\u6210\u4e0b\u9762\u7684 [fold_map]\u3002 *)

Definition fold_map {X Y: Type} (f: X -> Y) (l: list X) : list Y
  (* \u5c06\u672c\u884c\u66ff\u6362\u6210 ":= _\u4f60\u7684_\u5b9a\u4e49_ ." *). Admitted.

(** \u5728 Coq \u4e2d\u5199\u51fa [fold_map_correct] \u6765\u9648\u8ff0 [fold_map] \u662f\u6b63\u786e\u7684\uff0c\u7136\u540e\u8bc1\u660e\u5b83\u3002
    \uff08\u63d0\u793a\uff1a\u518d\u6b21\u63d0\u9192\uff0c[reflexivity] \u7684\u5316\u7b80\u529b\u5ea6\u6bd4 [simpl] \u66f4\u5f3a\u3002\uff09 *)

(* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *)

(* \u8bf7\u52ff\u4fee\u6539\u4e0b\u9762\u8fd9\u4e00\u884c\uff1a *)
Definition manual_grade_for_fold_map : option (nat*string) := None.
(** [] *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, advanced (currying) 

    \u5728 Coq \u4e2d\uff0c\u51fd\u6570 [f : A -> B -> C] \u7684\u7c7b\u578b\u5176\u5b9e\u662f [A -> (B -> C)]\u3002
    \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u7ed9 [f] \u4e00\u4e2a\u7c7b\u578b\u4e3a [A] \u7684\u503c\uff0c\u5b83\u5c31\u4f1a\u7ed9\u4f60\u51fd\u6570 [f' : B -> C]\u3002
    \u5982\u679c\u518d\u7ed9 [f'] \u4e00\u4e2a\u7c7b\u578b\u4e3a [B] \u7684\u503c\uff0c\u5b83\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a [C] \u7684\u503c\u3002
    \u8fd9\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 [plus3] \u4e2d\u7684\u90a3\u79cd\u504f\u5e94\u7528\u80fd\u529b\u3002
    \u7528\u8fd4\u56de\u51fd\u6570\u7684\u51fd\u6570\u5904\u7406\u53c2\u6570\u5217\u8868\u7684\u65b9\u5f0f\u88ab\u79f0\u4e3a_'\u67ef\u91cc\u5316\uff08Currying\uff09'_\uff0c
    \u5b83\u662f\u4e3a\u4e86\u7eaa\u5ff5\u903b\u8f91\u5b66\u5bb6 Haskell Curry\u3002

    \u53cd\u4e4b\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06 [A -> B -> C] \u89e3\u91ca\u4e3a [(A * B) -> C]\u3002\u8fd9\u53eb\u505a
    _'\u53cd\u67ef\u91cc\u5316\uff08Uncurrying\uff09'_\u3002\u5bf9\u4e8e\u53cd\u67ef\u91cc\u5316\u7684\u4e8c\u5143\u51fd\u6570\uff0c
    \u4e24\u4e2a\u53c2\u6570\u5fc5\u987b\u4f5c\u4e3a\u5e8f\u5bf9\u4e00\u6b21\u7ed9\u51fa\uff0c\u6b64\u65f6\u5b83\u4e0d\u4f1a\u504f\u5e94\u7528\u3002 *)

(** \u6211\u4eec\u53ef\u4ee5\u5c06\u67ef\u91cc\u5316\u5b9a\u4e49\u5982\u4e0b\uff1a *)

Definition prod_curry {X Y Z : Type}
  (f : X * Y -> Z) (x : X) (y : Y) : Z := f (x, y).

(** \u4f5c\u4e3a\u7ec3\u4e60\uff0c\u8bf7\u5b9a\u4e49\u5b83\u7684\u53cd\u51fd\u6570 [prod_uncurry]\uff0c
    \u7136\u540e\u5728\u4e0b\u9762\u8bc1\u660e\u5b83\u4eec\u4e92\u4e3a\u53cd\u51fd\u6570\u7684\u5b9a\u7406\u3002 *)

Definition prod_uncurry {X Y Z : Type}
  (f : X -> Y -> Z) (p : X * Y) : Z
  (* \u5c06\u672c\u884c\u66ff\u6362\u6210 ":= _\u4f60\u7684_\u5b9a\u4e49_ ." *). Admitted.

(** \u4e3e\u4e00\u4e2a\u67ef\u91cc\u5316\u7528\u9014\u7684\uff08\u5e73\u51e1\u7684\uff09\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u6765\u7f29\u77ed\u4e4b\u524d\u770b\u5230\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a *)

Example test_map1': map (plus 3) [2;0;2] = [5;3;5].
Proof. reflexivity. Qed.

(** \u601d\u8003\u7ec3\u4e60\uff1a\u5728\u8fd0\u884c\u4ee5\u4e0b\u6307\u4ee4\u4e4b\u524d\uff0c\u4f60\u80fd\u8ba1\u7b97\u51fa [prod_curry] \u548c [prod_uncurry] 
    \u7684\u7c7b\u578b\u5417\uff1f *)

Check @prod_curry.
Check @prod_uncurry.

Theorem uncurry_curry : forall (X Y Z : Type)
                        (f : X -> Y -> Z)
                        x y,
  prod_curry (prod_uncurry f) x y = f x y.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem curry_uncurry : forall (X Y Z : Type)
                        (f : (X * Y) -> Z) (p : X * Y),
  prod_uncurry (prod_curry f) p = f p.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, advanced (nth_error_informal) 

    \u56de\u60f3 [nth_error] \u51fd\u6570\u7684\u5b9a\u4e49\uff1a

   Fixpoint nth_error {X : Type} (l : list X) (n : nat) : option X :=
     match l with
     | [] => None
     | a :: l' => if n =? O then Some a else nth_error l' (pred n)
     end.

   \u8bf7\u5199\u51fa\u4ee5\u4e0b\u5b9a\u7406\u7684\u975e\u5f62\u5f0f\u5316\u8bc1\u660e\uff1a

   forall X l n, length l = n -> @nth_error X l n = None
*)
(* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *)

(* \u8bf7\u52ff\u4fee\u6539\u4e0b\u9762\u8fd9\u4e00\u884c\uff1a *)
Definition manual_grade_for_informal_proof : option (nat*string) := None.
(** [] *)

(** \u672c\u7ec3\u4e60\u4f7f\u7528_'\u90b1\u5947\u6570\uff08Church numerals\uff09'_\u63a2\u8ba8\u4e86\u53e6\u4e00\u79cd\u5b9a\u4e49\u81ea\u7136\u6570\u7684\u65b9\u5f0f\uff0c
    \u5b83\u4ee5\u6570\u5b66\u5bb6 Alonzo Church \u547d\u540d\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u81ea\u7136\u6570 [n] \u8868\u793a\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c
    \u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570 [f] \u4f5c\u4e3a\u53c2\u6570\u5e76\u8fd4\u56de\u8fed\u4ee3\u4e86 [n] \u6b21\u7684 [f]\u3002 *)

Module Church.
Definition cnat := forall X : Type, (X -> X) -> X -> X.

(** \u6211\u4eec\u6765\u770b\u770b\u5982\u4f55\u7528\u8fd9\u79cd\u8bb0\u6cd5\u5199\u6570\u3002\u5c06\u51fd\u6570\u8fed\u4ee3\u4e00\u6b21\u5e94\u5f53\u4e0e\u5c06\u5b83\u5e94\u7528\u4e00\u6b21\u76f8\u540c\u3002
    \u56e0\u6b64\uff1a *)

Definition one : cnat :=
  fun (X : Type) (f : X -> X) (x : X) => f x.

(** \u4e0e\u6b64\u7c7b\u4f3c\uff0c[two] \u5e94\u5f53\u5bf9\u5176\u53c2\u6570\u5e94\u7528\u4e24\u6b21 [f]\uff1a *)

Definition two : cnat :=
  fun (X : Type) (f : X -> X) (x : X) => f (f x).

(** \u5b9a\u4e49 [zero] \u6709\u70b9\u5201\u94bb\uff1a\u6211\u4eec\u5982\u4f55\u201c\u5c06\u51fd\u6570\u5e94\u7528\u96f6\u6b21\u201d\uff1f\u7b54\u6848\u5f88\u7b80\u5355\uff1a
    \u628a\u53c2\u6570\u539f\u6837\u8fd4\u56de\u5c31\u597d\u3002 *)

Definition zero : cnat :=
  fun (X : Type) (f : X -> X) (x : X) => x.

(** \u66f4\u4e00\u822c\u5730\u8bf4\uff0c\u6570 [n] \u53ef\u4ee5\u5199\u4f5c [fun X f x => f (f
    ... (f x) ...)]\uff0c\u5176\u4e2d [f] \u51fa\u73b0\u4e86 [n] \u6b21\u3002\u8981\u7279\u522b\u6ce8\u610f\u6211\u4eec\u4e4b\u524d\u5b9a\u4e49
    [doit3times] \u51fd\u6570\u7684\u65b9\u5f0f\u5c31\u662f [3] \u7684\u90b1\u5947\u6570\u8868\u793a\u3002 *)

Definition three : cnat := @doit3times.

(** \u5b8c\u6210\u4ee5\u4e0b\u51fd\u6570\u7684\u5b9a\u4e49\u3002\u8bf7\u7528 [reflexivity] \u8bc1\u660e\u6765\u786e\u8ba4\u5b83\u4eec\u80fd\u591f\u901a\u8fc7\u5bf9\u5e94\u7684\u5355\u5143\u6d4b\u8bd5\u3002 *)

(** **** \u7ec3\u4e60\uff1a1 \u661f, advanced (church_succ)  *)

(** \u81ea\u7136\u6570\u7684\u540e\u7ee7\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u90b1\u5947\u6570 [n]\uff0c\u5b83\u7684\u540e\u7ee7 [succ n] \u662f\u4e00\u4e2a\u628a\u5b83\u7684\u53c2\u6570\u6bd4 [n]
    \u8fd8\u591a\u8fed\u4ee3\u4e00\u6b21\u7684\u51fd\u6570\u3002 *)
Definition succ (n : cnat) : cnat :=
  fun (X: Type) (f : X -> X) (x: X) => f (n X f x).

Example succ_1 : succ zero = one.
Proof. reflexivity. Qed.

Example succ_2 : succ one = two.
Proof. reflexivity. Qed.

Example succ_3 : succ two = three.
Proof. reflexivity. Qed.

(** [] *)

(** **** \u7ec3\u4e60\uff1a1 \u661f, advanced (church_plus)  *)
(** \u4e24\u90b1\u5947\u6570\u76f8\u52a0\uff1a *)
Definition plus (n m : cnat) : cnat :=
  fun (X: Type) (f : X -> X) (x: X) 
       => (n X f (m X f x)).

Example plus_1 : plus zero one = one.
Proof. reflexivity. Qed.

Example plus_2 : plus two three = plus three two.
Proof. reflexivity. Qed.

Example plus_3 :
  plus (plus two two) three = plus one (plus three three).
Proof. reflexivity. Qed.

(** [] *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, advanced (church_mult)  *)

(** \u4e58\u6cd5\uff1a *)
Definition mult (n m : cnat) : cnat :=
  fun (X: Type) (f : X -> X) (x: X) 
       => (n X (m X f) x).

Example mult_1 : mult one one = one.
Proof. reflexivity. Qed.

Example mult_2 : mult zero (plus three three) = zero.
Proof. reflexivity. Qed.

Example mult_3 : mult two three = plus three three.
Proof. reflexivity. Qed.

(** [] *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, advanced (church_exp)  *)

(** \u4e58\u65b9\uff1a *)

(** \uff08_'\u63d0\u793a'_\uff1a\u591a\u6001\u5728\u8fd9\u91cc\u8d77\u5230\u4e86\u5173\u952e\u7684\u4f5c\u7528\u3002\u7136\u800c\uff0c\u68d8\u624b\u4e4b\u5904\u5728\u4e8e\u9009\u62e9\u6b63\u786e\u7684\u7c7b\u578b\u6765\u8fed\u4ee3\u3002
    \u5982\u679c\u4f60\u9047\u5230\u4e86\u300cUniverse inconsistency\uff0c\u5168\u57df\u4e0d\u4e00\u81f4\u300d\u9519\u8bef\uff0c\u8bf7\u5728\u4e0d\u540c\u7684\u7c7b\u578b\u4e0a\u8fed
    \u4ee3\u3002\u5728 [cnat] \u672c\u8eab\u4e0a\u8fed\u4ee3\u901a\u5e38\u4f1a\u6709\u95ee\u9898\u3002\uff09 *)

Definition exp (n m : cnat) : cnat
  := fun (X: Type) (f : X -> X) (x: X) 
       => (m ((X -> X) -> X -> X) (n ((X -> X) -> X -> X) )(one X)) x.

Example exp_1 : exp two two = plus two two.
Proof. reflexivity. Qed.

Example exp_2 : exp three zero = one.
Proof. reflexivity. Qed.

Example exp_3 : exp three two = plus (mult two (mult two two)) one.
Proof. reflexivity. Qed.

(** [] *)

End Church.

End Exercises.


(* 2022-03-14 05:26:56 (UTC+00) *)
