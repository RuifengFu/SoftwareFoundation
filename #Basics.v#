(** * Basics: Coq \u51fd\u6570\u5f0f\u7f16\u7a0b *)

(* REMINDER:

          ##############################
          ###  \u8bf7\u52ff\u516c\u5f00\u53d1\u5e03\u4e60\u9898\u89e3\u7b54  ###
          ##############################

   \uff08\u539f\u56e0\u89c1 [Preface]\u3002\uff09
*)

(* ################################################################# *)
(** * \u5f15\u8a00 *)

(** \u51fd\u6570\u5f0f\u7f16\u7a0b\u98ce\u683c\u5efa\u7acb\u5728\u7b80\u5355\u7684\u3001\u65e5\u5e38\u7684\u6570\u5b66\u76f4\u89c9\u4e4b\u4e0a\uff1a\u82e5\u4e00\u4e2a\u8fc7\u7a0b\u6216\u65b9\u6cd5\u6ca1\u6709\u526f\u4f5c\u7528\uff0c
    \u90a3\u4e48\u5728\u5ffd\u7565\u6548\u7387\u7684\u524d\u63d0\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u7406\u89e3\u7684\u4e00\u5207\u4fbf\u53ea\u5269\u4e0b\u5b83\u5982\u4f55\u5c06\u8f93\u5165\u6620\u5c04\u5230\u8f93\u51fa\u4e86
    \u2014\u2014 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u5b83\u89c6\u4f5c\u4e00\u79cd\u8ba1\u7b97\u6570\u5b66\u51fd\u6570\u7684\u5177\u4f53\u65b9\u6cd5\u5373\u53ef\u3002\u8fd9\u4e5f\u662f
    \u201c\u51fd\u6570\u5f0f\u7f16\u7a0b\u201d\u4e2d\u201c\u51fd\u6570\u5f0f\u201d\u4e00\u8bcd\u7684\u542b\u4e49\u4e4b\u4e00\u3002\u7a0b\u5e8f\u4e0e\u7b80\u5355\u6570\u5b66\u5bf9\u8c61\u4e4b\u95f4\u8fd9\u79cd\u76f4\u63a5\u7684\u8054\u7cfb\uff0c
    \u540c\u65f6\u652f\u6491\u4e86\u5bf9\u7a0b\u5e8f\u884c\u4e3a\u8fdb\u884c\u5f62\u5f0f\u5316\u8bc1\u660e\u7684\u6b63\u786e\u6027\u4ee5\u53ca\u975e\u5f62\u5f0f\u5316\u8bba\u8bc1\u7684\u53ef\u9760\u6027\u3002

    \u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u201c\u51fd\u6570\u5f0f\u201d\u4e00\u8bcd\u7684\u53e6\u4e00\u4e2a\u542b\u4e49\u662f\u5b83\u5f3a\u8c03\u628a\u51fd\u6570\u4f5c\u4e3a_'\u4e00\u7b49'_\u7684\u503c
    \u2014\u2014 \u8fd9\u7c7b\u503c\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u5176\u5b83\u51fd\u6570\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de\uff0c
    \u4e5f\u53ef\u4ee5\u5305\u542b\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u7b49\u7b49\u3002\u8fd9\u79cd\u5c06\u51fd\u6570\u5f53\u505a\u6570\u636e\u7684\u65b9\u5f0f\uff0c
    \u4ea7\u751f\u4e86\u5927\u91cf\u5f3a\u5927\u800c\u6709\u7528\u7684\u7f16\u7a0b\u4e60\u8bed\uff08Idiom\uff09\u3002

    \u5176\u5b83\u5e38\u89c1\u7684\u51fd\u6570\u5f0f\u8bed\u8a00\u7279\u6027\u5305\u62ec\u80fd\u8ba9\u6784\u9020\u548c\u5904\u7406\u4e30\u5bcc\u6570\u636e\u7ed3\u6784\u66f4\u52a0\u7b80\u5355\u7684
    _'\u4ee3\u6570\u6570\u636e\u7c7b\u578b\uff08Algebraic Data Type\uff09'_\u548c_'\u6a21\u5f0f\u5339\u914d\uff08Pattern Matching\uff09'_\uff0c
    \u4ee5\u53ca\u7528\u6765\u652f\u6301\u62bd\u8c61\u548c\u4ee3\u7801\u590d\u7528\u7684_'\u591a\u6001\u7c7b\u578b\u7cfb\u7edf\uff08Polymorphic Type System\uff09'_\u3002
    Coq \u63d0\u4f9b\u4e86\u6240\u6709\u8fd9\u4e9b\u7279\u6027\u3002

    \u672c\u7ae0\u7684\u524d\u534a\u90e8\u5206\u4ecb\u7ecd\u4e86 Coq \u539f\u751f\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00 _'Gallina'_ \u4e2d\u6700\u57fa\u672c\u7684\u5143\u7d20\uff0c
    \u540e\u534a\u90e8\u5206\u5219\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u57fa\u672c_'\u7b56\u7565\uff08Tactic\uff09'_\uff0c\u5b83\u53ef\u7528\u4e8e\u8bc1\u660e Gallina \u7a0b\u5e8f\u7684\u7b80\u5355\u6027\u8d28\u3002 *)

(* ################################################################# *)
(** * \u6570\u636e\u4e0e\u51fd\u6570 *)

(* ================================================================= *)
(** ** \u679a\u4e3e\u7c7b\u578b *)

(** Coq \u7684\u4e00\u4e2a\u4e0d\u540c\u5bfb\u5e38\u4e4b\u5904\u5728\u4e8e\u5b83_'\u6781\u5c0f'_\u7684\u5185\u5efa\u7279\u6027\u96c6\u5408\u3002
    \u6bd4\u5982\uff0cCoq \u5e76\u672a\u63d0\u4f9b\u901a\u5e38\u7684\u539f\u8bed\uff08atomic\uff09\u7c7b\u578b\uff08\u5982\u5e03\u5c14\u3001\u6574\u6570\u3001\u5b57\u7b26\u4e32\u7b49\uff09\uff0c
    \u800c\u662f\u63d0\u4f9b\u4e86\u4e00\u79cd\u6781\u4e3a\u5f3a\u5927\u7684\uff0c\u53ef\u4ee5\u4ece\u5934\u5b9a\u4e49\u65b0\u7684\u6570\u636e\u7c7b\u578b\u7684\u673a\u5236
    \u2014\u2014 \u4e0a\u9762\u6240\u6709\u5e38\u89c1\u7684\u7c7b\u578b\u90fd\u662f\u7531\u5b83\u5b9a\u4e49\u800c\u4ea7\u751f\u7684\u5b9e\u4f8b\u3002

    \u5f53\u7136\uff0cCoq \u53d1\u884c\u7248\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86\u5185\u5bb9\u4e30\u5bcc\u7684\u6807\u51c6\u5e93\uff0c\u5176\u4e2d\u5b9a\u4e49\u4e86\u5e03\u5c14\u503c\u3001
    \u6570\u503c\uff0c\u4ee5\u53ca\u5982\u5217\u8868\u3001\u6563\u5217\u8868\u7b49\u8bb8\u591a\u901a\u7528\u7684\u6570\u636e\u7ed3\u6784\u3002
    \u4e0d\u8fc7\u8fd9\u4e9b\u5e93\u4e2d\u7684\u5b9a\u4e49\u5e76\u6ca1\u6709\u4efb\u4f55\u795e\u79d8\u4e4b\u5904\uff0c\u4e5f\u6ca1\u6709\u539f\u8bed\uff08Primitive\uff09\u7684\u7279\u70b9\u3002
    \u4e3a\u4e86\u8bf4\u660e\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5e76\u672a\u5728\u672c\u8bfe\u7a0b\u4e2d\u76f4\u63a5\u4f7f\u7528\u6807\u51c6\u5e93\u4e2d\u7684\u6570\u636e\u7c7b\u578b\uff0c
    \u800c\u662f\u5728\u6574\u4e2a\u6559\u7a0b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u4e86\u5176\u4e2d\u7684\u7edd\u5927\u90e8\u5206\u3002 *)

(* ================================================================= *)
(** ** \u4e00\u5468\u4e03\u65e5 *)

(** \u8ba9\u6211\u4eec\u4ece\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u4f8b\u5b50\u5f00\u59cb\uff0c\u770b\u770b\u8fd9\u79cd\u5b9a\u4e49\u673a\u5236\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002
    \u4ee5\u4e0b\u58f0\u660e\u4f1a\u544a\u8bc9 Coq \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6570\u636e\u96c6\u5408\uff0c\u5373\u4e00\u4e2a_'\u7c7b\u578b\uff08Type\uff09'_\u3002 *)

Inductive day : Type :=
  | monday
  | tuesday
  | wednesday
  | thursday
  | friday
  | saturday
  | sunday.

(** \u8fd9\u4e2a\u65b0\u7684\u7c7b\u578b\u540d\u4e3a [day]\uff0c\u6210\u5458\u5305\u62ec [monday]\u3001[tuesday] \u7b49\u7b49\u3002

    \u5b9a\u4e49\u4e86 [day] \u4e4b\u540e, \u6211\u4eec\u5c31\u80fd\u5199\u4e00\u4e9b\u64cd\u4f5c\u661f\u671f\u7684\u51fd\u6570\u4e86\u3002 *)

Definition next_weekday (d:day) : day :=
  match d with
  | monday    => tuesday
  | tuesday   => wednesday
  | wednesday => thursday
  | thursday  => friday
  | friday    => monday
  | saturday  => monday
  | sunday    => monday
  end.

(** \u6ce8\u610f\uff0c\u8fd9\u91cc\u663e\u5f0f\u58f0\u660e\u4e86\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u3002
    \u548c\u5927\u591a\u6570\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0c\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\uff0cCoq \u901a\u5e38\u4f1a\u81ea\u5df1\u901a\u8fc7
    _'\u7c7b\u578b\u63a8\u65ad\uff08Type Inference\uff09'_ \u5f97\u51fa\u3002\u4e0d\u8fc7\u6211\u4eec\u4f1a\u6807\u4e0a\u7c7b\u578b\u4f7f\u5176\u66f4\u52a0\u6613\u8bfb\u3002 *)

(** \u5b9a\u4e49\u4e86\u51fd\u6570\u4e4b\u540e\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u5e94\u8be5\u7528\u4e00\u4e9b\u4f8b\u5b50\u6765\u68c0\u9a8c\u5b83\u3002
    \u5b9e\u9645\u4e0a\uff0c\u5728 Coq \u4e2d\uff0c\u4e00\u5171\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u68c0\u9a8c\u65b9\u5f0f\uff1a\u7b2c\u4e00\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 [Compute]
    \u6307\u4ee4\u6765\u8ba1\u7b97\u5305\u542b [next_weekday] \u7684\u590d\u5408\u8868\u8fbe\u5f0f\uff1a *)

Compute (next_weekday friday).
(* ==> monday : day *)

Compute (next_weekday (next_weekday saturday)).
(* ==> tuesday : day *)

(** \uff08\u6211\u4eec\u5728\u6ce8\u91ca\u4e2d\u5199\u51fa Coq \u8fd4\u56de\u7684\u7ed3\u679c\u3002\u5982\u679c\u4f60\u8eab\u8fb9\u5c31\u6709\u7535\u8111\uff0c
    \u4e0d\u59a8\u81ea\u5df1\u7528 Coq \u89e3\u91ca\u5668\u8bd5\u4e00\u8bd5\uff1a\u9009\u4e00\u4e2a\u4f60\u559c\u6b22\u7684 IDE\uff0cCoqIde \u6216
    Proof General \u90fd\u53ef\u4ee5\u3002\u7136\u540e\u4ece\u672c\u4e66\u9644\u5e26\u7684 Coq \u6e90\u7801\u4e2d\u8f7d\u5165 [Basics.v]
    \u6587\u4ef6\uff0c\u627e\u5230\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u63d0\u4ea4\u7ed9 Coq\uff0c\u7136\u540e\u67e5\u770b\u7ed3\u679c\u3002\uff09 *)

(** \u7b2c\u4e8c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06_'\u671f\u671b'_\u7684\u7ed3\u679c\u5199\u6210 Coq \u7684\u793a\u4f8b\uff1a *)

Example test_next_weekday:
  (next_weekday (next_weekday saturday)) = tuesday.

(** \u8be5\u58f0\u660e\u505a\u4e86\u4e24\u4ef6\u4e8b\uff1a\u9996\u5148\u5b83\u65ad\u8a00 [saturday] \u4e4b\u540e\u7684\u7b2c\u4e8c\u4e2a\u5de5\u4f5c\u65e5\u662f
    [tuesday]\uff1b\u7136\u540e\u5b83\u4e3a\u8be5\u65ad\u8a00\u53d6\u4e86\u540d\u5b57\u4ee5\u4fbf\u4e4b\u540e\u5f15\u7528\u5b83\u3002
    \u5b9a\u4e49\u597d\u65ad\u8a00\u540e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8ba9 Coq \u6765\u9a8c\u8bc1\u5b83\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a *)

Proof. simpl. reflexivity.  Qed.

(** \u5177\u4f53\u7ec6\u8282\u76ee\u524d\u5e76\u4e0d\u91cd\u8981\uff0c\u4e0d\u8fc7\u8fd9\u6bb5\u4ee3\u7801\u57fa\u672c\u4e0a\u53ef\u4ee5\u8bfb\u4f5c
    \u201c\u82e5\u7b49\u5f0f\u4e24\u8fb9\u7684\u6c42\u503c\u7ed3\u679c\u76f8\u540c\uff0c\u8be5\u65ad\u8a00\u5373\u53ef\u5f97\u8bc1\u3002\u201d

    \u7b2c\u4e09\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9 Coq \u4ece [Definition] \u4e2d_'\u63d0\u53d6\uff08Extract\uff09'_
    \u51fa\u7528\u5176\u5b83\u66f4\u52a0\u5e38\u89c4\u7684\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f
    \uff08\u5982 OCaml\u3001Scheme\u3001Haskell \u7b49\uff09\uff0c\u5b83\u4eec\u62e5\u6709\u9ad8\u6027\u80fd\u7684\u7f16\u8bd1\u5668\u3002
    \u8fd9\u79cd\u80fd\u529b\u975e\u5e38\u6709\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b83\u5c06 Gallina \u7f16\u5199\u7684 _'\u8bc1\u660e\u6b63\u786e'_
    \u7684\u7b97\u6cd5\u8f6c\u8bd1\u6210\u9ad8\u6548\u7684\u673a\u5668\u7801\u3002\uff08\u8bda\u7136\uff0c\u6211\u4eec\u5fc5\u987b\u4fe1\u4efb OCaml/Haskell/Scheme
    \u7684\u7f16\u8bd1\u5668\uff0c\u4ee5\u53ca Coq \u63d0\u53d6\u5de5\u5177\u81ea\u8eab\u7684\u6b63\u786e\u6027\uff0c\u7136\u800c\u6bd4\u8d77\u73b0\u5728\u5927\u591a\u6570\u8f6f\u4ef6\u7684\u5f00\u53d1\u65b9\u5f0f\uff0c
    \u8fd9\u4e5f\u662f\u5f88\u5927\u7684\u8fdb\u6b65\u4e86\u3002\uff09\u5b9e\u9645\u4e0a\uff0c\u8fd9\u5c31\u662f Coq \u6700\u4e3b\u8981\u7684\u4f7f\u7528\u65b9\u5f0f\u4e4b\u4e00\u3002
    \u5728\u4e4b\u540e\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u4f1a\u56de\u5230\u8fd9\u4e00\u4e3b\u9898\u4e0a\u6765\u3002 *)

(* ================================================================= *)
(** ** \u4f5c\u4e1a\u63d0\u4ea4\u6307\u5357 *)

(** \u5982\u679c\u4f60\u5728\u8bfe\u5802\u4e2d\u4f7f\u7528\u300a\u8f6f\u4ef6\u57fa\u7840\u300b\uff0c\u4f60\u7684\u8bb2\u5e08\u53ef\u80fd\u4f1a\u7528\u81ea\u52a8\u5316\u811a\u672c\u6765\u4e3a\u4f60\u7684\u4f5c\u4e1a\u8bc4\u5206\u3002
    \u4e3a\u4e86\u8ba9\u8fd9\u4e9b\u811a\u672c\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff08\u8fd9\u6837\u4f60\u624d\u80fd\u62ff\u5230\u5168\u90e8\u5b66\u5206\uff01\uff09\uff0c\u8bf7\u8ba4\u771f\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a
      - \u8bc4\u5206\u811a\u672c\u5728\u63d0\u53d6\u4f60\u63d0\u4ea4\u7684 [.v] \u6587\u4ef6\u65f6\u4f1a\u7528\u5230\u5176\u4e2d\u7684\u7279\u6b8a\u6807\u8bb0\u3002\u56e0\u6b64\u8bf7\u52ff\u4fee\u6539\u7ec3\u4e60\u7684
        \u201c\u5206\u9694\u6807\u8bb0\u201d\uff0c\u5982\u7ec3\u4e60\u7684\u6807\u9898\u3001\u540d\u79f0\u3001\u4ee5\u53ca\u672b\u5c3e\u7684 [[]] \u7b49\u7b49\u3002
      - \u4e0d\u8981\u5220\u9664\u7ec3\u4e60\u3002\u5982\u679c\u4f60\u60f3\u8981\u8df3\u8fc7\u67d0\u4e2a\u7ec3\u4e60\uff08\u4f8b\u5982\u5b83\u6807\u8bb0\u4e3a\u201c\u53ef\u9009\u201d\u6216\u4f60\u65e0\u6cd5\u89e3\u51b3\u5b83\uff09\uff0c
        \u53ef\u4ee5\u5728 [.v] \u6587\u4ef6\u4e2d\u7559\u4e0b\u90e8\u5206\u8bc1\u660e\uff0c\u8fd9\u6ca1\u5173\u7cfb\uff0c\u4e0d\u8fc7\u6b64\u65f6\u8bf7\u786e\u8ba4\u5b83\u4ee5 [Admitted]
        \u7ed3\u5c3e\uff08\u4e0d\u8981\u7528 [Abort] \u4e4b\u7c7b\u7684\u4e1c\u897f\uff09\u3002
      - \u4f60\u4e5f\u53ef\u4ee5\u5728\u89e3\u7b54\u4e2d\u4f7f\u7528\u9644\u52a0\u5b9a\u4e49\uff08\u5982\u8f85\u52a9\u51fd\u6570\uff0c\u9700\u8981\u7684\u5f15\u7406\u7b49\uff09\u3002
        \u4f60\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u5728\u7ec3\u4e60\u7684\u5934\u90e8\u548c\u4f60\u8981\u8bc1\u660e\u7684\u5b9a\u7406\u4e4b\u95f4\u3002
      - \u5982\u679c\u4f60\u4e3a\u4e86\u8bc1\u660e\u67d0\u5b9a\u7406\u800c\u9700\u8981\u5f15\u5165\u4e00\u4e2a\u989d\u5916\u5f15\u7406\uff0c\u4e14\u672a\u80fd\u8bc1\u660e\u8be5\u5f15\u7406\uff0c
        \u8bf7\u786e\u4fdd\u8be5\u5f15\u7406\u4e0e\u4f7f\u7528\u5b83\u7684\u539f\u5b9a\u7406\u90fd\u4ee5 [Admitted] \u800c\u975e [Qed] \u7ed3\u5c3e\u3002
        \u8fd9\u6837\u80fd\u4f7f\u5728\u4f60\u5229\u7528\u539f\u5b9a\u7406\u89e3\u51b3\u5176\u4ed6\u7ec3\u4e60\u65f6\u5f97\u5230\u90e8\u5206\u5206\u6570\u3002

    \u4f60\u6216\u8bb8\u6ce8\u610f\u5230\u6bcf\u4e00\u7ae0\u90fd\u9644\u5e26\u6709\u4e00\u4e2a_'\u6d4b\u8bd5\u811a\u672c'_\u6765\u81ea\u52a8\u8ba1\u7b97\u8be5\u7ae0\u8282\u5df2\u5b8c\u6210
    \u7684\u4f5c\u4e1a\u7684\u5206\u6570\u3002\u8fd9\u4e9b\u811a\u672c\u4e00\u822c\u53ea\u4f5c\u4e3a\u81ea\u52a8\u8bc4\u5206\u5de5\u5177\uff0c\u4f46\u4f60\u4e5f\u53ef\u4ee5\u7528\u5b83\u4eec\u5728\u63d0\u4ea4\u524d
    \u518d\u4e00\u6b21\u786e\u8ba4\u4f5c\u4e1a\u683c\u5f0f\u7684\u6b63\u786e\u6027\u3002
    \u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u4e2d\u8f93\u5165 "[make BasicsTest.vo]" \u6216\u4e0b\u9762\u7684\u547d\u4ee4\u6765\u8fd0\u884c\u8fd9\u4e9b
    \u6d4b\u8bd5\u811a\u672c

       coqc -Q . LF Basics.v
       coqc -Q . LF BasicsTest.v

    \u4f60\u5e76\u4e0d\u9700\u8981\u63d0\u4ea4 [BasicsTest.v] \u8fd9\u79cd\u6d4b\u8bd5\u811a\u672c\uff08\u4e5f\u4e0d\u9700\u8981\u63d0\u4ea4\u524d\u8a00 [Preface.v]\uff09\u3002

    \u5982\u679c\u4f60\u7684\u73ed\u7ea7\u4f7f\u7528 Canvas \u7cfb\u7edf\u6765\u63d0\u4ea4\u4f5c\u4e1a\u3002
      - \u5982\u679c\u4f60\u63d0\u4ea4\u4e86\u591a\u4e2a\u4e0d\u540c\u7248\u672c\u7684\u4f5c\u4e1a\uff0c\u4f60\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\u5b83\u4eec\u5728\u7cfb\u7edf\u4e2d\u6709\u7740
        \u4e0d\u540c\u7684\u540d\u5b57\u3002\u8fd9\u662f\u6b63\u5e38\u60c5\u51b5\uff0c\u53ea\u6709\u6700\u65b0\u7684\u63d0\u4ea4\u4f1a\u88ab\u8bc4\u5206\u3002
      - \u5982\u679c\u4f60\u9700\u8981\u540c\u65f6\u63d0\u4ea4\u591a\u4e2a\u6587\u4ef6\uff08\u4f8b\u5982\u4e00\u6b21\u4f5c\u4e1a\u4e2d\u5305\u542b\u591a\u4e2a\u4e0d\u540c\u7684\u7ae0\u8282\uff09\uff0c
        \u4f60\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4e00\u6b21\u6027\u5305\u542b\u6240\u6709\u6587\u4ef6\u7684\u63d0\u4ea4\u3002
       \uff08\u8bd1\u8005\u6ce8\uff1a\u5173\u4e8e\u591a\u6587\u4ef6\u63d0\u4ea4\u7ec6\u8282\u8bf7\u67e5\u770b\u82f1\u6587\u539f\u6587\u3002\uff09
        To hand in multiple files at the same time (if more than one
        chapter is assigned in the same week), you need to make a
        single submission with all the files at once using the button
        "Add another file" just above the comment box. *)

(** The [Require Export] statement on the next line tells Coq to use
    the [String] module from the standard library.  We'll use strings
    ourselves in later chapters, but we need to [Require] it here so
    that the grading scripts can use it for internal purposes. *)
From Coq Require Export String.

(* ================================================================= *)
(** ** \u5e03\u5c14\u503c *)

(** \u901a\u8fc7\u7c7b\u4f3c\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u5e03\u5c14\u503c\u5b9a\u4e49\u5e38\u89c1\u7684 [bool] \u7c7b\u578b\uff0c\u5b83\u5305\u62ec
    [true] \u548c [false] \u4e24\u4e2a\u6210\u5458\u3002 *)

Inductive bool : Type :=
  | true
  | false.

(** \u5e03\u5c14\u503c\u7684\u51fd\u6570\u53ef\u6309\u7167\u540c\u6837\u7684\u65b9\u5f0f\u6765\u5b9a\u4e49\uff1a *)

Definition negb (b:bool) : bool :=
  match b with
  | true => false
  | false => true
  end.

Definition andb (b1:bool) (b2:bool) : bool :=
  match b1 with
  | true => b2
  | false => false
  end.

Definition orb (b1:bool) (b2:bool) : bool :=
  match b1 with
  | true => true
  | false => b2
  end.

(** \uff08\u867d\u7136\u6211\u4eec\u6b63\u5c1d\u8bd5\u4ece\u96f6\u5f00\u59cb\u5b9a\u4e49\u5e03\u5c14\u7c7b\u578b\uff0c
    \u4f46\u7531\u4e8e Coq \u7684\u6807\u51c6\u5e93\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u5e03\u5c14\u7c7b\u578b\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u4ee5\u53ca\u5927\u91cf\u6709\u7528\u7684\u51fd\u6570\u548c\u5f15\u7406\u3002
    \u6211\u4eec\u4f1a\u5c3d\u91cf\u8ba9\u81ea\u5df1\u7684\u5b9a\u4e49\u548c\u5b9a\u7406\u7684\u540d\u5b57\u4e0e\u6807\u51c6\u5e93\u4fdd\u6301\u4e00\u81f4\u3002\uff09 *)

(** \u5176\u4e2d [andb] \u548c [orb] \u6f14\u793a\u4e86\u5982\u4f55\u5b9a\u4e49\u591a\u53c2\u51fd\u6570\u3002
    \u4ee5\u4e0b\u56db\u4e2a\u201c\u5355\u5143\u6d4b\u8bd5\u201d\u5219\u6f14\u793a\u4e86\u5982\u4f55\u5e94\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c
    \u5b83\u4eec\u6784\u6210\u4e86 [orb] \u51fd\u6570\u7684\u5b8c\u6574\u89c4\u8303\uff08Specification\uff09\uff0c\u5373\u771f\u503c\u8868\uff1a *)

Example test_orb1:  (orb true  false) = true.
Proof. simpl. reflexivity.  Qed.
Example test_orb2:  (orb false false) = false.
Proof. simpl. reflexivity.  Qed.
Example test_orb3:  (orb false true)  = true.
Proof. simpl. reflexivity.  Qed.
Example test_orb4:  (orb true  true)  = true.
Proof. simpl. reflexivity.  Qed.

(** \u6211\u4eec\u4e5f\u53ef\u4ee5\u4e3a\u521a\u5b9a\u4e49\u7684\u5e03\u5c14\u8fd0\u7b97\u5f15\u5165\u66f4\u52a0\u719f\u6089\u7684\u4e2d\u7f00\u8bed\u6cd5\u3002
    [Notation] \u6307\u4ee4\u80fd\u4e3a\u65e2\u6709\u7684\u5b9a\u4e49\u8d4b\u4e88\u65b0\u7684\u7b26\u53f7\u8bb0\u6cd5\u3002 *)

Notation "x && y" := (andb x y).
Notation "x || y" := (orb x y).

Example test_orb5:  false || false || true = true.
Proof. simpl. reflexivity. Qed.

(** _'\u5173\u4e8e\u8bb0\u6cd5\u7684\u8bf4\u660e'_\uff1a\u5728 [.v] \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u7528\u65b9\u62ec\u53f7\u6765\u754c\u5b9a\u6ce8\u91ca\u4e2d\u7684
    Coq \u4ee3\u7801\u7247\u6bb5\uff1b\u8fd9\u79cd\u7ea6\u5b9a\u4e5f\u5728 [coqdoc] \u6587\u6863\u5de5\u5177\u4e2d\u4f7f\u7528\uff0c
    \u5b83\u80fd\u8ba9\u4ee3\u7801\u4e0e\u5468\u56f4\u7684\u6587\u672c\u4ece\u89c6\u89c9\u4e0a\u533a\u5206\u5f00\u6765\u3002
    \u5728 HTML \u7248\u7684\u6587\u4ef6\u4e2d\uff0c\u8fd9\u90e8\u5206\u6587\u672c\u4f1a\u4ee5_'\u4e0d\u540c\u7684\u5b57\u4f53'_\u663e\u793a\u3002 *)

(** \u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86 Coq \u7684\u53e6\u4e00\u4e2a\u7279\u6027: \u6761\u4ef6\u8868\u8fbe\u5f0f... *)

Definition negb' (b:bool) : bool :=
  if b then false
  else true.

Definition andb' (b1:bool) (b2:bool) : bool :=
  if b1 then b2
  else false.

Definition orb' (b1:bool) (b2:bool) : bool :=
  if b1 then true
  else b2.

(** Coq \u7684\u6761\u4ef6\u8868\u8fbe\u5f0f\u76f8\u8f83\u4e8e\u5176\u4ed6\u8bed\u8a00\u7684\uff0c\u53ea\u6709\u4e00\u70b9\u5c0f\u5c0f\u7684\u6269\u5c55\u3002\u7531\u4e8e [bool] \u7c7b\u578b
    \u5e76\u4e0d\u662f\u5185\u5efa\u7c7b\u578b\uff0cCoq \u5b9e\u9645\u4e0a\u652f\u6301\u5bf9_\u4efb\u4f55_\u5f52\u7eb3\u5b9a\u4e49\u7684\u53cc\u5b50\u53e5\u8868\u8fbe\u5f0f\u4f7f\u7528 "if" \u8868\u8fbe\u5f0f
   \uff08\u4e0d\u8fc7\u6070\u5de7\u5728\u8fd9\u91cc\u8be5\u8868\u8fbe\u5f0f\u88ab\u79f0\u4e3a [bool]\uff09\u3002\u5f53\u6761\u4ef6\u6c42\u503c\u540e\u5f97\u5230\u7684\u662f\u7b2c\u4e00\u4e2a
    \u5b50\u53e5\u7684 \u201c\u6784\u9020\u5b50\u201d (constructor)\uff0c\u90a3\u4e48\u6761\u4ef6\u5c31\u4f1a\u88ab\u8ba4\u4e3a\u662f \u201c\u771f\u201d [true]\uff08\u4e0d\u8fc7\u6070\u5de7
    \u5728\u8fd9\u91cc\u7b2c\u4e00\u4e2a\u5206\u652f\u7684\u6784\u9020\u5b50\u88ab\u79f0\u4e3a \u201c\u771f\u201d [true]\uff0c\u5e76\u4e14\u5982\u679c\u6c42\u503c\u540e\u5f97\u5230\u7684\u662f\u7b2c\u4e8c\u4e2a\u5b50\u53e5\uff0c
    \u90a3\u4e48\u6761\u4ef6\u5c31\u88ab\u8ba4\u4e3a\u662f \u201c\u5047\u201d [false]\uff09\u3002 *)
    

(** **** \u7ec3\u4e60\uff1a1 \u661f, standard (nandb) 

    \u6307\u4ee4 [Admitted] \u88ab\u7528\u4f5c\u4e0d\u5b8c\u6574\u8bc1\u660e\u7684\u5360\u4f4d\u7b26\u3002
    \u6211\u4eec\u4f1a\u5728\u7ec3\u4e60\u4e2d\u7528\u5b83\u6765\u8868\u793a\u4f60\u9700\u8981\u5b8c\u6210\u7684\u90e8\u5206\u3002\u4f60\u7684\u4efb\u52a1\u5c31\u662f\u5c06 [Admitted]
    \u66ff\u6362\u4e3a\u5177\u4f53\u7684\u8bc1\u660e\u3002

    \u79fb\u9664\u201c[Admitted.]\u201d\u5e76\u8865\u5b8c\u4ee5\u4e0b\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u7136\u540e\u786e\u4fdd\u4e0b\u5217\u6bcf\u4e00\u4e2a [Example]
    \u4e2d\u7684\u65ad\u8a00\u90fd\u80fd\u88ab Coq \u9a8c\u8bc1\u901a\u8fc7\u3002\uff08\u5373\u4eff\u7167\u4e0a\u6587 [orb] \u6d4b\u8bd5\u7684\u683c\u5f0f\u8865\u5145\u8bc1\u660e\uff0c
    \u5e76\u786e\u4fdd Coq \u63a5\u53d7\u5b83\u3002\uff09\u6b64\u51fd\u6570\u5e94\u5728\u4e24\u4e2a\u8f93\u5165\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\uff08\u6216\u8005\u90fd\uff09\u5305\u542b
    [false] \u65f6\u8fd4\u56de [true] \u3002 
    \u63d0\u793a\uff1a\u5982\u679c [simpl] \u5728\u4f60\u7684\u8bc1\u660e\u4e2d\u672a\u80fd\u5316\u7b80\u76ee\u6807\uff0c\u90a3\u662f\u56e0\u4e3a\u4f60\u53ef\u80fd\u5e76\u672a\u4f7f\u7528
    [match] \u8868\u8fbe\u5f0f\u5b9a\u4e49\u4f60\u7684 [nandb]\u3002\u5c1d\u8bd5\u4f7f\u7528\u53e6\u4e00\u79cd [nandb] \u7684\u5b9a\u4e49\u65b9\u5f0f\uff0c
    \u6216\u8005\u76f4\u63a5\u8df3\u8fc7 [simpl] \u76f4\u63a5\u4f7f\u7528 [reflexivity]\u3002\u6211\u4eec\u540e\u9762\u4f1a\u89e3\u91ca\u4e3a\u4ec0\u4e48
    \u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002 *)

Definition nandb (b1:bool) (b2:bool) : bool :=
  if b1 then 
    if b2 then false
    else true
  else true.


Example test_nandb1:               (nandb true false) = true.
Proof. simpl. reflexivity. Qed.
Example test_nandb2:               (nandb false false) = true.
Proof. simpl. reflexivity. Qed.
Example test_nandb3:               (nandb false true) = true.
Proof. simpl. reflexivity. Qed.
Example test_nandb4:               (nandb true true) = false.
Proof. simpl. reflexivity. Qed.
(** [] *)

(** **** \u7ec3\u4e60\uff1a1 \u661f, standard (andb3) 

    \u4e0e\u6b64\u524d\u76f8\u540c\uff0c\u5b8c\u6210\u4e0b\u9762\u7684 [andb3] \u51fd\u6570\u3002
    \u6b64\u51fd\u6570\u5e94\u5728\u6240\u6709\u8f93\u5165\u5747\u4e3a [true] \u65f6\u8fd4\u56de [true]\uff0c\u5426\u5219\u8fd4\u56de [false]\u3002 *)

Definition andb3 (b1:bool) (b2:bool) (b3:bool) : bool :=
  if b1 then
     if b2 then
        if b3 then true
        else false
     else false
  else false.

Example test_andb31:                 (andb3 true true true) = true.
Proof. simpl. reflexivity. Qed.
Example test_andb32:                 (andb3 false true true) = false.
Proof. simpl. reflexivity. Qed.
Example test_andb33:                 (andb3 true false true) = false.
Proof. simpl. reflexivity. Qed.
Example test_andb34:                 (andb3 true true false) = false.
Proof. simpl. reflexivity. Qed.
(** [] *)

(* ================================================================= *)
(** ** \u7c7b\u578b *)

(** Coq \u4e2d\u7684\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u90fd\u6709\u7c7b\u578b\uff0c\u5b83\u63cf\u8ff0\u4e86\u8be5\u8868\u8fbe\u5f0f\u6240\u8ba1\u7b97\u7684\u4e1c\u897f\u7684\u7c7b\u522b\u3002
    [Check] \u6307\u4ee4\u4f1a\u8ba9 Coq \u663e\u793a\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u3002 *)

Check true.
(* ===> true : bool *)

(** \u5982\u679c\u5728\u88ab [Check] \u7684\u8868\u8fbe\u5f0f\u540e\u52a0\u4e0a\u4e00\u4e2a\u5206\u53f7\u548c\u4f60\u60f3\u9a8c\u8bc1\u7684\u7c7b\u578b\uff0c\u90a3\u4e48 Coq \u4f1a
    \u9a8c\u8bc1\u8be5\u8868\u8fbe\u5f0f\u662f\u5426\u5c5e\u4e8e\u4f60\u63d0\u4f9b\u7684\u7c7b\u578b\u3002\u5f53\u4e24\u8005\u4e0d\u4e00\u81f4\u65f6\uff0cCoq \u4f1a\u62a5\u9519\u5e76\u7ec8\u6b62\u6267\u884c\u3002 *)

Check true
    : bool.
Check (negb true)
    : bool.

(** \u50cf [negb] \u8fd9\u6837\u7684\u51fd\u6570\u672c\u8eab\u4e5f\u662f\u6570\u636e\u503c\uff0c\u5c31\u50cf [true] \u548c [false] \u4e00\u6837\u3002
    \u5b83\u4eec\u7684\u7c7b\u578b\u88ab\u79f0\u4e3a_'\u51fd\u6570\u7c7b\u578b'_\uff0c\u7528\u5e26\u7bad\u5934\u7684\u7c7b\u578b\u8868\u793a\u3002 *)

Check negb
    : bool -> bool.

(** [negb] \u7684\u7c7b\u578b\u5199\u4f5c [bool -> bool]\uff0c\u8bfb\u505a\u201c[bool] \u7bad\u5934 [bool]\u201d\uff0c
    \u53ef\u4ee5\u7406\u89e3\u4e3a\u201c\u7ed9\u5b9a\u4e00\u4e2a [bool] \u7c7b\u578b\u7684\u8f93\u5165\uff0c\u8be5\u51fd\u6570\u4ea7\u751f\u4e00\u4e2a [bool] \u7c7b\u578b\u7684\u8f93\u51fa\u3002\u201d
    \u540c\u6837\uff0c[andb] \u7684\u7c7b\u578b\u5199\u4f5c [bool -> bool -> bool]\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a
    \u201c\u7ed9\u5b9a\u4e24\u4e2a [bool] \u7c7b\u578b\u7684\u8f93\u5165\uff0c\u8be5\u51fd\u6570\u4ea7\u751f\u4e00\u4e2a [bool] \u7c7b\u578b\u7684\u8f93\u51fa\u3002\u201d *)

(* ================================================================= *)
(** ** \u7531\u65e7\u7c7b\u578b\u6784\u9020\u65b0\u7c7b\u578b *)

(** \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5b9a\u4e49\u7684\u7c7b\u578b\u90fd\u662f\u201c\u679a\u4e3e\u7c7b\u578b\u201d\uff1a\u5b83\u4eec\u7684\u5b9a\u4e49\u663e\u5f0f\u5730\u679a\u4e3e\u4e86
    \u4e00\u4e2a\u5143\u7d20\u7684\u6709\u9650\u96c6\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u53ea\u662f\u4e00\u4e2a\u88f8\u6784\u9020\u5b50\uff08\u8bd1\u6ce8\uff1a\u5373\u65e0\u53c2\u6570\u6784\u9020\u5b50\uff09\u3002
    \u4e0b\u9762\u662f\u4e00\u4e2a\u66f4\u52a0\u6709\u8da3\u7684\u7c7b\u578b\u5b9a\u4e49\uff0c\u5176\u4e2d\u6709\u4e2a\u6784\u9020\u5b50\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff1a *)

Inductive rgb : Type :=
  | red
  | green
  | blue.

Inductive color : Type :=
  | black
  | white
  | primary (p : rgb).

(** \u50cf [red]\u3001[green]\u3001[blue]\u3001[black]\u3001[white] \u4ee5\u53ca [primary]\uff08\u8fd8\u6709
    [true]\u3001[false]\u3001[monday] \u7b49\uff09\u8fd9\u6837\u7684\u539f\u5b50\u6807\u8bc6\u7b26\u53eb\u505a_'\u6784\u9020\u5b50\uff08Constructor\uff09'_\u3002

    \u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u4eec\u6765\u6784\u5efa_'\u6784\u9020\u5b50\u8868\u8fbe\u5f0f\uff08Constructor Expression\uff09'_\uff0c
    \u5176\u4e2d\u6bcf\u4e00\u4e2a\u8981\u4e48\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6784\u9020\u5b50\uff0c\u8981\u4e48\u5c31\u662f\u4e00\u4e2a\u6784\u9020\u5b50\u5e94\u7528\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u53c2\u6570
    \uff08\u6bcf\u4e2a\u8fd9\u6837\u7684\u53c2\u6570\u4e5f\u90fd\u662f\u6784\u9020\u5b50\u8868\u8fbe\u5f0f\uff09\u3002 *)

(** \u6211\u4eec\u6765\u4ed4\u7ec6\u7814\u7a76\u4e00\u4e0b\u3002\u6bcf\u4e2a\u5f52\u7eb3\u5b9a\u4e49\u7684\u7c7b\u578b\uff08\u5982 [day]\u3001[bool]\u3001[rgb]\u3001[color] \u7b49\uff09
    \u90fd\u63cf\u8ff0\u4e86\u4e00\u7ec4\u7531_'\u6784\u9020\u5b50'_\u6784\u6210\u7684_'\u6784\u9020\u5b50\u8868\u8fbe\u5f0f'_\u3002

    - \u6211\u4eec\u4ece\u6709\u9650\u7684\u4e00\u7ec4_'\u6784\u9020\u5b50'_\u5f00\u59cb\u3002\u4f8b\u5982
      [red]\u3001[primary]\u3001[true]\u3001[false]\u3001[monday]
      \u7b49\u7b49\u90fd\u662f\u6784\u9020\u5b50\u3002

    - _'\u6784\u9020\u5b50\u8868\u8fbe\u5f0f'_\u901a\u8fc7\u5c06\u6784\u9020\u5b50\u5e94\u7528\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u6784\u9020\u5b50\u8868\u8fbe\u5f0f\u4e0a\u6784\u6210\u3002\u4f8b\u5982
         [red]\u3001[true]\u3001[primary]\u3001[primary red]\u3001[red primary]\u3001[red true]\u3001
         [primary (primary primary)] \u7b49\u7b49

    - \u6bcf\u4e2a [Inductive] \u5b9a\u4e49\u90fd\u523b\u753b\u4e86\u4e00\u4e2a\u6784\u9020\u5b50\u8868\u8fbe\u5f0f\u7684\u5b50\u96c6\u5e76\u8d4b\u4e88\u4e86\u5b83\u4eec\u540d\u5b57\uff0c\u5982
      [bool]\u3001[rgb] \u6216 [color]\u3002
*)

(** \u5177\u4f53\u6765\u8bf4\uff0c[rgb] \u548c [color] \u7684\u5b9a\u4e49\u63cf\u8ff0\u4e86\u5982\u4f55\u6784\u9020\u8fd9\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u6784\u9020\u5b50\u8868\u8fbe\u5f0f\uff1a

    - \u6784\u9020\u5b50\u8868\u8fbe\u5f0f [red]\u3001[green] \u548c [blue] \u5c5e\u4e8e\u96c6\u5408 [rgb]\uff1b
    - \u6784\u9020\u5b50\u8868\u8fbe\u5f0f [black] \u548c [white] \u5c5e\u4e8e\u96c6\u5408 [color]\uff1b
    - \u82e5 [p] \u662f\u5c5e\u4e8e [rgb] \u7684\u6784\u9020\u5b50\u8868\u8fbe\u5f0f\uff0c\u5219 [primary p]\uff08\u8bfb\u4f5c\u201c\u6784\u9020\u5b50 [primary]
      \u5e94\u7528\u4e8e\u53c2\u6570 [p]\uff09\u662f\u5c5e\u4e8e\u96c6\u5408 [color] \u7684\u6784\u9020\u5b50\u8868\u8fbe\u5f0f\uff1b\u4e14
    - \u901a\u8fc7\u8fd9\u4e9b\u65b9\u5f0f\u6784\u9020\u7684\u6784\u9020\u5b50\u8868\u8fbe\u5f0f_'\u53ea\u5c5e\u4e8e'_\u96c6\u5408 [rgb] \u548c [color]\u3002 *)

(** \u6211\u4eec\u53ef\u4ee5\u50cf\u4e4b\u524d\u7684 [day] \u548c [bool] \u90a3\u6837\u7528\u6a21\u5f0f\u5339\u914d\u4e3a [color] \u5b9a\u4e49\u51fd\u6570\u3002 *)

Definition monochrome (c : color) : bool :=
  match c with
  | black => true
  | white => true
  | primary p => false
  end.

(** \u9274\u4e8e [primary] \u6784\u9020\u5b50\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u5339\u914d\u5230 [primary] \u7684\u6a21\u5f0f\u5e94\u5f53\u5e26\u6709\u4e00\u4e2a
    \u53d8\u91cf\u6216\u5e38\u91cf\u3002\u53d8\u91cf\u53ef\u4ee5\u53d6\u4efb\u610f\u540d\u79f0\uff0c\u5982\u4e0a\u6587\u6240\u793a\uff1b\u5e38\u91cf\u9700\u6709\u9002\u5f53\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a *)

Definition isred (c : color) : bool :=
  match c with
  | black => false
  | white => false
  | primary red => true
  | primary _ => false
  end.

(** \u8fd9\u91cc\u7684\u6a21\u5f0f [primary _] \u662f\u201c\u6784\u9020\u5b50 [primary] \u5e94\u7528\u5230\u9664 [red]
    \u4e4b\u5916\u7684\u4efb\u4f55 [rgb] \u6784\u9020\u5b50\u4e0a\u201d\u7684\u7b80\u5199\u5f62\u5f0f\uff08\u901a\u914d\u6a21\u5f0f [_] \u7684\u6548\u679c\u4e0e
    [monochrome] \u5b9a\u4e49\u4e2d\u7684\u54d1\uff08dummy\uff09\u6a21\u5f0f\u53d8\u91cf [p] \u76f8\u540c\u3002\uff09 *)

(* ================================================================= *)
(** ** \u5143\u7ec4 *)

(** \u4e00\u4e2a\u591a\u53c2\u6570\u7684\u5355\u6784\u9020\u5b50\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u5143\u7ec4\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u8ba9\u4e00\u4e2a
    \u534a\u5b57\u8282\uff08nybble\uff09\u8868\u793a\u56db\u4e2a\u6bd4\u7279\u3002\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a [bit] \u6570\u636e\u7c7b\u578b
    \u6765\u7c7b\u6bd4 [bool] \u6570\u636e\u3002\u5e76\u4e14\u4f7f\u7528 [B0] \u548c [B1] \u4e24\u79cd\u6784\u9020\u5b50\u6765\u8868\u793a\u5176\u53ef\u80fd\u7684\u53d6\u503c\u3002
    \u6700\u540e\u5b9a\u4e49 [nybble] \u8fd9\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u56db\u6bd4\u7279\u7684\u5143\u7ec4\u3002*)

Inductive bit : Type :=
  | B0
  | B1.

Inductive nybble : Type :=
  | bits (b0 b1 b2 b3 : bit).

Check (bits B1 B0 B1 B0)
    : nybble.

(** \u8fd9\u91cc\u7684 [bit] \u6784\u9020\u5b50\u8d77\u5230\u4e86\u5bf9\u5b83\u5185\u5bb9\u7684\u5305\u88c5\u4f5c\u7528\u3002
    \u89e3\u5305\u53ef\u4ee5\u901a\u8fc7\u6a21\u5f0f\u5339\u914d\u6765\u5b9e\u73b0\uff0c\u5c31\u5982\u540c\u4e0b\u9762\u7684 [all_zero] \u51fd\u6570\u4e00\u6837\uff0c
    \u5176\u901a\u8fc7\u89e3\u5305\u6765\u9a8c\u8bc1\u4e00\u4e2a\u534a\u5b57\u8282\u7684\u6240\u6709\u6bd4\u7279\u662f\u5426\u90fd\u4e3a [B0]\u3002
    \u6211\u4eec\u7528_'\u901a\u914d\u7b26'_ [_] \u6765\u907f\u514d\u521b\u5efa\u4e0d\u9700\u8981\u7684\u53d8\u91cf\u540d\u3002 *)

Definition all_zero (nb : nybble) : bool :=
  match nb with
    | (bits B0 B0 B0 B0) => true
    | (bits _ _ _ _) => false
  end.

Compute (all_zero (bits B1 B0 B1 B0)).
(* ===> false : bool *)
Compute (all_zero (bits B0 B0 B0 B0)).
(* ===> true : bool *)

(* ================================================================= *)
(** ** \u6a21\u5757 *)

(** Coq \u63d0\u4f9b\u4e86_'\u6a21\u5757\u7cfb\u7edf'_\u6765\u5e2e\u52a9\u7ec4\u7ec7\u5927\u89c4\u6a21\u7684\u5f00\u53d1\u3002\u5728\u672c\u8bfe\u7a0b\u4e2d\uff0c
    \u6211\u4eec\u4e0d\u592a\u4f1a\u7528\u5230\u8fd9\u65b9\u9762\u7684\u7279\u6027\u3002\u4e0d\u8fc7\u5176\u4e2d\u6709\u4e00\u70b9\u975e\u5e38\u6709\u7528\uff1a
    \u5982\u679c\u6211\u4eec\u5c06\u4e00\u7ec4\u5b9a\u4e49\u653e\u5728 [Module X] \u548c [End X] \u6807\u8bb0\u4e4b\u95f4\uff0c\u90a3\u4e48\u5728\u6587\u4ef6\u4e2d\u7684
    [End] \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u50cf [X.foo] \u8fd9\u6837\u7684\u540d\u5b57\u6765\u5f15\u7528\uff0c\u800c\u4e0d\u5fc5\u76f4\u63a5\u7528
    [foo] \u4e86\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u6b64\u7279\u6027\u5728\u5185\u90e8\u6a21\u5757\u4e2d\u5f15\u5165\u4e86 [nat] \u7c7b\u578b\u7684\u5b9a\u4e49\uff0c
    \u8fd9\u6837\u5c31\u4e0d\u4f1a\u8986\u76d6\u6807\u51c6\u5e93\u4e2d\u7684\u540c\u540d\u5b9a\u4e49\u4e86\uff08\u6211\u4eec\u4f1a\u5728\u672c\u4e66\u540e\u9762\u7684\u90e8\u5206\u4e2d\u4f7f\u7528\u5b83\uff0c
    \u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7b80\u4fbf\u7684\u7279\u6b8a\u8bb0\u6cd5\u3002\uff09*)

Module NatPlayground.

(* ================================================================= *)
(** ** \u6570\u503c *)

(** \u76ee\u524d\u6211\u4eec\u5b9a\u4e49\u7684\u6240\u6709\u7c7b\u578b\u90fd\u662f\u6709\u9650\u7684\u3002\u65e0\u8bba\u662f\u50cf [day], [bool] \u548c [bit] 
    \u8fd9\u6837\u7684\u201c\u679a\u4e3e\u7c7b\u578b\u201d\uff0c\u6291\u6216\u662f\u50cf [nybble] \u8fd9\u6837\u57fa\u4e8e\u201c\u679a\u4e3e\u7c7b\u578b\u201d\u7684\u5143\u7ec4\u7c7b\u578b\uff0c
    \u672c\u8d28\u4e0a\u90fd\u662f\u6709\u9650\u7684\u96c6\u5408\u3002\u800c\u81ea\u7136\u6570\uff08natural numbers\uff09\u662f\u4e00\u4e2a\u65e0\u9650\u96c6\u5408\uff0c
    \u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u79cd\u66f4\u5f3a\u5927\u7684\u7c7b\u578b\u58f0\u660e\u65b9\u5f0f\u6765\u8868\u793a\u5b83\u4eec\u3002

    \u6570\u5b57\u7684\u8868\u793a\u65b9\u6cd5\u6709\u8bb8\u591a\u79cd\u3002\u6211\u4eec\u6700\u4e3a\u719f\u6089\u7684\u4fbf\u662f\u5341\u8fdb\u5236\uff08base 10\uff09\uff0c\u5229\u7528
    0\uff5e9 \u5341\u4e2a\u6570\u5b57\u6765\u8868\u793a\u4e00\u4e2a\u6570\uff0c\u4f8b\u5982\u7528 1\uff0c2 \u548c 3 \u6765\u8868\u793a 123 \uff08\u4e00\u767e\u4e8c\u5341\u4e09\uff09\u3002
    \u4f60\u6216\u8bb8\u4e5f\u63a5\u89e6\u8fc7\u5341\u516d\u8fdb\u5236\uff08base 16\uff09\uff0c\u5728\u5341\u516d\u8fdb\u5236\u4e2d\uff0c\u5b83\u88ab\u8868\u793a\u4e3a 7B\u3002\u7c7b\u4f3c\u7684\u8fd8\u6709
    173 \uff08\u516b\u8fdb\u5236\u8868\u793a\uff09\u548c 111011\uff08\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u679a\u4e3e\u7c7b\u578b
    \u6765\u5b9a\u4e49\u4ee5\u4e0a\u4efb\u4f55\u4e00\u79cd\u6570\u5b57\u8868\u793a\u65b9\u5f0f\u3002\u5b83\u4eec\u5728\u4e0d\u540c\u7684\u573a\u666f\u4e0b\u6709\u7740\u4e0d\u540c\u7684\u7528\u9014\u3002

    \u4e8c\u8fdb\u5236\u8868\u793a\u5728\u8ba1\u7b97\u673a\u786c\u4ef6\u4e2d\u8d77\u7740\u4e3e\u8db3\u8f7b\u91cd\u7684\u4f5c\u7528\u3002\u5b83\u53ea\u9700\u8981\u4e24\u79cd\u4e0d\u540c\u7684\u7535\u5e73
    \u6765\u8868\u793a\uff0c\u56e0\u6b64\u5b83\u7684\u786c\u4ef6\u7535\u8def\u53ef\u4ee5\u88ab\u8bbe\u8ba1\u5341\u5206\u7b80\u5355\u3002\u540c\u6837\u7684\uff0c
    \u6211\u4eec\u4e5f\u5e0c\u671b\u9009\u62e9\u4e00\u79cd\u81ea\u7136\u6570\u7684\u8868\u793a\u65b9\u5f0f\uff0c\u6765\u8ba9\u6211\u4eec\u7684_\u8bc1\u660e_\u53d8\u5f97\u66f4\u52a0\u7b80\u5355\u3002

    \u5b9e\u9645\u4e0a\uff0c\u6bd4\u8d77\u4e8c\u8fdb\u5236\uff0c\u8fd8\u6709\u4e00\u79cd\u66f4\u52a0\u7b80\u5355\u7684\u6570\u5b57\u8868\u793a\u65b9\u5f0f\uff0c\u4e00\u8fdb\u5236\uff08base 1\uff09\uff0c
    \u4e5f\u5c31\u662f\u53ea\u4f7f\u7528\u5355\u4e2a\u6570\u5b57\u7684\u8868\u793a\u65b9\u5f0f\uff08\u5c31\u5982\u540c\u6211\u4eec\u7684\u7956\u5148\u5c71\u9876\u6d1e\u4eba\u5728\u6d1e\u7a74\u4e0a
    \u523b\u201c\u75d5\u8ff9\u201d\u8ba1\u7b97\u65e5\u5b50\u4e00\u822c\uff09\u3002\u4e3a\u4e86\u5728 Coq \u4e2d\u8868\u793a\u4e00\u8fdb\u5236\u6570\uff0c\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u6784\u9020\u5b50\u3002
    \u5927\u5199\u7684 [O] \u6784\u9020\u5b50\u7528\u6765\u8868\u793a\u201c\u96f6\u201d\uff0c\u800c\u5927\u5199\u7684 [S] \u6784\u9020\u5b50\u7528\u6765\u8868\u793a\u201c\u540e\u7ee7\u201d
    \uff08\u6216\u8005\u6d1e\u7a74\u4e0a\u7684\u201c\u75d5\u8ff9\u201d\uff09\u3002\u5f53 [S] \u6784\u9020\u5b50\u88ab\u5e94\u7528\u4e8e\u4e00\u4e2a\u81ea\u7136\u6570 n \u7684\u8868\u793a\u4e0a\u65f6\uff0c
    \u7ed3\u679c\u4f1a\u662f\u81ea\u7136\u6570 n + 1 \u7684\u8868\u793a\u3002\u4e0b\u9762\u662f\u5b8c\u6574\u7684\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\u3002 *)
    

Inductive nat : Type :=
  | O
  | S (n : nat).

(** \u5728\u8fd9\u79cd\u5b9a\u4e49\u4e0b\uff0c 0 \u88ab\u8868\u793a\u4e3a [O], 1 \u5219\u88ab\u8868\u793a\u4e3a [S O],
    2 \u5219\u662f [S (S O)]\uff0c\u4ee5\u6b64\u7c7b\u63a8 *)

(** \u975e\u5f62\u5f0f\u5316\u5730\u8bf4\uff0c\u6b64\u5b9a\u4e49\u4e2d\u7684\u5b50\u53e5\u53ef\u8bfb\u4f5c\uff1a
      - [O] \u662f\u4e00\u4e2a\u81ea\u7136\u6570\uff08\u6ce8\u610f\u8fd9\u91cc\u662f\u5b57\u6bcd\u201c[O]\u201d\uff0c\u4e0d\u662f\u6570\u5b57\u201c[0]\u201d\uff09\u3002
      - [S] \u53ef\u88ab\u653e\u5728\u4e00\u4e2a\u81ea\u7136\u6570\u4e4b\u524d\u6765\u4ea7\u751f\u53e6\u4e00\u4e2a\u81ea\u7136\u6570 \u2014\u2014
        \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c [n] \u662f\u4e00\u4e2a\u81ea\u7136\u6570\uff0c\u90a3\u4e48 [S n] \u4e5f\u662f\u3002 *)

(** \u540c\u6837\uff0c\u6211\u4eec\u6765\u4ed4\u7ec6\u89c2\u5bdf\u8fd9\u4e2a\u5b9a\u4e49\u3002
    [nat] \u7684\u5b9a\u4e49\u63cf\u8ff0\u4e86\u96c6\u5408 [nat] \u4e2d\u7684\u8868\u8fbe\u5f0f\u662f\u5982\u4f55\u6784\u9020\u7684\uff1a

    - \u6784\u9020\u5b50\u8868\u8fbe\u5f0f [O] \u5c5e\u4e8e\u96c6\u5408 [nat]\uff1b
    - \u5982\u679c [n] \u662f\u5c5e\u4e8e\u96c6\u5408 [nat] \u7684\u6784\u9020\u5b50\u8868\u8fbe\u5f0f\uff0c
      \u90a3\u4e48 [S n] \u4e5f\u662f\u5c5e\u4e8e\u96c6\u5408 [nat] \u7684\u6784\u9020\u5b50\u8868\u8fbe\u5f0f\uff1b\u5e76\u4e14
    - \u53ea\u6709\u4ee5\u8fd9\u4e24\u79cd\u4ea7\u751f\u7684\u65b9\u5f0f\u6784\u9020\u5b57\u8868\u8fbe\u5f0f\u624d\u5c5e\u4e8e\u96c6\u5408 [nat]\u3002 *)

(** \u8fd9\u4e9b\u6761\u4ef6\u7cbe\u786e\u523b\u753b\u4e86\u8fd9\u4e2a\u201c\u5f52\u7eb3\u201d [Inductive] \u58f0\u660e\u3002\u5b83\u4eec\u610f\u5473\u7740\uff0c\u6784\u9020\u5b50\u8868\u8fbe\u5f0f [O]\u3001
    [S O]\u3001[S (S O)]\u3001[S (S (S O))] \u7b49\u7b49\u90fd\u5c5e\u4e8e\u96c6\u5408 [nat]\uff0c\u800c\u5176\u5b83\u7684\u6784\u9020\u5b50\u8868\u8fbe\u5f0f\uff0c\u5982
    [true]\u3001[andb true false]\u3001[S (S false)] \u4ee5\u53ca [O (O (O S))] \u7b49\u5219\u4e0d\u5c5e\u4e8e [nat]\u3002

    \u5173\u952e\u4e4b\u5904\u5728\u4e8e\uff0c\u6211\u4eec\u76ee\u524d\u53ea\u662f\u5b9a\u4e49\u4e86\u4e00\u79cd\u6570\u5b57\u7684_'\u8868\u793a'_\u65b9\u5f0f\uff0c
    \u5373\u4e00\u79cd\u5199\u4e0b\u5b83\u4eec\u7684\u65b9\u5f0f\u3002\u540d\u79f0 [O] \u548c [S] \u662f\u4efb\u610f\u7684\uff0c\u5728\u8fd9\u4e00\u70b9\u4e0a\u5b83\u4eec\u6ca1\u6709\u7279\u6b8a\u7684\u610f\u4e49\uff0c
    \u5b83\u4eec\u53ea\u662f\u6211\u4eec\u80fd\u7528\u6765\u5199\u4e0b\u6570\u5b57\u7684\u4e24\u4e2a\u4e0d\u540c\u7684\u8bb0\u53f7\uff08\u4ee5\u53ca\u4e00\u4e2a\u8bf4\u660e\u4e86\u4efb\u4f55 [nat]
    \u90fd\u80fd\u5199\u6210\u4e00\u4e32 [S] \u540e\u8ddf\u4e00\u4e2a [O] \u7684\u89c4\u5219\uff09\u3002\u5982\u679c\u4f60\u559c\u6b22\uff0c\u5b8c\u5168\u53ef\u4ee5\u5c06\u540c\u6837\u7684\u5b9a\u4e49\u5199\u6210\uff1a *)

Inductive nat' : Type :=
  | stop
  | tick (foo : nat').

(** \u8fd9\u4e9b\u8bb0\u53f7\u7684_'\u89e3\u91ca'_\u5b8c\u5168\u53d6\u51b3\u4e8e\u6211\u4eec\u5982\u4f55\u7528\u5b83\u8fdb\u884c\u8ba1\u7b97\u3002 *)

(** \u6211\u4eec\u53ef\u4ee5\u50cf\u4e4b\u524d\u7684\u5e03\u5c14\u503c\u6216\u65e5\u671f\u90a3\u6837\uff0c
    \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5bf9\u4e0a\u8ff0\u81ea\u7136\u6570\u7684\u8868\u793a\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u3002
    \u4f8b\u5982\uff0c\u4ee5\u4e0b\u4e3a\u524d\u8d8b\u51fd\u6570\uff1a*)

Definition pred (n : nat) : nat :=
  match n with
    | O => O
    | S n' => n'
  end.

(** \u7b2c\u4e8c\u4e2a\u5206\u652f\u53ef\u4ee5\u8bfb\u4f5c\uff1a\u201c\u5982\u679c [n] \u5bf9\u4e8e\u67d0\u4e2a [n'] \u7684\u5f62\u5f0f\u4e3a [S n']\uff0c
    \u90a3\u4e48\u5c31\u8fd4\u56de [n']\u3002\u201d *)

(** \u4e0b\u9762\u7684 [End] \u6307\u4ee4\u4f1a\u5173\u95ed\u5f53\u524d\u7684\u6a21\u5757\uff0c\u6240\u4ee5 [nat] \u4f1a\u91cd\u65b0\u4ee3\u8868\u6807\u51c6\u5e93\u4e2d\u7684\u7c7b\u578b\u800c\u975e\u6211\u4eec
    \u81ea\u5df1\u5b9a\u4e49\u7684 [nat]\u3002 *)

End NatPlayground.

(** \u4e3a\u4e86\u8ba9\u81ea\u7136\u6570\u4f7f\u7528\u8d77\u6765\u66f4\u52a0\u81ea\u7136\uff0cCoq \u5185\u5efa\u4e86\u4e00\u5c0f\u90e8\u5206\u89e3\u6790\u6253\u5370\u529f\u80fd\uff1a
    \u666e\u901a\u7684\u5341\u8fdb\u5236\u6570\u53ef\u89c6\u4e3a\u201c\u4e00\u8fdb\u5236\u201d\u81ea\u7136\u6570\u7684\u53e6\u4e00\u79cd\u8bb0\u6cd5\uff0c\u4ee5\u4ee3\u66ff [S] \u4e0e [O] \u6784\u9020\u5b50\uff1b
    \u53cd\u8fc7\u6765\uff0cCoq \u4e5f\u4f1a\u9ed8\u8ba4\u5c06\u81ea\u7136\u6570\u6253\u5370\u4e3a\u5341\u8fdb\u5236\u5f62\u5f0f\uff1a *)

Check (S (S (S (S O)))).
(* ===> 4 : nat *)

Definition minustwo (n : nat) : nat :=
  match n with
    | O => O
    | S O => O
    | S (S n') => n'
  end.

Compute (minustwo 4).
(* ===> 2 : nat *)

(** \u6784\u9020\u5b50 [S] \u7684\u7c7b\u578b\u4e3a [nat -> nat]\uff0c\u4e0e [pred] \u548c [minustwo] \u4e4b\u7c7b\u7684\u51fd\u6570\u76f8\u540c\uff1a *)

Check S        : nat->nat.
Check pred     : nat->nat.
Check minustwo : nat->nat.

(** \u4ee5\u4e0a\u4e09\u4e2a\u4e1c\u897f\u5747\u53ef\u4f5c\u7528\u4e8e\u81ea\u7136\u6570\uff0c\u5e76\u4ea7\u751f\u81ea\u7136\u6570\u7ed3\u679c\uff0c\u4f46\u7b2c\u4e00\u4e2a [S]
    \u4e0e\u540e\u4e24\u8005\u6709\u672c\u8d28\u533a\u522b\uff1a[pred] \u548c [minustwo] \u8fd9\u7c7b\u51fd\u6570\u662f\u901a\u8fc7\u7ed9\u5b9a\u7684_'\u8ba1\u7b97\u89c4\u5219'_\u5b9a\u4e49\u7684\u2014\u2014
    \u4f8b\u5982 [pred] \u7684\u5b9a\u4e49\u8868\u660e [pred 2] \u53ef\u5316\u7b80\u4e3a [1]\u2014\u2014\u4f46 [S] \u7684\u5b9a\u4e49\u4e0d\u5305\u542b\u6b64\u7c7b\u884c\u4e3a\u3002
    \u867d\u7136 [S] \u53ef\u4ee5\u4f5c\u7528\u4e8e\u53c2\u6570\u8fd9\u70b9\u4e0e\u51fd\u6570_'\u76f8\u4f3c'_\uff0c\u4f46\u5176\u4f5c\u7528\u4ec5\u9650\u4e8e\u6784\u9020\u6570\u5b57\uff0c\u800c\u5e76\u4e0d\u7528\u4e8e\u8ba1\u7b97\u3002

    \uff08\u8003\u8651\u6807\u51c6\u7684\u5341\u8fdb\u5236\u6570\uff1a\u6570\u5b57 [1] \u4e0d\u4ee3\u8868\u4efb\u4f55\u8ba1\u7b97\uff0c\u53ea\u8868\u793a\u4e00\u90e8\u5206\u6570\u636e\u3002
    \u7528 [111] \u6307\u4ee3\u6570\u5b57\u4e00\u767e\u4e00\u5341\u4e00\uff0c\u5b9e\u5219\u4f7f\u7528\u4e09\u4e2a [1] \u7b26\u53f7\u8868\u793a\u6b64\u6570\u5404\u4f4d\u3002\uff09

    \u73b0\u5728\u6211\u4eec\u6765\u4e3a\u6570\u503c\u5b9a\u4e49\u66f4\u591a\u7684\u51fd\u6570\u3002

    \u7b80\u5355\u7684\u6a21\u5f0f\u5339\u914d\u4e0d\u8db3\u4ee5\u63cf\u8ff0\u5f88\u591a\u6709\u8da3\u7684\u6570\u503c\u8fd0\u7b97\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u9012\u5f52\u5b9a\u4e49\u3002
    \u4f8b\u5982\uff1a\u7ed9\u5b9a\u81ea\u7136\u6570 [n]\uff0c\u6b32\u5224\u5b9a\u5176\u662f\u5426\u4e3a\u5076\u6570\uff0c\u5219\u9700\u9012\u5f52\u68c0\u67e5 [n-2] \u662f\u5426\u4e3a\u5076\u6570\u3002
    \u5173\u952e\u5b57 [Fixpoint] \u53ef\u7528\u4e8e\u5b9a\u4e49\u6b64\u7c7b\u51fd\u6570\u3002 *)

Fixpoint evenb (n:nat) : bool :=
  match n with
  | O        => true
  | S O      => false
  | S (S n') => evenb n'
  end.

(** \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684 [Fixpoint] \u58f0\u660e\u6765\u5b9a\u4e49 [odd] \u51fd\u6570\uff0c
    \u4e0d\u8fc7\u8fd8\u6709\u79cd\u66f4\u7b80\u5355\u65b9\u5f0f\uff1a*)

Definition oddb (n:nat) : bool :=
  negb (evenb n).

Example test_oddb1:    oddb 1 = true.
Proof. simpl. reflexivity.  Qed.
Example test_oddb2:    oddb 4 = false.
Proof. simpl. reflexivity.  Qed.

(** \uff08\u5982\u679c\u4f60\u9010\u6b65\u68c0\u67e5\u5b8c\u8fd9\u4e9b\u8bc1\u660e\uff0c\u5c31\u4f1a\u53d1\u73b0 [simpl] \u5176\u5b9e\u6ca1\u4ec0\u4e48\u4f5c\u7528
    \u2014\u2014 \u6240\u6709\u5de5\u4f5c\u90fd\u88ab [reflexivity] \u5b8c\u6210\u4e86\u3002\u6211\u4eec\u4e4b\u540e\u4f1a\u8ba8\u8bba\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u3002)

    \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u9012\u5f52\u5b9a\u4e49\u591a\u53c2\u51fd\u6570\u3002  *)

Module NatPlayground2.

Fixpoint plus (n : nat) (m : nat) : nat :=
  match n with
    | O => m
    | S n' => S (plus n' m)
  end.

(** \u4e09\u52a0\u4e8c\u7b49\u4e8e\u4e94\uff0c\u4e0d\u51fa\u610f\u6599\u3002 *)

Compute (plus 3 2).
(* ===> 5 : nat *)

(** Coq \u6240\u6267\u884c\u7684\u5316\u7b80\u6b65\u9aa4\u5982\u4e0b\u6240\u793a\uff1a *)

(*   [plus 3 2]
i.e. [plus (S (S (S O))) (S (S O))]
 ==> [S (plus (S (S O)) (S (S O)))]
      \uff08\u6839\u636e\u7b2c\u4e8c\u4e2a [match] \u5b50\u53e5\uff09
 ==> [S (S (plus (S O) (S (S O))))]
      \uff08\u6839\u636e\u7b2c\u4e8c\u4e2a [match] \u5b50\u53e5\uff09
 ==> [S (S (S (plus O (S (S O)))))]
      \uff08\u6839\u636e\u7b2c\u4e8c\u4e2a [match] \u5b50\u53e5\uff09
 ==> [S (S (S (S (S O))))]
      \uff08\u6839\u636e\u7b2c\u4e00\u4e2a [match] \u5b50\u53e5\uff09
i.e. [5]  *)

(** \u4e3a\u4e86\u4e66\u5199\u65b9\u4fbf\uff0c\u5982\u679c\u4e24\u4e2a\u6216\u66f4\u591a\u53c2\u6570\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\uff0c\u90a3\u4e48\u5b83\u4eec\u53ef\u4ee5\u5199\u5728\u4e00\u8d77\u3002
    \u5728\u4e0b\u9762\u7684\u5b9a\u4e49\u4e2d\uff0c[(n m : nat)] \u7684\u610f\u601d\u4e0e [(n : nat) (m : nat)] \u76f8\u540c\u3002 *)

Fixpoint mult (n m : nat) : nat :=
  match n with
    | O => O
    | S n' => plus m (mult n' m)
  end.

Example test_mult1: (mult 3 3) = 9.
Proof. simpl. reflexivity.  Qed.

(** \u4f60\u53ef\u4ee5\u5728\u4e24\u4e2a\u8868\u8fbe\u5f0f\u4e4b\u95f4\u6dfb\u52a0\u9017\u53f7\u6765\u540c\u65f6\u5339\u914d\u5b83\u4eec\uff1a*)

Fixpoint minus (n m:nat) : nat :=
  match n, m with
  | O   , _    => O
  | S _ , O    => n
  | S n', S m' => minus n' m'
  end.

End NatPlayground2.

Fixpoint exp (base power : nat) : nat :=
  match power with
    | O => S O
    | S p => mult base (exp base p)
  end.

(** **** \u7ec3\u4e60\uff1a1 \u661f, standard (factorial) 

    \u56de\u60f3\u4e00\u4e0b\u6807\u51c6\u7684\u9636\u4e58\u51fd\u6570\uff1a

       factorial(0)  =  1
       factorial(n)  =  n * factorial(n-1)     (if n>0)

    \u628a\u5b83\u7ffb\u8bd1\u6210 Coq \u4ee3\u7801\u3002 *)

Fixpoint factorial (n:nat) : nat :=
  match n with 
    | O => S O
    | S n' => mult n (factorial n')
  end.

Example test_factorial1:          (factorial 3) = 6.
Proof. simpl. reflexivity.  Qed.
Example test_factorial2:          (factorial 5) = (mult 10 12).
Proof. simpl. reflexivity.  Qed.
(** [] *)

(** \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u5165\u52a0\u6cd5\u3001\u4e58\u6cd5\u548c\u51cf\u6cd5\u7684_'\u8bb0\u6cd5\uff08Notation\uff09'_\u6765\u8ba9\u6570\u5b57\u8868\u8fbe\u5f0f\u66f4\u52a0\u6613\u8bfb\u3002 *)

Notation "x + y" := (plus x y)
                       (at level 50, left associativity)
                       : nat_scope.
Notation "x - y" := (minus x y)
                       (at level 50, left associativity)
                       : nat_scope.
Notation "x * y" := (mult x y)
                       (at level 40, left associativity)
                       : nat_scope.

Check ((0 + 1) + 1) : nat.

(** \uff08[level]\u3001[associativity] \u548c [nat_scope] \u6807\u8bb0\u63a7\u5236\u7740 Coq
    \u8bed\u6cd5\u5206\u6790\u5668\u5982\u4f55\u5904\u7406\u4e0a\u8ff0\u8bb0\u6cd5\u3002\u76ee\u524d\u65e0\u9700\u5173\u6ce8\u8fd9\u4e9b\u7ec6\u8282\u3002\u6709\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u53c2\u9605\u672c\u7ae0\u672b\u5c3e
    \u201c\u5173\u4e8e\u8bb0\u6cd5\u7684\u66f4\u591a\u5185\u5bb9\u201d\u4e00\u8282\u3002\uff09

    \u6ce8\u610f\uff0c\u8fd9\u4e9b\u58f0\u660e\u5e76\u4e0d\u4f1a\u6539\u53d8\u6211\u4eec\u4e4b\u524d\u7684\u5b9a\u4e49\uff0c\u800c\u53ea\u662f\u8ba9 Coq \u8bed\u6cd5\u5206\u6790\u5668\u63a5\u53d7\u7528
    [x + y] \u6765\u4ee3\u66ff [plus x y]\uff0c\u5e76\u5728 Coq \u7f8e\u5316\u8f93\u51fa\u65f6\u53cd\u8fc7\u6765\u5c06 [plus x y]
    \u663e\u793a\u4e3a [x + y]\u3002 *)

(** Coq \u51e0\u4e4e\u4e0d\u5305\u542b\u4efb\u4f55\u5185\u7f6e\u5b9a\u4e49\uff0c\u751a\u81f3\u8fde\u6570\u503c\u95f4\u7684\u76f8\u7b49\u5173\u7cfb\u90fd\u662f\u7531\u7528\u6237\u6765\u5b9e\u73b0\u3002
    [eqb] \u51fd\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a\u8be5\u51fd\u6570\u68c0\u9a8c\u81ea\u7136\u6570 [nat] \u95f4\u662f\u5426\u6ee1\u8db3\u76f8\u7b49\u5173\u7cfb [eq]\uff0c
    \u5e76\u4ee5\u5e03\u5c14\u503c [bool] \u8868\u793a\u3002\u6ce8\u610f\u8be5\u5b9a\u4e49\u4f7f\u7528\u5d4c\u5957\u5339\u914d [match]
    \uff08\u4ea6\u53ef\u4eff\u7167 [minus] \u4f7f\u7528\u5e76\u5217\u5339\u914d\uff09\u3002 *)

Fixpoint eqb (n m : nat) : bool :=
  match n with
  | O => match m with
         | O => true
         | S m' => false
         end
  | S n' => match m with
            | O => false
            | S m' => eqb n' m'
            end
  end.

(** \u7c7b\u4f3c\u5730\uff0c[leb] \u51fd\u6570\u68c0\u9a8c\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u4ee5\u5e03\u5c14\u503c\u8868\u793a\u3002 *)

Fixpoint leb (n m : nat) : bool :=
  match n with
  | O => true
  | S n' =>
      match m with
      | O => false
      | S m' => leb n' m'
      end
  end.

Example test_leb1:                leb 2 2 = true.
Proof. simpl. reflexivity.  Qed.
Example test_leb2:                leb 2 4 = true.
Proof. simpl. reflexivity.  Qed.
Example test_leb3:                leb 4 2 = false.
Proof. simpl. reflexivity.  Qed.

(** \u6211\u4eec\u4e4b\u540e\u4f1a\u7ecf\u5e38\u7528\u5230\u5b83\u4eec\uff08\u7279\u522b\u662f [eqb]\uff09\uff0c\u56e0\u6b64\u5148\u5b9a\u4e49\u597d\u5b83\u4eec\u7684\u4e2d\u7f00\u8bb0\u6cd5\uff1a *)

Notation "x =? y" := (eqb x y) (at level 70) : nat_scope.
Notation "x <=? y" := (leb x y) (at level 70) : nat_scope.

Example test_leb3': (4 <=? 2) = false.
Proof. simpl. reflexivity.  Qed.

(** **** \u7ec3\u4e60\uff1a1 \u661f, standard (ltb) 

    [ltb] \u51fd\u6570\u68c0\u9a8c\u81ea\u7136\u6570\u95f4\u7684\u5c0f\u4e8e\u5173\u7cfb\uff0c\u4ee5\u5e03\u5c14\u503c\u8868\u793a\u3002
    \u8bf7\u5229\u7528\u524d\u6587\u5b9a\u4e49\u7684\u51fd\u6570\u5199\u51fa\u8be5\u5b9a\u4e49\uff0c\u4e0d\u8981\u4f7f\u7528 [Fixpoint] \u6784\u9020\u65b0\u7684\u9012\u5f52\u3002
    \uff08\u53ea\u9700\u524d\u6587\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\u5373\u53ef\u5b9e\u73b0\u8be5\u5b9a\u4e49\uff0c\u4e0d\u8fc7\u4e5f\u53ef\u4e24\u8005\u7686\u7528\u3002\uff09 *)

Definition ltb (n m : nat) : bool :=
  match n <=? m with
    | true => match m <=? n with
                | true => false
                | false => true
              end
    | false => false
  end.

Notation "x <? y" := (ltb x y) (at level 70) : nat_scope.

Example test_ltb1:             (ltb 2 2) = false.
Proof. simpl. reflexivity.  Qed.
Example test_ltb2:             (ltb 2 4) = true.
Proof. simpl. reflexivity.  Qed.
Example test_ltb3:             (ltb 4 2) = false.
Proof. simpl. reflexivity.  Qed.
(** [] *)

(* ################################################################# *)
(** * \u57fa\u4e8e\u5316\u7b80\u7684\u8bc1\u660e *)

(** \u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5b9a\u4e49\u4e86\u4e00\u4e9b\u6570\u636e\u7c7b\u578b\u548c\u51fd\u6570\u3002\u8ba9\u6211\u4eec\u628a\u95ee\u9898\u8f6c\u5230\u5982\u4f55\u8868\u8ff0\u548c\u8bc1\u660e
    \u5b83\u4eec\u884c\u4e3a\u7684\u6027\u8d28\u4e0a\u6765\u3002\u5176\u5b9e\u6211\u4eec\u5df2\u7ecf\u5f00\u59cb\u8fd9\u6837\u505a\u4e86\uff1a\u524d\u51e0\u8282\u4e2d\u7684\u6bcf\u4e2a [Example]
    \u90fd\u5bf9\u51e0\u4e2a\u51fd\u6570\u5728\u67d0\u4e9b\u7279\u5b9a\u8f93\u5165\u4e0a\u7684\u884c\u4e3a\u505a\u51fa\u4e86\u51c6\u786e\u7684\u65ad\u8a00\u3002\u8fd9\u4e9b\u65ad\u8a00\u7684\u8bc1\u660e\u65b9\u6cd5\u90fd\u4e00\u6837\uff1a
    \u4f7f\u7528 [simpl] \u6765\u5316\u7b80\u7b49\u5f0f\u4e24\u8fb9\uff0c\u7136\u540e\u7528 [reflexivity] \u6765\u68c0\u67e5\u4e24\u8fb9\u662f\u5426\u5177\u6709\u76f8\u540c\u7684\u503c\u3002

    \u8fd9\u7c7b\u201c\u57fa\u4e8e\u5316\u7b80\u7684\u8bc1\u660e\u201d\u8fd8\u53ef\u4ee5\u7528\u6765\u8bc1\u660e\u66f4\u591a\u6709\u8da3\u7684\u6027\u8d28\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u201c[0]
    \u51fa\u73b0\u5728\u5de6\u8fb9\u65f6\u662f\u52a0\u6cd5 [+] \u7684\u2018\u5e7a\u5143\u2019\u201d\u8fd9\u4e00\u4e8b\u5b9e\uff0c\u6211\u4eec\u53ea\u9700\u8bfb\u4e00\u904d [plus] \u7684\u5b9a\u4e49\uff0c
    \u5373\u53ef\u901a\u8fc7\u89c2\u5bdf\u201c\u5bf9\u4e8e [0 + n]\uff0c\u65e0\u8bba [n] \u7684\u503c\u4e3a\u591a\u5c11\u5747\u53ef\u5316\u7b80\u4e3a [n]\u201d\u800c\u5f97\u5230\u8bc1\u660e\u3002 *)

Theorem plus_O_n : forall n : nat, 0 + n = n.
Proof.
  intros n. simpl. reflexivity.  Qed.

(** \uff08\u6216\u8bb8\u4f60\u4f1a\u6ce8\u610f\u5230\u4ee5\u4e0a\u8bed\u53e5\u5728\u4f60\u7684 IDE \u4e2d\u548c\u5728\u6d4f\u89c8\u5668\u6e32\u67d3\u7684 HTML
    \u4e2d\u4e0d\u5927\u4e00\u6837\uff0c\u6211\u4eec\u7528\u4fdd\u7559\u6807\u8bc6\u7b26\u201cforall\u201d\u6765\u8868\u793a\u5168\u79f0\u91cf\u8bcd
    [forall]\u3002\u5f53 [.v] \u6587\u4ef6\u8f6c\u6362\u4e3a HTML \u540e\uff0c\u5b83\u4f1a\u53d8\u6210\u4e00\u4e2a\u5012\u7acb\u7684\u201cA\u201d\u3002\uff09

    \u73b0\u5728\u662f\u65f6\u5019\u8bf4\u4e00\u4e0b [reflexivity] \u4e86\uff0c\u5b83\u5176\u5b9e\u6bd4\u6211\u4eec\u60f3\u8c61\u7684\u66f4\u4e3a\u5f3a\u5927\u3002
    \u5728\u524d\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u8c03\u7528 [simpl] \uff0c\u56e0\u4e3a [reflexivity]
    \u5728\u68c0\u67e5\u7b49\u5f0f\u4e24\u8fb9\u662f\u5426\u76f8\u7b49\u65f6\u4f1a\u81ea\u52a8\u505a\u4e00\u4e9b\u5316\u7b80\uff1b\u6211\u4eec\u52a0\u4e0a [simpl] \u53ea\u662f\u4e3a\u4e86\u770b\u5230\u5316\u7b80\u4e4b\u540e\uff0c
    \u8bc1\u660e\u7ed3\u675f\u4e4b\u524d\u7684\u4e2d\u95f4\u72b6\u6001\u3002\u4e0b\u9762\u662f\u5bf9\u540c\u4e00\u5b9a\u7406\u66f4\u77ed\u7684\u8bc1\u660e\uff1a*)

Theorem plus_O_n' : forall n : nat, 0 + n = n.
Proof.
  intros n. reflexivity. Qed.

(** \u6b64\u5916\uff0c[reflexivity] \u5728\u67d0\u4e9b\u65b9\u9762\u505a\u4e86\u6bd4 [simpl] _'\u66f4\u591a'_\u7684\u5316\u7b80 \u2014\u2014
    \u6bd4\u5982\u5b83\u4f1a\u5c1d\u8bd5\u201c\u5c55\u5f00\u201d\u5df2\u5b9a\u4e49\u7684\u9879\uff0c\u5c06\u5b83\u4eec\u66ff\u6362\u4e3a\u8be5\u5b9a\u4e49\u53f3\u4fa7\u7684\u503c\u3002
    \u4e86\u89e3\u8fd9\u4e00\u70b9\u4f1a\u5f88\u6709\u5e2e\u52a9\u3002\u4ea7\u751f\u8fd9\u79cd\u5dee\u522b\u7684\u539f\u56e0\u662f\uff0c\u5f53\u81ea\u53cd\u6027\u6210\u7acb\u65f6\uff0c
    \u6574\u4e2a\u8bc1\u660e\u76ee\u6807\u5c31\u5b8c\u6210\u4e86\uff0c\u6211\u4eec\u4e0d\u5fc5\u518d\u5173\u5fc3 [reflexivity] \u5316\u7b80\u548c\u5c55\u5f00\u4e86\u4ec0\u4e48\uff1b
    \u800c\u5f53\u6211\u4eec\u5fc5\u987b\u53bb\u89c2\u5bdf\u548c\u7406\u89e3\u65b0\u4ea7\u751f\u7684\u8bc1\u660e\u76ee\u6807\u65f6\uff0c\u6211\u4eec\u5e76\u4e0d\u5e0c\u671b\u76f2\u76ee\u5730\u5c55\u5f00\u5b9a\u4e49\uff0c
    \u5c06\u8bc1\u660e\u76ee\u6807\u7559\u5728\u6df7\u4e71\u7684\u58f0\u660e\u4e2d\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u8981\u7528\u5230 [simpl] \u4e86\u3002

    \u6211\u4eec\u521a\u521a\u58f0\u660e\u7684\u5b9a\u7406\u5f62\u5f0f\u53ca\u5176\u8bc1\u660e\u4e0e\u524d\u9762\u7684\u4f8b\u5b50\u57fa\u672c\u76f8\u540c\uff0c\u5b83\u4eec\u53ea\u6709\u4e00\u70b9\u5dee\u522b\u3002

    \u9996\u5148\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u5173\u952e\u5b57 [Theorem] \u800c\u975e [Example]\u3002\u8fd9\u79cd\u5dee\u522b\u7eaf\u7cb9\u662f\u98ce\u683c\u95ee\u9898\uff1b
    \u5728 Coq \u4e2d\uff0c\u5173\u952e\u5b57 [Example] \u548c [Theorem]\uff08\u4ee5\u53ca\u5176\u5b83\u4e00\u4e9b\uff0c\u5305\u62ec [Lemma]\u3001[Fact]
    \u548c [Remark]\uff09\u90fd\u8868\u793a\u5b8c\u5168\u4e00\u6837\u7684\u4e1c\u897f\u3002

    \u5176\u6b21\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u91cf\u8bcd [forall n:nat]\uff0c\u56e0\u6b64\u6211\u4eec\u7684\u5b9a\u7406\u8ba8\u8bba\u4e86_'\u6240\u6709\u7684'_ \u81ea\u7136\u6570 [n]\u3002
    \u5728\u975e\u5f62\u5f0f\u5316\u7684\u8bc1\u660e\u4e2d\uff0c\u4e3a\u4e86\u8bc1\u660e\u8fd9\u79cd\u5f62\u5f0f\u7684\u5b9a\u7406\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u8bf4\u201c_'\u5047\u8bbe'_
    \u5b58\u5728\u4e00\u4e2a\u4efb\u610f\u81ea\u7136\u6570 [n]...\u201d\u3002\u800c\u5728\u5f62\u5f0f\u5316\u8bc1\u660e\u4e2d\uff0c\u8fd9\u662f\u7528 [intros n]
    \u6765\u5b9e\u73b0\u7684\uff0c\u5b83\u4f1a\u5c06\u91cf\u8bcd\u4ece\u8bc1\u660e\u76ee\u6807\u8f6c\u79fb\u5230\u5f53\u524d\u5047\u8bbe\u7684_'\u4e0a\u4e0b\u6587'_\u4e2d\u3002
    \u6ce8\u610f\u5728 [intros] \u4ece\u53e5\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u522b\u7684\u6807\u8bc6\u7b26\u6765\u4ee3\u66ff [n]
    \uff08\u5f53\u7136\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u9605\u8bfb\u8bc1\u660e\u7684\u4eba\u611f\u5230\u56f0\u60d1\uff09\uff1a
*)

Theorem plus_O_n'' : forall n : nat, 0 + n = n.
Proof.
  intros m. reflexivity. Qed.

(** \u5173\u952e\u5b57 [intros]\u3001[simpl] \u548c [reflexivity] \u90fd\u662f_'\u7b56\u7565\uff08Tactic\uff09'_\u7684\u4f8b\u5b50\u3002
    \u7b56\u7565\u662f\u4e00\u6761\u53ef\u4ee5\u7528\u5728 [Proof]\uff08\u8bc1\u660e\uff09\u548c [Qed]\uff08\u8bc1\u6bd5\uff09\u4e4b\u95f4\u7684\u6307\u4ee4\uff0c\u5b83\u544a\u8bc9 Coq
    \u5982\u4f55\u6765\u68c0\u9a8c\u6211\u4eec\u6240\u4e0b\u7684\u4e00\u4e9b\u65ad\u8a00\u7684\u6b63\u786e\u6027\u3002\u5728\u672c\u7ae0\u5269\u4f59\u7684\u90e8\u5206\u53ca\u4ee5\u540e\u7684\u8bfe\u7a0b\u4e2d\uff0c
    \u6211\u4eec\u4f1a\u89c1\u5230\u66f4\u591a\u7684\u7b56\u7565\u3002 *)

(** \u5176\u5b83\u7c7b\u4f3c\u7684\u5b9a\u7406\u53ef\u901a\u8fc7\u76f8\u540c\u7684\u6a21\u5f0f\u8bc1\u660e\u3002 *)

Theorem plus_1_l : forall n:nat, 1 + n = S n.
Proof.
  intros n. reflexivity.  Qed.

Theorem mult_0_l : forall n:nat, 0 * n = 0.
Proof.
  intros n. reflexivity.  Qed.

(** \u4e0a\u8ff0\u5b9a\u7406\u540d\u79f0\u7684\u540e\u7f00 [_l] \u8bfb\u4f5c\u201c\u5728\u5de6\u8fb9\u201d\u3002 *)

(** \u8ddf\u8fdb\u8fd9\u4e9b\u8bc1\u660e\u7684\u6bcf\u4e2a\u6b65\u9aa4\uff0c\u89c2\u5bdf\u4e0a\u4e0b\u6587\u53ca\u8bc1\u660e\u76ee\u6807\u7684\u53d8\u5316\u662f\u975e\u5e38\u503c\u5f97\u7684\u3002
    \u4f60\u53ef\u80fd\u8981\u5728 [reflexivity] \u524d\u9762\u52a0\u4e0a [simpl] \u8c03\u7528\uff0c\u4ee5\u4fbf\u89c2\u5bdf Coq
    \u5728\u68c0\u67e5\u5b83\u4eec\u7684\u76f8\u7b49\u5173\u7cfb\u524d\u8fdb\u884c\u7684\u5316\u7b80\u3002 *)

(* ################################################################# *)
(** * \u57fa\u4e8e\u6539\u5199\u7684\u8bc1\u660e *)

(** \u4e0b\u9762\u8fd9\u4e2a\u5b9a\u7406\u6bd4\u6211\u4eec\u4e4b\u524d\u89c1\u8fc7\u7684\u66f4\u52a0\u6709\u8da3\uff1a *)

Theorem plus_id_example : forall n m:nat,
  n = m ->
  n + n = m + m.

(** \u8be5\u5b9a\u7406\u5e76\u672a\u5bf9\u81ea\u7136\u6570 [n] \u548c [m] \u6240\u6709\u53ef\u80fd\u7684\u503c\u505a\u5168\u79f0\u65ad\u8a00\uff0c\u800c\u662f\u8ba8\u8bba\u4e86\u4ec5\u5f53
    [n = m] \u65f6\u8fd9\u4e00\u66f4\u52a0\u7279\u5b9a\u60c5\u51b5\u3002\u7bad\u5934\u7b26\u53f7\u8bfb\u4f5c\u201c\u8574\u542b\u201d\u3002

    \u4e0e\u6b64\u524d\u76f8\u540c\uff0c\u6211\u4eec\u9700\u8981\u5728\u80fd\u591f\u5047\u5b9a\u5b58\u5728\u81ea\u7136\u6570 [n] \u548c [m] \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u63a8\u7406\u3002
    \u53e6\u5916\u6211\u4eec\u9700\u8981\u5047\u5b9a\u6709\u524d\u63d0 [n = m]\u3002[intros] \u7b56\u7565\u7528\u6765\u5c06\u8fd9\u4e09\u6761\u524d\u63d0\u4ece\u8bc1\u660e\u76ee\u6807
    \u79fb\u5230\u5f53\u524d\u4e0a\u4e0b\u6587\u7684\u5047\u8bbe\u4e2d\u3002

    \u7531\u4e8e [n] \u548c [m] \u662f\u4efb\u610f\u81ea\u7136\u6570\uff0c\u6211\u4eec\u65e0\u6cd5\u7528\u5316\u7b80\u6765\u8bc1\u660e\u6b64\u5b9a\u7406\uff0c
    \u4e0d\u8fc7\u53ef\u4ee5\u901a\u8fc7\u89c2\u5bdf\u6765\u8bc1\u660e\u5b83\u3002\u5982\u679c\u6211\u4eec\u5047\u8bbe\u4e86 [n = m]\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u8bc1\u660e\u76ee\u6807\u4e2d\u7684
    [n] \u66ff\u6362\u6210 [m] \u4ece\u800c\u83b7\u5f97\u4e24\u8fb9\u8868\u8fbe\u5f0f\u76f8\u540c\u7684\u7b49\u5f0f\u3002\u7528\u6765\u544a\u8bc9 Coq
    \u6267\u884c\u8fd9\u79cd\u66ff\u6362\u7684\u7b56\u7565\u53eb\u505a_'\u6539\u5199'_ [rewrite]\u3002 *)

Proof.
  (* \u5c06\u4e24\u4e2a\u91cf\u8bcd\u79fb\u5230\u4e0a\u4e0b\u6587\u4e2d\uff1a *)
  intros n m.
  (* \u5c06\u524d\u63d0\u79fb\u5230\u4e0a\u4e0b\u6587\u4e2d\uff1a *)
  intros H.
  (* \u7528\u524d\u63d0\u6539\u5199\u76ee\u6807\uff1a *)
  rewrite -> H.
  reflexivity.  Qed.

(** \u8bc1\u660e\u7684\u7b2c\u4e00\u884c\u5c06\u5168\u79f0\u91cf\u8bcd\u53d8\u91cf [n] \u548c [m] \u79fb\u5230\u4e0a\u4e0b\u6587\u4e2d\u3002\u7b2c\u4e8c\u884c\u5c06\u524d\u63d0
    [n = m] \u79fb\u5230\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5e76\u5c06\u5176\u547d\u540d\u4e3a [H]\u3002\u7b2c\u4e09\u884c\u544a\u8bc9 Coq
    \u6539\u5199\u5f53\u524d\u76ee\u6807\uff08[n + n = m + m]\uff09\uff0c\u628a\u524d\u63d0\u7b49\u5f0f [H] \u7684\u5de6\u8fb9\u66ff\u6362\u6210\u53f3\u8fb9\u3002

    ([rewrite] \u4e2d\u7684\u7bad\u5934\u4e0e\u8574\u542b\u65e0\u5173\uff1a\u5b83\u6307\u793a Coq \u4ece\u5de6\u5f80\u53f3\u5730\u5e94\u7528\u6539\u5199\u3002
    \u82e5\u8981\u4ece\u53f3\u5f80\u5de6\u6539\u5199\uff0c\u53ef\u4ee5\u4f7f\u7528 [rewrite <-]\u3002\u5728\u4e0a\u9762\u7684\u8bc1\u660e\u4e2d\u8bd5\u4e00\u8bd5\u8fd9\u79cd\u6539\u53d8\uff0c
    \u770b\u770b Coq \u7684\u53cd\u5e94\u6709\u4f55\u4e0d\u540c\u3002) *)

(** **** \u7ec3\u4e60\uff1a1 \u661f, standard (plus_id_exercise) 

    \u5220\u9664 "[Admitted.]" \u5e76\u8865\u5b8c\u8bc1\u660e\u3002 *)

Theorem plus_id_exercise : forall n m o : nat,
  n = m -> m = o -> n + m = m + o.
Proof.
  intros n m o.
  intros H.
  intros H'.
  rewrite -> H.
  rewrite -> H'.
  reflexivity. Qed.
(** [] *)

(** [Admitted] \u6307\u4ee4\u544a\u8bc9 Coq \u6211\u4eec\u60f3\u8981\u8df3\u8fc7\u6b64\u5b9a\u7406\u7684\u8bc1\u660e\uff0c\u800c\u5c06\u5176\u4f5c\u4e3a\u5df2\u77e5\u6761\u4ef6\uff0c
    \u8fd9\u5728\u5f00\u53d1\u8f83\u957f\u7684\u8bc1\u660e\u65f6\u5f88\u6709\u7528\u3002\u5728\u8fdb\u884c\u4e00\u4e9b\u8f83\u5927\u7684\u547d\u9898\u8bba\u8bc1\u65f6\uff0c\u6211\u4eec\u80fd\u591f\u58f0\u660e\u4e00\u4e9b\u9644\u52a0\u7684\u4e8b\u5b9e\u3002
    \u65e2\u7136\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e9b\u4e8b\u5b9e\u5bf9\u8bba\u8bc1\u662f\u6709\u7528\u7684\uff0c\u5c31\u53ef\u4ee5\u7528 [Admitted] \u5148\u4e0d\u52a0\u6000\u7591\u5730\u63a5\u53d7\u8fd9\u4e9b\u4e8b\u5b9e\uff0c
    \u7136\u540e\u7ee7\u7eed\u601d\u8003\u5927\u547d\u9898\u7684\u8bba\u8bc1\u3002\u76f4\u5230\u786e\u8ba4\u4e86\u8be5\u547d\u9898\u786e\u5b9e\u662f\u6709\u610f\u4e49\u7684\uff0c
    \u518d\u56de\u8fc7\u5934\u53bb\u8bc1\u660e\u521a\u624d\u8df3\u8fc7\u7684\u8bc1\u660e\u3002\u4f46\u662f\u8981\u5c0f\u5fc3\uff1a\u6bcf\u6b21\u4f60\u4f7f\u7528 [Admitted]\uff0c
    \u4f60\u5c31\u4e3a Coq \u8fd9\u4e2a\u5b8c\u597d\u3001\u4e25\u5bc6\u3001\u5f62\u5f0f\u5316\u4e14\u5c01\u95ed\u7684\u4e16\u754c\u5f00\u4e86\u4e00\u4e2a\u6beb\u65e0\u903b\u8f91\u7684\u540e\u95e8\u3002 *)

(** [Check] \u547d\u4ee4\u4e5f\u53ef\u7528\u6765\u68c0\u67e5\u4ee5\u524d\u58f0\u660e\u7684\u5f15\u7406\u548c\u5b9a\u7406\u3002\u4e0b\u9762\u4e24\u4e2a\u5173\u4e8e\u4e58\u6cd5\u5f15\u7406\u6765\u81ea\u4e8e\u6807\u51c6\u5e93\u3002
    \uff08\u5728\u4e0b\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u4f1a\u4eb2\u81ea\u8bc1\u660e\u5b83\u4eec\u3002\uff09 *)

Check mult_n_O.
(* ===> forall n : nat, 0 = n * 0 *)

Check mult_n_Sm.
(* ===> forall n m : nat, n * m + n = n * S m *)

(** \u9664\u4e86\u4e0a\u4e0b\u6587\u4e2d\u73b0\u6709\u7684\u5047\u8bbe\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7 [rewrite] \u7b56\u7565\u6765\u8fd0\u7528\u524d\u671f\u8bc1\u660e\u8fc7\u7684\u5b9a\u7406\u3002
    \u5982\u679c\u524d\u671f\u8bc1\u660e\u7684\u5b9a\u7406\u7684\u8bed\u53e5\u4e2d\u5305\u542b\u91cf\u8bcd\u53d8\u91cf\uff0c\u5982\u524d\u4f8b\u6240\u793a\uff0cCoq \u4f1a\u901a\u8fc7\u5339\u914d\u5f53\u524d\u7684\u8bc1\u660e\u76ee\u6807
    \u6765\u5c1d\u8bd5\u5b9e\u4f8b\u5316\uff08Instantiate\uff09\u5b83\u4eec\u3002 *)

Theorem mult_n_0_m_0 : forall n m : nat,
  (n * 0) + (m * 0) = 0.
Proof.
  intros n m.
  rewrite <- mult_n_O.
  rewrite <- mult_n_O.
  reflexivity. Qed.

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard (mult_n_1)  *)
Theorem mult_n_1 : forall n : nat,
  n * 1 = n.
Proof.
  intros n.
  rewrite <- mult_n_Sm.
  rewrite <- mult_n_O.
  rewrite <- plus_O_n.
  reflexivity. Qed.

(** [] *)


(* ################################################################# *)
(** * \u5229\u7528\u5206\u7c7b\u8ba8\u8bba\u6765\u8bc1\u660e *)

(** \u5f53\u7136\uff0c\u5e76\u975e\u4e00\u5207\u90fd\u80fd\u901a\u8fc7\u7b80\u5355\u7684\u8ba1\u7b97\u548c\u6539\u5199\u6765\u8bc1\u660e\u3002\u901a\u5e38\uff0c\u4e00\u4e9b\u672a\u77e5\u7684\uff0c
    \u5047\u5b9a\u7684\u503c\uff08\u5982\u4efb\u610f\u6570\u503c\u3001\u5e03\u5c14\u503c\u3001\u5217\u8868\u7b49\u7b49\uff09\u4f1a\u963b\u788d\u5316\u7b80\u3002
    \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u50cf\u4ee5\u524d\u4e00\u6837\u4f7f\u7528 [simpl] \u7b56\u7565\u5c1d\u8bd5\u8bc1\u660e\u4e0b\u9762\u7684\u4e8b\u5b9e\uff0c\u5c31\u4f1a\u88ab\u5361\u4f4f\u3002
    \uff08\u73b0\u5728\u6211\u4eec\u7528 [Abort] \u6307\u4ee4\u6765\u653e\u5f03\u8bc1\u660e\u3002\uff09 *)

Theorem plus_1_neq_0_firsttry : forall n : nat,
  (n + 1) =? 0 = false.
Proof.
  intros n.
  simpl.  (* \u65e0\u80fd\u4e3a\u529b! *)
Abort.

(** \u539f\u56e0\u5728\u4e8e\uff1a\u6839\u636e [eqb] \u548c [+] \u7684\u5b9a\u4e49\uff0c\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\u5148\u88ab [match] \u5339\u914d\u3002
    \u4f46\u6b64\u5904 [+] \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 [n] \u672a\u77e5\uff0c\u800c [eqb] \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 [n + 1]
    \u662f\u590d\u5408\u8868\u8fbe\u5f0f\uff0c\u4e8c\u8005\u5747\u65e0\u6cd5\u5316\u7b80\u3002

    \u6b32\u8fdb\u884c\u89c4\u7ea6\uff0c\u5219\u9700\u5206\u60c5\u51b5\u8ba8\u8bba [n] \u7684\u6240\u6709\u53ef\u80fd\u6784\u9020\u3002\u5982\u679c [n] \u4e3a [O]\uff0c
    \u5219\u53ef\u9a8c\u7b97 [(n + 1) =? 0] \u7684\u7ed3\u679c\u786e\u5b9e\u4e3a [false]\uff1b\u5982\u679c [n] \u7531 [S n'] \u6784\u9020\uff0c
    \u90a3\u4e48\u5373\u4f7f\u6211\u4eec\u4e0d\u77e5\u9053 [n + 1] \u8868\u793a\u4ec0\u4e48\uff0c\u4f46\u81f3\u5c11\u77e5\u9053\u5b83\u7684\u6784\u9020\u5b50\u4e3a [S]\uff0c
    \u56e0\u800c\u8db3\u4ee5\u5f97\u51fa [(n + 1) =? 0] \u7684\u7ed3\u679c\u4e3a [false]\u3002

    \u544a\u8bc9 Coq \u5206\u522b\u5bf9 [n = 0] \u548c [n = S n'] \u8fd9\u4e24\u79cd\u60c5\u51b5\u8fdb\u884c\u5206\u6790\u7684\u7b56\u7565\uff0c\u53eb\u505a [destruct]\u3002 *)

Theorem plus_1_neq_0 : forall n : nat,
  (n + 1) =? 0 = false.
Proof.
  intros n. destruct n as [| n'] eqn:E.
  - reflexivity.
  - reflexivity.   Qed.

(** [destruct] \u7b56\u7565\u4f1a\u751f\u6210_\u4e24\u4e2a_\u5b50\u76ee\u6807\uff0c\u4e3a\u4e86\u8ba9 Coq \u8ba4\u53ef\u8fd9\u4e2a\u5b9a\u7406\uff0c
    \u6211\u4eec\u5fc5\u987b\u63a5\u4e0b\u6765\u8bc1\u660e\u8fd9\u4e24\u4e2a\u5b50\u76ee\u6807\u3002

    [as [| n']] \u8fd9\u79cd\u6807\u6ce8\u88ab\u79f0\u4e3a _'\u5f15\u5165\u6a21\u5f0f'_\u3002\u5b83\u544a\u8bc9 Coq \u5e94\u5f53\u5728\u6bcf\u4e2a\u5b50\u76ee\u6807\u4e2d
    \u4f7f\u7528\u4ec0\u4e48\u6837\u7684\u53d8\u91cf\u540d\u3002\u603b\u4f53\u800c\u8a00\uff0c\u5728\u65b9\u62ec\u53f7\u4e4b\u95f4\u7684\u662f\u4e00\u4e2a\u7531 [|] \u9694\u5f00\u7684
    _'\u5217\u8868\u7684\u5217\u8868'_\uff08\u8bd1\u8005\u6ce8\uff1alist of lists\uff09\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f
    \u4e00\u4e2a\u7a7a\u5217\u8868\uff0c\u56e0\u4e3a [O] \u6784\u9020\u5b50\u662f\u4e00\u4e2a\u7a7a\u6784\u9020\u5b50\uff08\u5b83\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\uff09\u3002
    \u7b2c\u4e8c\u4e2a\u5143\u7d20\u63d0\u4f9b\u4e86\u5305\u542b\u5355\u4e2a\u53d8\u91cf\u540d [n'] \u7684\u5217\u8868\uff0c\u56e0\u4e3a [S] \u662f\u4e00\u4e2a\u5355\u6784\u9020\u5b50\u3002

    \u5728\u6bcf\u4e2a\u5b50\u76ee\u6807\u4e2d\uff0cCoq \u4f1a\u8bb0\u5f55\u8fd9\u4e2a\u5b50\u76ee\u6807\u4e2d\u5173\u4e8e [n] \u7684\u5047\u8bbe\uff0c[n = 0] \u8fd8\u662f
    \u5bf9\u4e8e\u67d0\u4e2a n', [n = S n']\u3002\u800c [eqn:E] \u8bb0\u53f7\u5219\u544a\u77e5 Coq \u4ee5 [E] \u6765\u547d\u540d\u8fd9\u4e9b
    \u5047\u8bbe\u3002\u7701\u7565 [eqn:E] \u4f1a\u5bfc\u81f4 Coq \u7701\u7565\u8fd9\u4e9b\u5047\u8bbe\u3002\u8fd9\u79cd\u7701\u7565\u80fd\u591f\u4f7f\u5f97\u4e00\u4e9b\u4e0d\u9700\u8981
    \u663e\u5f0f\u7528\u5230\u8fd9\u7c7b\u5047\u8bbe\u7684\u8bc1\u660e\u663e\u5f97\u66f4\u52a0\u6d41\u7545\u3002\u4f46\u5728\u5b9e\u8df5\u4e2d\u6700\u597d\u8fd8\u662f\u4fdd\u7559\u4ed6\u4eec\uff0c
    \u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u79cd\u8bf4\u660e\u6587\u6863\u6765\u5728\u8bc1\u660e\u8fc7\u7a0b\u4e2d\u6307\u5f15\u4f60\u3002

    \u7b2c\u4e8c\u884c\u548c\u7b2c\u4e09\u884c\u4e2d\u7684 [-] \u7b26\u53f7\u53eb\u505a_'\u6807\u53f7'_\uff0c\u5b83\u6807\u660e\u4e86\u8fd9\u4e24\u4e2a\u751f\u6210\u7684\u5b50\u76ee\u6807\u6240\u5bf9\u5e94\u7684\u8bc1\u660e\u90e8\u5206\u3002
    \uff08\u8bd1\u6ce8\uff1a\u6b64\u5904\u7684\u201c\u6807\u53f7\u201d\u5e94\u7406\u89e3\u4e3a\u4e00\u4e2a\u9879\u76ee\u5217\u8868\u4e2d\u6bcf\u4e2a _'\u6761\u76ee'_ \u524d\u7684\u5c0f\u6807\u8bb0\uff0c\u5982 \u2023 \u6216 \u2022\u3002\uff09
    \u6807\u53f7\u540e\u9762\u7684\u8bc1\u660e\u811a\u672c\u662f\u4e00\u4e2a\u5b50\u76ee\u6807\u7684\u5b8c\u6574\u8bc1\u660e\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6bcf\u4e2a\u5b50\u76ee\u6807\u90fd\u7b80\u5355\u5730\u4f7f\u7528
    [reflexivity] \u5b8c\u6210\u4e86\u8bc1\u660e\u3002\u901a\u5e38\uff0c[reflexivity] \u672c\u8eab\u4f1a\u6267\u884c\u4e00\u4e9b\u5316\u7b80\u64cd\u4f5c\u3002
    \u4f8b\u5982\uff0c\u7b2c\u4e8c\u6bb5\u8bc1\u660e\u5c06 [at (S n' + 1) 0] \u5316\u7b80\u6210 [false]\uff0c\u662f\u901a\u8fc7\u5148\u5c06
    [(S n' + 1)] \u8f6c\u5199\u6210 [S (n' + 1)]\uff0c\u63a5\u7740\u5c55\u5f00 [beq_nat]\uff0c\u4e4b\u540e\u518d\u5316\u7b80 [match] \u5b8c\u6210\u7684\u3002

    \u7528\u6807\u53f7\u6765\u533a\u5206\u60c5\u51b5\u662f\u53ef\u9009\u7684\uff1a\u5982\u679c\u6ca1\u6709\u6807\u53f7\uff0cCoq \u53ea\u4f1a\u7b80\u5355\u5730\u8981\u6c42\u4f60\u4f9d\u6b21\u8bc1\u660e\u6bcf\u4e2a\u5b50\u76ee\u6807\u3002
    \u5c3d\u7ba1\u5982\u6b64\uff0c\u4f7f\u7528\u6807\u53f7\u4ecd\u7136\u662f\u4e00\u4e2a\u597d\u4e60\u60ef\u3002\u539f\u56e0\u6709\u4e8c\uff1a\u9996\u5148\uff0c\u5b83\u80fd\u8ba9\u8bc1\u660e\u7684\u7ed3\u6784\u66f4\u52a0\u6e05\u6670\u6613\u8bfb\u3002
    \u5176\u6b21\uff0c\u6807\u53f7\u80fd\u6307\u793a Coq \u5728\u5f00\u59cb\u9a8c\u8bc1\u4e0b\u4e00\u4e2a\u76ee\u6807\u524d\u786e\u8ba4\u4e0a\u4e00\u4e2a\u5b50\u76ee\u6807\u5df2\u5b8c\u6210\uff0c
    \u9632\u6b62\u4e0d\u540c\u5b50\u76ee\u6807\u7684\u8bc1\u660e\u6405\u548c\u5728\u4e00\u8d77\u3002\u8fd9\u4e00\u70b9\u5728\u5927\u578b\u5f00\u53d1\u4e2d\u5c24\u4e3a\u91cd\u8981\uff0c
    \u56e0\u4e3a\u4e00\u4e9b\u8bc1\u660e\u7247\u6bb5\u4f1a\u5bfc\u81f4\u5f88\u8017\u65f6\u7684\u6392\u9519\u8fc7\u7a0b\u3002

    \u5728 Coq \u4e2d\u5e76\u6ca1\u6709\u65e2\u4e25\u683c\u53c8\u4fbf\u6377\u7684\u89c4\u5219\u6765\u683c\u5f0f\u5316\u8bc1\u660e \u2014\u2014 \u5c24\u5176\u6307\u5e94\u5728\u54ea\u91cc\u65ad\u884c\uff0c
    \u4ee5\u53ca\u8bc1\u660e\u4e2d\u7684\u6bb5\u843d\u5e94\u5982\u4f55\u7f29\u8fdb\u4ee5\u663e\u793a\u5176\u5d4c\u5957\u7ed3\u6784\u3002\u7136\u800c\uff0c\u65e0\u8bba\u683c\u5f0f\u7684\u5176\u5b83\u65b9\u9762\u5982\u4f55\u5e03\u5c40\uff0c
    \u53ea\u8981\u5728\u591a\u4e2a\u5b50\u76ee\u6807\u751f\u6210\u7684\u5730\u65b9\u4e3a\u6bcf\u884c\u5f00\u5934\u6807\u4e0a\u6807\u53f7\uff0c\u90a3\u4e48\u6574\u4e2a\u8bc1\u660e\u5c31\u4f1a\u6709\u5f88\u597d\u7684\u53ef\u8bfb\u6027\u3002

    \u8fd9\u91cc\u4e5f\u6709\u5fc5\u8981\u63d0\u4e00\u4e0b\u5173\u4e8e\u6bcf\u884c\u4ee3\u7801\u957f\u5ea6\u7684\u5efa\u8bae\u3002Coq \u7684\u521d\u5b66\u8005\u6709\u65f6\u7231\u8d70\u6781\u7aef\uff0c
    \u8981\u4e48\u4e00\u884c\u53ea\u6709\u4e00\u4e2a\u7b56\u7565\u8bed\u53e5\uff0c\u8981\u4e48\u628a\u6574\u4e2a\u8bc1\u660e\u90fd\u5199\u5728\u4e00\u884c\u91cc\u3002\u66f4\u597d\u7684\u98ce\u683c\u5219\u4ecb\u4e8e\u4e24\u8005\u4e4b\u95f4\u3002
    \u4e00\u4e2a\u5408\u7406\u7684\u4e60\u60ef\u662f\u7ed9\u81ea\u5df1\u8bbe\u5b9a\u4e00\u4e2a\u6bcf\u884c 80 \u4e2a\u5b57\u7b26\u7684\u9650\u5236\u3002\u66f4\u957f\u7684\u884c\u4f1a\u5f88\u96be\u8bfb\uff0c
    \u4e5f\u4e0d\u4fbf\u4e8e\u663e\u793a\u6216\u6253\u5370\u3002\u5f88\u591a\u7f16\u8f91\u5668\u90fd\u80fd\u5e2e\u4f60\u505a\u5230\u3002

    [destruct] \u7b56\u7565\u53ef\u7528\u4e8e\u4efb\u4f55\u5f52\u7eb3\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u4f1a\u7528\u5b83\u6765\u8bc1\u660e
    \u5e03\u5c14\u503c\u7684\u53d6\u53cd\u662f\u5bf9\u5408\uff08Involutive\uff09\u7684 \u2014\u2014 \u5373\uff0c\u53d6\u53cd\u662f\u81ea\u8eab\u7684\u9006\u8fd0\u7b97\u3002 *)

Theorem negb_involutive : forall b : bool,
  negb (negb b) = b.
Proof.
  intros b. destruct b eqn:E.
  - reflexivity.
  - reflexivity.  Qed.

(** \u6ce8\u610f\u8fd9\u91cc\u7684 [destruct] \u6ca1\u6709 [as] \u5b50\u53e5\uff0c\u56e0\u4e3a\u6b64\u5904 [destruct]
    \u751f\u6210\u7684\u5b50\u5206\u7c7b\u5747\u65e0\u9700\u7ed1\u5b9a\u4efb\u4f55\u53d8\u91cf\uff0c\u56e0\u6b64\u4e5f\u5c31\u4e0d\u5fc5\u6307\u5b9a\u540d\u5b57\u3002
    \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7701\u7565 _'\u4efb\u4f55'_ [destruct] \u4e2d\u7684 [as] \u5b50\u53e5\uff0c
    Coq \u4f1a\u81ea\u52a8\u586b\u4e0a\u53d8\u91cf\u540d\u3002\u4e0d\u8fc7\u8fd9\u901a\u5e38\u662f\u4e2a\u574f\u4e60\u60ef\uff0c\u56e0\u4e3a\u5982\u679c\u4efb\u5176\u81ea\u7531\u51b3\u5b9a\u7684\u8bdd\uff0c
    Coq \u7ecf\u5e38\u4f1a\u9009\u62e9\u4e00\u4e9b\u5bb9\u6613\u4ee4\u4eba\u6df7\u6dc6\u7684\u540d\u5b57\u3002

    \u6709\u65f6\u5728\u4e00\u4e2a\u5b50\u76ee\u6807\u5185\u8c03\u7528 [destruct]\uff0c\u4ea7\u751f\u51fa\u66f4\u591a\u7684\u8bc1\u660e\u4e49\u52a1\uff08Proof Obligation\uff09
    \u4e5f\u975e\u5e38\u6709\u7528\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u6807\u53f7\u6765\u6807\u8bb0\u76ee\u6807\u7684\u4e0d\u540c\u201c\u5c42\u7ea7\u201d\uff0c\u6bd4\u5982\uff1a *)

Theorem andb_commutative : forall b c, andb b c = andb c b.
Proof.
  intros b c. destruct b eqn:Eb.
  - destruct c eqn:Ec.
    + reflexivity.
    + reflexivity.
  - destruct c eqn:Ec.
    + reflexivity.
    + reflexivity.
Qed.

(** \u6bcf\u4e00\u5bf9 [reflexivity] \u8c03\u7528\u548c\u7d27\u90bb\u5176\u4e0a\u7684 [destruct]
    \u6267\u884c\u540e\u751f\u6210\u7684\u5b50\u76ee\u6807\u5bf9\u5e94\u3002 *)

(** \u9664\u4e86 [-] \u548c [+] \u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 [*]\uff08\u661f\u53f7\uff09\u6216\u4efb\u4f55\u91cd\u590d\u7684\u6807\u53f7\u7b26\uff08\u5982
    [--] \u6216 [***]\uff09\u4f5c\u4e3a\u6807\u53f7\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u82b1\u62ec\u53f7\u5c06\u6bcf\u4e2a\u5b50\u8bc1\u660e\u76ee\u6807\u62ec\u8d77\u6765\uff1a *)

Theorem andb_commutative' : forall b c, andb b c = andb c b.
Proof.
  intros b c. destruct b eqn:Eb.
  { destruct c eqn:Ec.
    { reflexivity. }
    { reflexivity. } }
  { destruct c eqn:Ec.
    { reflexivity. }
    { reflexivity. } }
Qed.

(** \u7531\u4e8e\u82b1\u62ec\u53f7\u540c\u65f6\u6807\u8bc6\u4e86\u8bc1\u660e\u7684\u5f00\u59cb\u548c\u7ed3\u675f\uff0c\u56e0\u6b64\u5b83\u4eec\u53ef\u4ee5\u540c\u65f6\u7528\u4e8e\u4e0d\u540c\u7684\u5b50\u76ee\u6807\u5c42\u7ea7\uff0c
    \u5982\u4e0a\u4f8b\u6240\u793a\u3002\u6b64\u5916\uff0c\u82b1\u62ec\u53f7\u8fd8\u5141\u8bb8\u6211\u4eec\u5728\u4e00\u4e2a\u8bc1\u660e\u4e2d\u7684\u591a\u4e2a\u5c42\u7ea7\u4e0b\u4f7f\u7528\u540c\u4e00\u4e2a\u6807\u53f7\u3002
    \u4f7f\u7528\u5927\u62ec\u53f7\u3001\u6807\u53f7\u8fd8\u662f\u4e8c\u8005\u7ed3\u5408\u90fd\u7eaf\u7cb9\u662f\u4e2a\u4eba\u504f\u597d\u95ee\u9898\u3002 *)

Theorem andb3_exchange :
  forall b c d, andb (andb b c) d = andb (andb b d) c.
Proof.
  intros b c d. destruct b eqn:Eb.
  - destruct c eqn:Ec.
    { destruct d eqn:Ed.
      - reflexivity.
      - reflexivity. }
    { destruct d eqn:Ed.
      - reflexivity.
      - reflexivity. }
  - destruct c eqn:Ec.
    { destruct d eqn:Ed.
      - reflexivity.
      - reflexivity. }
    { destruct d eqn:Ed.
      - reflexivity.
      - reflexivity. }
Qed.

(** \u5728\u672c\u7ae0\u7ed3\u675f\u4e4b\u524d\uff0c\u6211\u4eec\u6700\u540e\u518d\u8bf4\u4e00\u79cd\u7b80\u4fbf\u5199\u6cd5\u3002\u6216\u8bb8\u4f60\u5df2\u7ecf\u6ce8\u610f\u5230\u4e86\uff0c
    \u5f88\u591a\u8bc1\u660e\u5728\u5f15\u5165\u53d8\u91cf\u4e4b\u540e\u4f1a\u7acb\u5373\u5bf9\u5b83\u8fdb\u884c\u60c5\u51b5\u5206\u6790\uff1a

       intros x y. destruct y as [|y] eqn:E.

    \u8fd9\u79cd\u5199\u6cd5\u662f\u5982\u6b64\u7684\u5e38\u89c1\u4ee5\u81f3\u4e8e Coq \u4e3a\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5199\uff1a\u6211\u4eec\u53ef\u4ee5\u5728\u5f15\u5165
    \u4e00\u4e2a\u53d8\u91cf\u7684\u540c\u65f6\u5bf9\u4ed6\u4f7f\u7528_'\u5f15\u5165\u6a21\u5f0f'_\u6765\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u5bf9
    [plus_1_neq_0] \u7684\u66f4\u7b80\u77ed\u8bc1\u660e\u3002\uff08\u8fd9\u79cd\u7b80\u5199\u7684\u7f3a\u70b9\u4e5f\u663e\u800c\u6613\u89c1\uff0c
    \u6211\u4eec\u65e0\u6cd5\u518d\u8bb0\u5f55\u5728\u6bcf\u4e2a\u5b50\u76ee\u6807\u4e2d\u6240\u4f7f\u7528\u7684\u5047\u8bbe\uff0c\u800c\u4e4b\u524d\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7
    [eqn:E] \u5c06\u5b83\u4eec\u6807\u6ce8\u51fa\u6765\u3002\uff09 *)

Theorem plus_1_neq_0' : forall n : nat,
  (n + 1) =? 0 = false.
Proof.
  intros [|n].
  - reflexivity.
  - reflexivity.  Qed.

(** \u5982\u679c\u6ca1\u6709\u9700\u8981\u547d\u540d\u7684\u6784\u9020\u5b50\u53c2\u6570\uff0c\u6211\u4eec\u53ea\u9700\u5199\u4e0a [[]] \u5373\u53ef\u8fdb\u884c\u60c5\u51b5\u5206\u6790\u3002 *)

Theorem andb_commutative'' :
  forall b c, andb b c = andb c b.
Proof.
  intros [] [].
  - reflexivity.
  - reflexivity.
  - reflexivity.
  - reflexivity.
Qed.

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard (andb_true_elim2) 

    \u8bc1\u660e\u4ee5\u4e0b\u65ad\u8a00, \u5f53\u4f7f\u7528 [destruct] \u65f6\u8bf7\u7528\u6807\u53f7\u6807\u51fa\u60c5\u51b5\uff08\u4ee5\u53ca\u5b50\u60c5\u51b5\uff09\u3002 *)

Theorem andb_true_elim2 : forall b c : bool,
  andb b c = true -> c = true.
Proof.
  intros b c.
  destruct c as [] eqn: Eb.
  - simpl. intros H. reflexivity.
  - destruct b as []. 
    + simpl. intros H. rewrite <- H. reflexivity.
    + simpl. intros H. rewrite <- H. reflexivity.
  Qed.
(** [] *)

(** **** \u7ec3\u4e60\uff1a1 \u661f, standard (zero_nbeq_plus_1)  *)
Theorem zero_nbeq_plus_1 : forall n : nat,
  0 =? (n + 1) = false.
Proof.
  intros n.
  destruct n as [|n'] eqn:En.
  - simpl. reflexivity.
  - simpl. reflexivity.
Qed.
(** [] *)

(* ################################################################# *)
(** * \u5173\u4e8e\u8bb0\u6cd5\u7684\u66f4\u591a\u5185\u5bb9 (\u53ef\u9009) *)

(** \uff08\u901a\u5e38\uff0c\u6807\u4e3a\u53ef\u9009\u7684\u90e8\u5206\u5bf9\u4e8e\u8ddf\u8fdb\u672c\u4e66\u5176\u5b83\u90e8\u5206\u7684\u5b66\u4e60\u6765\u8bf4\u4e0d\u662f\u5fc5\u987b\u7684\uff0c
    \u9664\u4e86\u90a3\u4e9b\u4e5f\u6807\u8bb0\u4e3a\u53ef\u9009\u7684\u90e8\u5206\u3002\u5728\u521d\u6b21\u9605\u8bfb\u65f6\uff0c\u4f60\u53ef\u4ee5\u5feb\u901f\u6d4f\u89c8\u8fd9\u4e9b\u90e8\u5206\uff0c
    \u4ee5\u4fbf\u5728\u5c06\u6765\u9047\u5230\u65f6\u80fd\u591f\u60f3\u8d77\u6765\u8fd9\u91cc\u8bb2\u4e86\u4e9b\u4ec0\u4e48\u3002\uff09

    \u56de\u5fc6\u4e00\u4e0b\u4e2d\u7f00\u52a0\u6cd5\u548c\u4e58\u6cd5\u7684\u8bb0\u6cd5\u5b9a\u4e49\uff1a*)

Notation "x + y" := (plus x y)
                       (at level 50, left associativity)
                       : nat_scope.
Notation "x * y" := (mult x y)
                       (at level 40, left associativity)
                       : nat_scope.

(** \u5bf9\u4e8e Coq \u4e2d\u7684\u6bcf\u4e2a\u8bb0\u6cd5\u7b26\u53f7\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u5b83\u7684 _'\u4f18\u5148\u7ea7'_ \u548c _'\u7ed3\u5408\u6027'_\u3002
    \u4f18\u5148\u7ea7 [n] \u7528 [at level n] \u6765\u8868\u793a\uff0c\u8fd9\u6837\u6709\u52a9\u4e8e Coq \u5206\u6790\u590d\u5408\u8868\u8fbe\u5f0f\u3002
    \u7ed3\u5408\u6027\u7684\u8bbe\u7f6e\u6709\u52a9\u4e8e\u6d88\u9664\u8868\u8fbe\u5f0f\u4e2d\u76f8\u540c\u7b26\u53f7\u51fa\u73b0\u591a\u6b21\u65f6\u4ea7\u751f\u7684\u6b67\u4e49\u3002\u6bd4\u5982\uff0c
    \u4e0a\u9762\u8fd9\u7ec4\u5bf9 [+] \u548c [*] \u7684\u53c2\u6570\u5b9a\u4e49\u7684\u8868\u8fbe\u5f0f [1+2*3*4] \u662f [(1+((2*3)*4))] \u7684
    \u7b80\u5199\u3002Coq \u4f7f\u7528 0 \u5230 100 \u7684\u4f18\u5148\u7ea7\u7b49\u7ea7\uff0c\u540c\u65f6\u652f\u6301 _'\u5de6\u7ed3\u5408'_\u3001_'\u53f3\u7ed3\u5408'_
    \u548c _'\u4e0d\u7ed3\u5408'_ \u4e09\u79cd\u7ed3\u5408\u6027\u3002\u4e4b\u540e\u6211\u4eec\u5728\u522b\u7684\u7ae0\u8282\u4f1a\u770b\u5230\u66f4\u591a\u4e0e\u6b64\u76f8\u5173\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982
    [Lists] \u4e00\u7ae0\u3002

    \u6bcf\u4e2a\u8bb0\u6cd5\u7b26\u53f7\u8fd8\u4e0e _'\u8bb0\u6cd5\u8303\u56f4\uff08Notation Scope\uff09'_\u76f8\u5173\u3002Coq \u4f1a\u5c1d\u8bd5\u6839\u636e\u4e0a\u4e0b\u6587\u6765\u731c\u6d4b
    \u4f60\u6240\u6307\u7684\u8303\u56f4\uff0c\u56e0\u6b64\u5f53\u4f60\u5199\u51fa [S(0*0)] \u65f6\uff0c\u5b83\u731c\u6d4b\u662f [nat_scope]\uff1b\u800c\u5f53\u4f60
    \u5199\u51fa\u79ef\uff08\u5143\u7ec4\uff09\u7c7b\u578b [bool*bool] \u65f6\uff0c\u5b83\u731c\u6d4b\u662f [type_scope]\u3002
    \u6709\u65f6\u4f60\u53ef\u80fd\u5fc5\u987b\u767e\u5206\u53f7\u8bb0\u6cd5 [(x*y)%nat] \u6765\u5e2e\u52a9 Coq \u786e\u5b9a\u8303\u56f4\u3002
    \u53e6\u5916\uff0c\u6709\u65f6 Coq \u6253\u5370\u7684\u7ed3\u679c\u4e2d\u4e5f\u7528 [%nat] \u6765\u6307\u793a\u8bb0\u6cd5\u6240\u5728\u7684\u8303\u56f4\u3002

    \u8bb0\u6cd5\u8303\u56f4\u540c\u6837\u9002\u7528\u4e8e\u6570\u503c\u8bb0\u6cd5\uff08[3]\u3001[4]\u3001[5]\u3001[42] \u7b49\u7b49\uff09\uff0c\u56e0\u6b64\u4f60\u6709\u65f6\u5019\u4f1a\u770b\u5230
    [0%nat]\uff0c\u8868\u793a [0]\uff08\u5373\u6211\u4eec\u5728\u672c\u7ae0\u4e2d\u4f7f\u7528\u7684\u81ea\u7136\u6570\u96f6 [0]\uff09\uff0c\u800c [0%Z] \u8868\u793a\u6574\u6570\u96f6
    \uff08\u6765\u81ea\u4e8e\u6807\u51c6\u5e93\u4e2d\u7684\u53e6\u4e00\u4e2a\u90e8\u5206\uff09\u3002

    \u4e13\u4e1a\u63d0\u793a\uff1aCoq \u7684\u7b26\u53f7\u673a\u5236\u4e0d\u662f\u7279\u522b\u5f3a\u5927\uff0c\u522b\u671f\u671b\u592a\u591a\u3002 *)

(* ################################################################# *)
(** * \u4e0d\u52a8\u70b9 [Fixpoint] \u548c\u7ed3\u6784\u5316\u9012\u5f52 (\u53ef\u9009) *)

(** \u4ee5\u4e0b\u662f\u52a0\u6cd5\u5b9a\u4e49\u7684\u4e00\u4e2a\u526f\u672c\uff1a *)

Fixpoint plus' (n : nat) (m : nat) : nat :=
  match n with
  | O => m
  | S n' => S (plus' n' m)
  end.

(** \u5f53 Coq \u67e5\u770b\u6b64\u5b9a\u4e49\u65f6\uff0c\u5b83\u4f1a\u6ce8\u610f\u5230\u201c[plus'] \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u9012\u51cf\u7684\u201d\u3002
    \u8fd9\u610f\u5473\u7740\u6211\u4eec\u5bf9\u53c2\u6570 [n] \u6267\u884c\u4e86_'\u7ed3\u6784\u5316\u9012\u5f52'_\u3002\u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u4ec5\u5bf9\u4e25\u683c\u9012\u51cf\u7684
    [n] \u503c\u8fdb\u884c\u9012\u5f52\u8c03\u7528\u3002\u8fd9\u4e00\u70b9\u8574\u542b\u4e86\u201c\u5bf9 [plus'] \u7684\u8c03\u7528\u6700\u7ec8\u4f1a\u505c\u6b62\u201d\u3002
    Coq \u8981\u6c42\u6bcf\u4e2a [Fixpoint] \u5b9a\u4e49\u4e2d\u7684\u67d0\u4e9b\u53c2\u6570\u5fc5\u987b\u662f\u201c\u9012\u51cf\u7684\u201d\u3002

    \u8fd9\u9879\u8981\u6c42\u662f Coq \u7684\u57fa\u672c\u7279\u6027\u4e4b\u4e00\uff0c\u5b83\u4fdd\u8bc1\u4e86 Coq \u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u51fd\u6570\u5bf9\u4e8e\u6240\u6709\u8f93\u5165\u90fd\u4f1a\u7ec8\u6b62\u3002
    \u7136\u800c\uff0c\u7531\u4e8e Coq \u7684\u201c\u9012\u51cf\u5206\u6790\u201d\u4e0d\u662f\u975e\u5e38\u7cbe\u81f4\uff0c
    \u56e0\u6b64\u6709\u65f6\u5fc5\u987b\u7528\u4e00\u70b9\u4e0d\u540c\u5bfb\u5e38\u7684\u65b9\u5f0f\u6765\u7f16\u5199\u51fd\u6570\u3002 *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard, optional (decreasing) 

    \u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\u8fd9\u4e00\u70b9\uff0c\u8bf7\u5c1d\u8bd5\u5199\u4e00\u4e2a\u5bf9\u4e8e\u6240\u6709\u8f93\u5165\u90fd_\u7684\u786e_\u7ec8\u6b62\u7684 [Fixpoint]
    \u5b9a\u4e49\u3002\u4f46\u8fd9\u4e2a\u5b9a\u4e49\u9700\u8981\u8fdd\u80cc\u4e0a\u8ff0\u7684\u9650\u5236\uff0c\u4ee5\u6b64\u6765\u8ba9 Coq \u62d2\u7edd\u3002\uff08\u5982\u679c\u60a8\u51b3\u5b9a\u5c06\u8fd9\u4e2a\u53ef\u9009
    \u7ec3\u4e60\u4f5c\u4e3a\u4f5c\u4e1a\uff0c\u8bf7\u786e\u4fdd\u60a8\u5c06\u60a8\u7684\u89e3\u7b54\u6ce8\u91ca\u6389\u4ee5\u9632\u6b62 Coq \u62d2\u7edd\u6267\u884c\u6574\u4e2a\u6587\u4ef6\u3002\uff09 *)

(** Fixpoint foo (n : nat) : nat :=
  match n with
  | O => foo(S O)
  | S n' => foo(n')
  end. **)

(* ################################################################# *)
(** * \u66f4\u591a\u7ec3\u4e60 *)

(** Each SF chapter comes with a tester file (e.g.  [BasicsTest.v]),
    containing scripts that check most of the exercises. You can run
    [make BasicsTest.vo] in a terminal and check its output to make
    sure you didn't miss anything. *)

(** **** \u7ec3\u4e60\uff1a1 \u661f, standard (identity_fn_applied_twice) 

    \u7528\u4f60\u5b66\u8fc7\u7684\u7b56\u7565\u8bc1\u660e\u4ee5\u4e0b\u5173\u4e8e\u5e03\u5c14\u51fd\u6570\u7684\u5b9a\u7406\u3002 *)

Theorem identity_fn_applied_twice :
  forall (f : bool -> bool),
  (forall (x : bool), f x = x) ->
  forall (b : bool), f (f b) = b.
Proof.
  intros f.
  intros H.
  intros b.
  rewrite <- H.
  rewrite <- H.
  reflexivity.
Qed.
(** [] *)

(** **** \u7ec3\u4e60\uff1a1 \u661f, standard (negation_fn_applied_twice) 

    \u73b0\u5728\u58f0\u660e\u5e76\u8bc1\u660e\u5b9a\u7406 [negation_fn_applied_twice]\uff0c\u4e0e\u4e0a\u4e00\u4e2a\u7c7b\u4f3c\uff0c
    \u4f46\u662f\u7b2c\u4e8c\u4e2a\u524d\u63d0\u8bf4\u660e\u51fd\u6570 [f] \u6709 [f x = negb x] \u7684\u6027\u8d28\u3002 *)
Theorem negation_fn_applied_twice :
  forall (f : bool -> bool),
  (forall (x : bool), f x = negb x) ->
  forall (b : bool), f (f b) = b.

Proof.
  intros f.
  intros H.
  intros b.
  rewrite -> H.
  rewrite -> H.
  destruct b as [].
  - reflexivity.
  - reflexivity.

Qed.

(* \u8bf7\u52ff\u4fee\u6539\u4e0b\u9762\u8fd9\u4e00\u884c\uff1a *)
Definition manual_grade_for_negation_fn_applied_twice : option (nat*string) := None.
(** (The last definition is used by the autograder.)

    [] *)

(** **** \u7ec3\u4e60\uff1a3 \u661f, standard, optional (andb_eq_orb) 

    \u8bf7\u8bc1\u660e\u4e0b\u5217\u5b9a\u7406\u3002\uff08\u63d0\u793a\uff1a\u6b64\u5b9a\u7406\u7684\u8bc1\u660e\u53ef\u80fd\u4f1a\u6709\u70b9\u68d8\u624b\uff0c\u53d6\u51b3\u4e8e\u4f60\u5982\u4f55\u8bc1\u660e\u5b83\u3002
    \u6216\u8bb8\u4f60\u9700\u8981\u5148\u8bc1\u660e\u4e00\u5230\u4e24\u4e2a\u8f85\u52a9\u5f15\u7406\u3002\u6216\u8005\uff0c\u4f60\u8981\u8bb0\u5f97\u672a\u5fc5\u8981\u540c\u65f6\u5f15\u5165\u6240\u6709\u524d\u63d0\u3002\uff09 *)

Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Proof.
  intros [] [].
  - simpl. intros H. reflexivity.
  - simpl. intros H. discriminate.
  - simpl. intros H. discriminate.
  - simpl. intros H. reflexivity. Qed.
(** [] *)

(** **** \u7ec3\u4e60\uff1a3 \u661f, standard (binary) 

    
    \u6211\u4eec\u53ef\u4ee5\u5c06\u5bf9\u4e8e\u81ea\u7136\u6570\u7684\u4e00\u8fdb\u5236\u8868\u793a\u63a8\u5e7f\u6210\u66f4\u9ad8\u6548\u7684\u4e8c\u8fdb\u5236\u6570\u8868\u8fbe\u65b9\u5f0f\u3002
    \u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u770b\u6210\u4e00\u4e2a\u7531 [A] \u6784\u9020\u5b50\u548c [B] \u6784\u9020\u5b50
    \u7ec4\u6210\u7684\u5e8f\u5217\uff08\u5b83\u4eec\u5206\u522b\u8868\u793a 0 \u548c 1\uff09\uff0c\u800c\u8fd9\u4e2a\u5e8f\u5217\u7684\u7ed3\u675f\u7b26\u4e3a [Z]\u3002
    \u7c7b\u4f3c\u7684\uff0c\u4e00\u4e2a\u6570\u7684\u4e00\u8fdb\u5236\u8868\u793a\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u7531 [S] \u6784\u9020\u5b50\u7ec4\u6210\uff0c\u5e76\u7531 [O] 
    \u6784\u9020\u5b50\u7ed3\u675f\u7684\u5e8f\u5217\u3002 * )

    For example:

        decimal            binary                           unary
           0                   Z                              O
           1                 B Z                            S O
           2              A (B Z)                        S (S O)
           3              B (B Z)                     S (S (S O))
           4           A (A (B Z))                 S (S (S (S O)))
           5           B (A (B Z))              S (S (S (S (S O))))
           6           A (B (B Z))           S (S (S (S (S (S O)))))
           7           B (B (B Z))        S (S (S (S (S (S (S O))))))
           8        A (A (A (B Z)))    S (S (S (S (S (S (S (S O)))))))

    \u6ce8\u610f\u5230\u5728\u4e0a\u9762\u7684\u8868\u793a\u4e2d\uff0c\u4e8c\u8fdb\u5236\u6570\u7684\u4f4e\u4f4d\u88ab\u5199\u5728\u5de6\u8fb9\u800c\u9ad8\u4f4d\u5199\u5728\u53f3\u8fb9\u3002
   \uff08\u4e0e\u901a\u5e38\u7684\u4e8c\u8fdb\u5236\u5199\u6cd5\u76f8\u53cd\uff0c\u8fd9\u79cd\u5199\u6cd5\u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u8bc1\u660e\u4e2d\u66f4\u597d\u7684\u64cd\u4f5c\u4ed6\u4eec\u3002\uff09 *)

Inductive bin : Type :=
  | Z
  | A (n : bin)
  | B (n : bin).

(** \u8865\u5168\u4e0b\u9762\u4e8c\u8fdb\u5236\u81ea\u589e\u51fd\u6570 [incr] \u7684\u5b9a\u4e49\u3002\u5e76\u4e14\u8865\u5168\u4e8c\u8fdb\u5236\u6570\u4e0e\u4e00\u8fdb\u5236\u81ea\u7136\u6570\u8f6c\u6362\u7684
    \u51fd\u6570 [bin_to_nat]\u3002 *)

Fixpoint incr (m:bin) : bin :=
  match m with
  | Z => B Z
  | B Z => A (B Z)
  | A m' => B m'
  | B m' => A (incr m')
  end.

Fixpoint bin_to_nat (m:bin) : nat := 
  match m with 
  | Z => O
  | B Z => S O
  | A m' =>  plus (bin_to_nat m') (bin_to_nat m')
  | B m' => S (plus (bin_to_nat m') (bin_to_nat m'))
  end.
  

(** \u4e0b\u9762\u8fd9\u4e9b\u9488\u5bf9\u5355\u589e\u51fd\u6570\u548c\u4e8c\u8fdb\u5236\u8f6c\u6362\u51fd\u6570\u7684\u201c\u5355\u5143\u6d4b\u8bd5\u201d\u53ef\u4ee5\u9a8c\u7b97\u4f60\u7684\u5b9a\u4e49\u7684\u6b63\u786e\u6027\u3002
    \u5f53\u7136\uff0c\u8fd9\u4e9b\u5355\u5143\u6d4b\u8bd5\u5e76\u4e0d\u80fd\u786e\u4fdd\u4f60\u7684\u5b9a\u4e49\u5728\u6240\u6709\u8f93\u5165\u4e0b\u90fd\u662f\u6b63\u786e\u7684\uff01\u6211\u4eec\u5728\u4e0b\u4e00\u7ae0\u7684
    \u672b\u5c3e\u4f1a\u91cd\u65b0\u56de\u5230\u8fd9\u4e2a\u8bdd\u9898\u3002 *)

Example test_bin_incr1 : (incr (B Z)) = A (B Z).
Proof.
  simpl. reflexivity. Qed.

Example test_bin_incr2 : (incr (A (B Z))) = B (B Z).
Proof. simpl. reflexivity. Qed.

Example test_bin_incr3 : (incr (B (B Z))) = A (A (B Z)).
Proof. simpl. reflexivity. Qed.

Example test_bin_incr4 : bin_to_nat (A (B Z)) = 2.
Proof. simpl. reflexivity. Qed.

Example test_bin_incr5 :
        bin_to_nat (incr (B Z)) = 1 + bin_to_nat (B Z).
Proof. simpl. reflexivity. Qed.

Example test_bin_incr6 :
        bin_to_nat (incr (incr (B Z))) = 2 + bin_to_nat (B Z).
Proof. simpl. reflexivity. Qed.

(** [] *)

(* 2022-03-14 05:26:55 (UTC+00) *)
