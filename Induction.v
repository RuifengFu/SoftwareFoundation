(** * Induction: \u5f52\u7eb3\u8bc1\u660e *)

(** \u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u628a\u4e0a\u4e00\u7ae0\u4e2d\u6240\u6709\u7684\u5b9a\u4e49\u90fd\u5bfc\u5165\u8fdb\u6765\uff1a *)

From LF Require Export Basics.

(** For the [Require Export] to work, Coq needs to be able to
    find a compiled version of [Basics.v], called [Basics.vo], in a directory
    associated with the prefix [LF].  This file is analogous to the [.class]
    files compiled from [.java] source files and the [.o] files compiled from
    [.c] files.

    First create a file named [_CoqProject] containing the following line
    (if you obtained the whole volume "Logical Foundations" as a single
    archive, a [_CoqProject] should already exist and you can skip this step):

      [-Q . LF]

    This maps the current directory ("[.]", which contains [Basics.v],
    [Induction.v], etc.) to the prefix (or "logical directory") "[LF]".
    PG and CoqIDE read [_CoqProject] automatically, so they know to where to
    look for the file [Basics.vo] corresponding to the library [LF.Basics].

    Once [_CoqProject] is thus created, there are various ways to build
    [Basics.vo]:

     - In Proof General: The compilation can be made to happen automatically
       when you submit the [Require] line above to PG, by setting the emacs
       variable [coq-compile-before-require] to [t].

     - In CoqIDE: Open [Basics.v]; then, in the "Compile" menu, click
       on "Compile Buffer".

     - From the command line: Generate a [Makefile] using the [coq_makefile]
       utility, that comes installed with Coq (if you obtained the whole
       volume as a single archive, a [Makefile] should already exist
       and you can skip this step):

         [coq_makefile -f _CoqProject *.v -o Makefile]

       Note: You should rerun that command whenever you add or remove Coq files
       to the directory.

       Then you can compile [Basics.v] by running [make] with the corresponding
       [.vo] file as a target:

         [make Basics.vo]

       All files in the directory can be compiled by giving no arguments:

         [make]

       Under the hood, [make] uses the Coq compiler, [coqc].  You can also
       run [coqc] directly:

         [coqc -Q . LF Basics.v]

       But [make] also calculates dependencies between source files to compile
       them in the right order, so [make] should generally be prefered over
       explicit [coqc].

    \u5982\u679c\u4f60\u9047\u5230\u4e86\u95ee\u9898\uff08\u4f8b\u5982\uff0c\u7a0d\u540e\u4f60\u53ef\u80fd\u4f1a\u5728\u672c\u6587\u4ef6\u4e2d\u9047\u5230\u7f3a\u5c11\u6807\u8bc6\u7b26\u7684\u63d0\u793a\uff09\uff0c
    \u90a3\u53ef\u80fd\u662f\u56e0\u4e3a\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e Coq \u7684\u201c\u52a0\u8f7d\u8def\u5f84\u201d\u3002\u6307\u4ee4 [Print LoadPath.]
    \u80fd\u5e2e\u4f60\u7406\u6e05\u8fd9\u7c7b\u95ee\u9898\u3002

    \u7279\u522b\u662f\uff0c\u5982\u679c\u4f60\u770b\u5230\u4e86\u50cf\u8fd9\u6837\u7684\u4fe1\u606f\uff1a

        [Compiled library Foo makes inconsistent assumptions over
        library Bar]

    check whether you have multiple installations of Coq on your machine.
    It may be that commands (like [coqc]) that you execute in a terminal
    window are getting a different version of Coq than commands executed by
    Proof General or CoqIDE.

    - Another common reason is that the library [Bar] was modified and
      recompiled without also recompiling [Foo] which depends on it.  Recompile
      [Foo], or everything if too many files are affected.  (Using the third
      solution above: [make clean; make].)

    \u518d\u7ed9 CoqIDE \u7528\u6237\u4e00\u70b9\u6280\u5de7\uff1a\u5982\u679c\u4f60\u770b\u5230\u4e86 [Error: Unable to locate
    library Basics]\uff0c\u90a3\u4e48\u53ef\u80fd\u7684\u539f\u56e0\u662f\u7528 _'CoqIDE'_ \u7f16\u8bd1\u7684\u4ee3\u7801\u548c\u5728\u6307\u4ee4\u884c\u7528
    _'coqc'_ \u7f16\u8bd1\u7684\u4e0d\u4e00\u81f4\u3002\u8fd9\u901a\u5e38\u5728\u7cfb\u7edf\u4e2d\u5b89\u88c5\u4e86\u4e24\u4e2a\u4e0d\u517c\u5bb9\u7684 [coqc] \u65f6\u53d1\u751f
    \uff08\u4e00\u4e2a\u4e0e CoqIDE \u5173\u8054\uff0c\u53e6\u4e00\u4e2a\u4e0e\u6307\u4ee4\u884c\u7684 [coqc] \u5173\u8054\uff09\u3002\u8fd9\u79cd\u60c5\u51b5\u7684\u53d8\u901a\u65b9\u6cd5
    \u5c31\u662f\u53ea\u4f7f\u7528 CoqIDE \u6765\u7f16\u8bd1\uff08\u5373\u4ece\u83dc\u5355\u4e2d\u9009\u62e9\u201cmake\u201d\uff09\u5e76\u5b8c\u5168\u907f\u514d\u4f7f\u7528 [coqc]\u3002 *)

(* ################################################################# *)
(** * \u5f52\u7eb3\u6cd5\u8bc1\u660e *)

(** \u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4e2d\u901a\u8fc7\u57fa\u4e8e\u5316\u7b80\u7684\u7b80\u5355\u8bba\u636e\u8bc1\u660e\u4e86 [0] \u662f [+] \u7684\u5de6\u5e7a\u5143\u3002
    \u6211\u4eec\u4e5f\u89c2\u5bdf\u5230\uff0c\u5f53\u6211\u4eec\u6253\u7b97\u8bc1\u660e [0] \u4e5f\u662f [+] \u7684 _'\u53f3'_ \u5e7a\u5143\u65f6... *)

Theorem plus_n_O_firsttry : forall n:nat,
  n = n + 0.

(** ...\u4e8b\u60c5\u5c31\u6ca1\u8fd9\u4e48\u7b80\u5355\u4e86\u3002\u53ea\u5e94\u7528 [reflexivity] \u7684\u8bdd\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a [n + 0]
    \u4e2d\u7684 [n] \u662f\u4efb\u610f\u672a\u77e5\u6570\uff0c\u6240\u4ee5\u5728 [+] \u7684\u5b9a\u4e49\u4e2d [match] \u5339\u914d\u65e0\u6cd5\u88ab\u5316\u7b80\u3002 *)

Proof.
  intros n.
  simpl. (* Does nothing! *)
Abort.

(** \u5373\u4fbf\u7528 [destruct n] \u5206\u7c7b\u8ba8\u8bba\u4e5f\u4e0d\u4f1a\u6709\u6240\u6539\u5584\uff1a\u8bda\u7136\uff0c\u6211\u4eec\u80fd\u591f\u8f7b\u6613\u5730\u8bc1\u660e [n = 0]
    \u65f6\u7684\u60c5\u51b5\uff1b\u4f46\u5728\u8bc1\u660e\u5bf9\u4e8e\u67d0\u4e9b [n'] \u800c\u8a00 [n = S n'] \u65f6\uff0c\u6211\u4eec\u53c8\u4f1a\u9047\u5230\u548c\u6b64\u524d\u76f8\u540c\u7684\u95ee\u9898\u3002 *)

Theorem plus_n_O_secondtry : forall n:nat,
  n = n + 0.
Proof.
  intros n. destruct n as [| n'] eqn:E.
  - (* n = 0 *)
    reflexivity. (* \u867d\u7136\u76ee\u524d\u8fd8\u6ca1\u5565\u95ee\u9898... *)
  - (* n = S n' *)
    simpl.       (* ...\u4e0d\u8fc7\u6211\u4eec\u53c8\u5361\u5728\u8fd9\u513f\u4e86 *)
Abort.

(** \u867d\u7136\u8fd8\u53ef\u4ee5\u7528 [destruct n'] \u518d\u63a8\u8fdb\u4e00\u6b65\uff0c\u4f46\u7531\u4e8e [n] \u53ef\u4ee5\u4efb\u610f\u5927\uff0c
    \u5982\u679c\u7167\u8fd9\u4e2a\u601d\u8def\u7ee7\u7eed\u8bc1\u660e\u7684\u8bdd\uff0c\u6211\u4eec\u6c38\u8fdc\u4e5f\u8bc1\u4e0d\u5b8c\u3002 *)

(** \u4e3a\u4e86\u8bc1\u660e\u8fd9\u79cd\u5173\u4e8e\u6570\u5b57\u3001\u5217\u8868\u7b49\u5f52\u7eb3\u5b9a\u4e49\u7684\u96c6\u5408\u7684\u6709\u8da3\u4e8b\u5b9e\uff0c
    \u6211\u4eec\u901a\u5e38\u9700\u8981\u4e00\u4e2a\u66f4\u5f3a\u5927\u7684\u63a8\u7406\u539f\u7406\uff1a_'\u5f52\u7eb3'_\u3002

    \u56de\u60f3\u4e00\u4e0b _'\u81ea\u7136\u6570\u7684\u5f52\u7eb3\u6cd5\u5219'_\uff0c\u4f60\u4e5f\u8bb8\u66fe\u5728\u9ad8\u4e2d\u7684\u6570\u5b66\u8bfe\u4e0a\uff0c\u5728\u67d0\u95e8\u79bb\u6563\u6570\u5b66\u8bfe\u4e0a\u6216
    \u5728\u5176\u5b83\u7c7b\u4f3c\u7684\u8bfe\u4e0a\u5b66\u5230\u8fc7\u5b83\uff1a\u82e5 [P(n)] \u4e3a\u5173\u4e8e\u81ea\u7136\u6570\u7684\u547d\u9898\uff0c\u800c\u5f53\u6211\u4eec\u60f3\u8981\u8bc1\u660e [P]
    \u5bf9\u4e8e\u6240\u6709\u81ea\u7136\u6570 [n] \u90fd\u6210\u7acb\u65f6\uff0c\u53ef\u4ee5\u8fd9\u6837\u63a8\u7406\uff1a
         - \u8bc1\u660e [P(O)] \u6210\u7acb\uff1b
         - \u8bc1\u660e\u5bf9\u4e8e\u4efb\u4f55 [n']\uff0c\u82e5 [P(n')] \u6210\u7acb\uff0c\u90a3\u4e48 [P(S n')] \u4e5f\u6210\u7acb\u3002
         - \u6700\u540e\u5f97\u51fa [P(n)] \u5bf9\u4e8e\u6240\u6709 [n] \u90fd\u6210\u7acb\u7684\u7ed3\u8bba\u3002

    \u5728 Coq \u4e2d\u7684\u6b65\u9aa4\u4e5f\u4e00\u6837\uff1a\u6211\u4eec\u4ee5\u8bc1\u660e [P(n)] \u5bf9\u4e8e\u6240\u6709 [n] \u90fd\u6210\u7acb\u7684\u76ee\u6807\u5f00\u59cb\uff0c
    \u7136\u540e\uff08\u901a\u8fc7\u5e94\u7528 [induction] \u7b56\u7565\uff09\u628a\u5b83\u5206\u4e3a\u4e24\u4e2a\u5b50\u76ee\u6807\uff1a\u4e00\u4e2a\u662f\u6211\u4eec\u5fc5\u987b\u8bc1\u660e
    [P(O)] \u6210\u7acb\uff0c\u53e6\u4e00\u4e2a\u662f\u6211\u4eec\u5fc5\u987b\u8bc1\u660e [P(n') -> P(S n')]\u3002\u4e0b\u9762\u5c31\u662f\u5bf9\u8be5\u5b9a\u7406\u7684\u7528\u6cd5\uff1a *)

Theorem plus_n_O : forall n:nat, n = n + 0.
Proof.
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)    reflexivity.
  - (* n = S n' *) simpl. rewrite <- IHn'. reflexivity.  Qed.

(** \u548c [destruct] \u4e00\u6837\uff0c[induction] \u7b56\u7565\u4e5f\u80fd\u901a\u8fc7 [as...] \u4ece\u53e5\u4e3a\u5f15\u5165\u5230
    \u5b50\u76ee\u6807\u4e2d\u7684\u53d8\u91cf\u6307\u5b9a\u540d\u5b57\u3002\u7531\u4e8e\u8fd9\u6b21\u6709\u4e24\u4e2a\u5b50\u76ee\u6807\uff0c\u56e0\u6b64 [as...] \u6709\u4e24\u90e8\u5206\uff0c\u7528 [|]
    \u9694\u5f00\u3002\uff08\u4e25\u683c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565 [as...] \u4ece\u53e5\uff0cCoq \u4f1a\u4e3a\u5b83\u4eec\u9009\u62e9\u540d\u5b57\u3002
    \u7136\u800c\u5728\u5b9e\u8df5\u4e2d\u8fd9\u6837\u4e0d\u597d\uff0c\u56e0\u4e3a\u8ba9 Coq \u81ea\u884c\u9009\u62e9\u540d\u5b57\u7684\u8bdd\u66f4\u5bb9\u6613\u5bfc\u81f4\u7406\u89e3\u4e0a\u7684\u56f0\u96be\u3002\uff09

    \u5728\u7b2c\u4e00\u4e2a\u5b50\u76ee\u6807\u4e2d [n] \u88ab [0] \u6240\u53d6\u4ee3\u3002\u7531\u4e8e\u6ca1\u6709\u65b0\u7684\u53d8\u91cf\u4f1a\u88ab\u5f15\u5165\uff0c\u56e0\u6b64 [as ...]
    \u5b57\u53e5\u7684\u7b2c\u4e00\u90e8\u5206\u4e3a\u7a7a\uff1b\u800c\u5f53\u524d\u7684\u76ee\u6807\u4f1a\u53d8\u6210 [0 + 0 = 0]\uff1a\u4f7f\u7528\u5316\u7b80\u5c31\u80fd\u5f97\u5230\u6b64\u7ed3\u8bba\u3002

    \u5728\u7b2c\u4e8c\u4e2a\u5b50\u76ee\u6807\u4e2d\uff0c[n] \u88ab [S n'] \u6240\u53d6\u4ee3\uff0c\u800c\u5bf9 [n'] \u7684\u5f52\u7eb3\u5047\u8bbe\uff08Inductive
    Hypothesis\uff09\uff0c\u5373 [n' + 0 = n'] \u5219\u4ee5 [IHn'] \u4e3a\u540d\u88ab\u6dfb\u52a0\u5230\u4e86\u4e0a\u4e0b\u6587\u4e2d\u3002
    \u8fd9\u4e24\u4e2a\u540d\u5b57\u5728 [as...] \u4ece\u53e5\u7684\u7b2c\u4e8c\u90e8\u5206\u4e2d\u6307\u5b9a\u3002\u5728\u6b64\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5f85\u8bc1\u76ee\u6807\u53d8\u6210\u4e86
    [(S n') + 0 = S n']\uff1b\u5b83\u53ef\u88ab\u5316\u7b80\u4e3a [S (n' + 0) = S n']\uff0c\u800c\u6b64\u7ed3\u8bba\u53ef\u901a\u8fc7
    [IHn'] \u5f97\u51fa\u3002 *)

Theorem minus_diag : forall n,
  minus n n = 0.
Proof.
  (* \u8bfe\u4e0a\u5df2\u5b8c\u6210 *)
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)
    simpl. reflexivity.
  - (* n = S n' *)
    simpl. rewrite -> IHn'. reflexivity.  Qed.

(** \uff08\u5176\u5b9e\u5728\u8fd9\u4e9b\u8bc1\u660e\u4e2d\u6211\u4eec\u5e76\u4e0d\u9700\u8981 [intros]\uff1a\u5f53 [induction]
    \u7b56\u7565\u88ab\u5e94\u7528\u5230\u5305\u542b\u91cf\u5316\u53d8\u91cf\u7684\u76ee\u6807\u4e2d\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u5c06\u9700\u8981\u7684\u53d8\u91cf\u79fb\u5230\u4e0a\u4e0b\u6587\u4e2d\u3002\uff09 *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard, recommended (basic_induction) 

    \u7528\u5f52\u7eb3\u6cd5\u8bc1\u660e\u4ee5\u4e0b\u547d\u9898\u3002\u4f60\u53ef\u80fd\u9700\u8981\u4e4b\u524d\u7684\u8bc1\u660e\u7ed3\u679c\u3002 *)

Theorem mult_0_r : forall n:nat,
  n * 0 = 0.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem plus_n_Sm : forall n m : nat,
  S (n + m) = n + (S m).
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem plus_comm : forall n m : nat,
  n + m = m + n.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem plus_assoc : forall n m p : nat,
  n + (m + p) = (n + m) + p.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard (double_plus) 

    \u8003\u8651\u4ee5\u4e0b\u51fd\u6570\uff0c\u5b83\u5c06\u5176\u53c2\u6570\u4e58\u4ee5\u4e8c\uff1a *)

Fixpoint double (n:nat) :=
  match n with
  | O => O
  | S n' => S (S (double n'))
  end.

(** \u7528\u5f52\u7eb3\u6cd5\u8bc1\u660e\u4ee5\u4e0b\u5173\u4e8e [double] \u7684\u7b80\u5355\u4e8b\u5b9e\uff1a *)

Lemma double_plus : forall n, double n = n + n .
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard, optional (evenb_S) 

    \u6211\u4eec\u7684 [evenb n] \u5b9a\u4e49\u5bf9 [n - 2] \u7684\u9012\u5f52\u8c03\u7528\u4e0d\u5927\u65b9\u4fbf\u3002\u8fd9\u8ba9\u8bc1\u660e [evenb n]
    \u65f6\u66f4\u96be\u5bf9 [n] \u8fdb\u884c\u5f52\u7eb3\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5173\u4e8e [n - 2] \u7684\u5f52\u7eb3\u5047\u8bbe\u3002
    \u4ee5\u4e0b\u5f15\u7406\u8d4b\u4e88\u4e86 [evenb (S n)] \u53e6\u4e00\u4e2a\u7279\u5f81\uff0c\u4f7f\u5176\u5728\u5f52\u7eb3\u65f6\u80fd\u591f\u66f4\u597d\u5730\u5de5\u4f5c\uff1a *)

Theorem evenb_S : forall n : nat,
  evenb (S n) = negb (evenb n).
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(** **** \u7ec3\u4e60\uff1a1 \u661f, standard, optional (destruct_induction) 

    \u8bf7\u7b80\u8981\u8bf4\u660e\u4e00\u4e0b [destruct] \u7b56\u7565\u548c [induction] \u7b56\u7565\u4e4b\u95f4\u7684\u533a\u522b\u3002

(* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *)
*)

(* \u8bf7\u52ff\u4fee\u6539\u4e0b\u9762\u8fd9\u4e00\u884c\uff1a *)
Definition manual_grade_for_destruct_induction : option (nat*string) := None.
(** [] *)

(* ################################################################# *)
(** * \u8bc1\u660e\u91cc\u7684\u8bc1\u660e *)

(** \u548c\u5728\u975e\u5f62\u5f0f\u5316\u7684\u6570\u5b66\u4e2d\u4e00\u6837\uff0c\u5728 Coq \u4e2d\uff0c\u5927\u7684\u8bc1\u660e\u901a\u5e38\u4f1a\u88ab\u5206\u4e3a\u4e00\u7cfb\u5217\u5b9a\u7406\uff0c
    \u540e\u9762\u7684\u5b9a\u7406\u5f15\u7528\u4e4b\u524d\u7684\u5b9a\u7406\u3002\u4f46\u6709\u65f6\u4e00\u4e2a\u8bc1\u660e\u4f1a\u9700\u8981\u4e00\u4e9b\u7e41\u6742\u7410\u788e\u7684\u4e8b\u5b9e\uff0c
    \u800c\u8fd9\u4e9b\u4e8b\u5b9e\u7f3a\u4e4f\u666e\u904d\u6027\uff0c\u4ee5\u81f3\u4e8e\u6211\u4eec\u751a\u81f3\u90fd\u4e0d\u5e94\u8be5\u7ed9\u5b83\u4eec\u5355\u72ec\u53d6\u9876\u7ea7\u7684\u540d\u5b57\u3002
    \u6b64\u65f6\uff0c\u5982\u679c\u80fd\u4ec5\u5728\u9700\u8981\u65f6\u7b80\u5355\u5730\u9648\u8ff0\u5e76\u7acb\u5373\u8bc1\u660e\u6240\u9700\u7684\u201c\u5b50\u5b9a\u7406\u201d\u5c31\u4f1a\u5f88\u65b9\u4fbf\u3002
    \u6211\u4eec\u53ef\u4ee5\u7528 [assert] \u7b56\u7565\u6765\u505a\u5230\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4e4b\u524d\u5bf9 [mult_0_plus]
    \u5b9a\u7406\u7684\u8bc1\u660e\u5f15\u7528\u4e86\u524d\u4e00\u4e2a\u540d\u4e3a [plus_O_n] \u7684\u5b9a\u7406\uff0c\u800c\u6211\u4eec\u53ea\u9700\u5185\u8054\u4f7f\u7528 [assert]
    \u5c31\u80fd\u9648\u8ff0\u5e76\u8bc1\u660e [plus_O_n]\uff1a *)

Theorem mult_0_plus' : forall n m : nat,
  (0 + n) * m = n * m.
Proof.
  intros n m.
  assert (H: 0 + n = n). { reflexivity. }
  rewrite -> H.
  reflexivity.  Qed.

(** [assert] \u7b56\u7565\u5f15\u5165\u4e24\u4e2a\u5b50\u76ee\u6807\u3002\u7b2c\u4e00\u4e2a\u4e3a\u65ad\u8a00\u672c\u8eab\uff0c\u901a\u8fc7\u7ed9\u5b83\u52a0\u524d\u7f00 [H:]
    \u6211\u4eec\u5c06\u8be5\u65ad\u8a00\u547d\u540d\u4e3a [H]\u3002\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528 [as] \u6765\u547d\u540d\u8be5\u65ad\u8a00\uff0c\u4e0e\u4e4b\u524d\u7684
    [destruct] \u548c [induction] \u4e00\u6837\u3002\u4f8b\u5982 [assert (0 + n = n) as H]\u3002\uff09
    \u6ce8\u610f\u6211\u4eec\u7528\u82b1\u62ec\u53f7 [{ ... }] \u5c06\u8be5\u65ad\u8a00\u7684\u8bc1\u660e\u62ec\u4e86\u8d77\u6765\u3002\u8fd9\u6837\u4e0d\u4ec5\u65b9\u4fbf\u9605\u8bfb\uff0c
    \u540c\u65f6\u4e5f\u80fd\u5728\u4ea4\u4e92\u4f7f\u7528 Coq \u65f6\u66f4\u5bb9\u6613\u770b\u51fa\u8be5\u5b50\u76ee\u6807\u4f55\u65f6\u5f97\u8bc1\u3002\u7b2c\u4e8c\u4e2a\u76ee\u6807
    \u4e0e\u4e4b\u524d\u6267\u884c [assert] \u65f6\u4e00\u6837\uff0c\u53ea\u662f\u8fd9\u6b21\u5728\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u6709\u4e86\u540d\u4e3a [H] \u7684\u524d\u63d0
    [0 + n = n]\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c[assert] \u751f\u6210\u7684\u7b2c\u4e00\u4e2a\u5b50\u76ee\u6807\u662f\u6211\u4eec\u5fc5\u987b\u8bc1\u660e\u7684\u5df2\u65ad\u8a00\u7684\u4e8b\u5b9e\uff0c
    \u800c\u5728\u7b2c\u4e8c\u4e2a\u5b50\u76ee\u6807\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5df2\u65ad\u8a00\u7684\u4e8b\u5b9e\u5728\u4e00\u5f00\u59cb\u5c1d\u8bd5\u8bc1\u660e\u7684\u4e8b\u60c5\u4e0a\u53d6\u5f97\u8fdb\u5c55\u3002 *)

(** \u53e6\u4e00\u4e2a [assert] \u7684\u4f8b\u5b50... *)

(** \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u5982\u6211\u4eec\u8981\u8bc1\u660e [(n + m) + (p + q) = (m + n) + (p + q)]\u3002
    [=] \u4e24\u8fb9\u552f\u4e00\u4e0d\u540c\u7684\u5c31\u662f\u5185\u5c42\u7b2c\u4e00\u4e2a\u5b50\u5f0f\u4e2d [+] \u7684\u53c2\u6570 [m] \u548c [n] \u4ea4\u6362\u4e86\u4f4d\u7f6e\uff0c
    \u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5\u7528\u52a0\u6cd5\u4ea4\u6362\u5f8b\uff08[plus_comm]\uff09\u6765\u6539\u5199\u5b83\u3002\u7136\u800c\uff0c
    [rewrite] \u7b56\u7565\u5e76\u4e0d\u77e5\u9053\u5e94\u8be5\u4f5c\u7528\u5728 _'\u54ea\u91cc'_\u3002\u672c\u547d\u9898\u4e2d [+] \u7528\u4e86\u4e09\u6b21 \uff0c
    \u7ed3\u679c [rewrite -> plus_comm] \u53ea\u5bf9 _'\u6700\u5916\u5c42'_ \u8d77\u4e86\u4f5c\u7528... *)

Theorem plus_rearrange_firsttry : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  (* \u6211\u4eec\u53ea\u9700\u8981\u5c06 (m + n) \u4ea4\u6362\u4e3a (n + m)... \u770b\u8d77\u6765 plus_comm \u80fd\u641e\u5b9a\uff01*)
  rewrite -> plus_comm.
  (* \u641e\u4e0d\u5b9a... Coq \u9009\u9519\u4e86\u8981\u6539\u5199\u7684\u52a0\u6cd5\uff01 *)
Abort.

(** \u4e3a\u4e86\u5728\u9700\u8981\u7684\u5730\u65b9\u4f7f\u7528 [plus_comm]\uff0c\u6211\u4eec\u53ef\u4ee5\uff08\u4e3a\u6b64\u8fd9\u91cc\u8ba8\u8bba\u7684 [m] \u548c [n]\uff09
    \u5f15\u5165\u4e00\u4e2a\u5c40\u90e8\u5f15\u7406\u6765\u9648\u8ff0 [n + m = m + n]\uff0c\u4e4b\u540e\u7528 [plus_comm] \u8bc1\u660e\u5b83\uff0c
    \u5e76\u7528\u5b83\u6765\u8fdb\u884c\u671f\u671b\u7684\u6539\u5199\u3002 *)

Theorem plus_rearrange : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  assert (H: n + m = m + n).
  { rewrite -> plus_comm. reflexivity. }
  rewrite -> H. reflexivity.  Qed.

(* ################################################################# *)
(** * \u5f62\u5f0f\u5316\u8bc1\u660e vs. \u975e\u5f62\u5f0f\u5316\u8bc1\u660e *)

(** \u201c_'\u975e\u5f62\u5f0f\u5316\u8bc1\u660e\u662f\u7b97\u6cd5\uff0c\u5f62\u5f0f\u5316\u8bc1\u660e\u662f\u4ee3\u7801\u3002'_\u201d *)

(** \u6570\u5b66\u58f0\u660e\u7684\u6210\u529f\u8bc1\u660e\u7531\u4ec0\u4e48\u6784\u6210\uff1f\u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u56f0\u6270\u4e86\u54f2\u5b66\u5bb6\u6570\u5343\u5e74\uff0c
    \u4e0d\u8fc7\u8fd9\u513f\u6709\u4e2a\u8fd8\u7b97\u51d1\u5408\u7684\u5b9a\u4e49\uff1a\u6570\u5b66\u547d\u9898 [P] \u7684\u8bc1\u660e\u662f\u4e00\u6bb5\u4e66\u9762\uff08\u6216\u53e3\u5934\uff09\u7684\u6587\u672c\uff0c
    \u5b83\u5bf9 [P] \u7684\u771f\u5b9e\u6027\u8fdb\u884c\u65e0\u53ef\u8fa9\u9a73\u7684\u8bba\u8bc1\uff0c\u9010\u6b65\u8bf4\u670d\u8bfb\u8005\u6216\u542c\u8005\u4f7f\u5176\u786e\u4fe1 [P] \u4e3a\u771f\u3002
    \u4e5f\u5c31\u662f\u8bf4\uff0c\u8bc1\u660e\u662f\u4e00\u79cd\u4ea4\u6d41\u884c\u4e3a\u3002

    \u4ea4\u6d41\u6d3b\u52a8\u4f1a\u6d89\u53ca\u4e0d\u540c\u7c7b\u578b\u7684\u8bfb\u8005\u3002\u4e00\u65b9\u9762\uff0c\u201c\u8bfb\u8005\u201d\u53ef\u4ee5\u662f\u50cf Coq \u8fd9\u6837\u7684\u7a0b\u5e8f\uff0c
    \u6b64\u65f6\u704c\u8f93\u7684\u201c\u786e\u4fe1\u201d\u662f [P] \u80fd\u591f\u4ece\u4e00\u4e2a\u786e\u5b9a\u7684\uff0c\u7531\u5f62\u5f0f\u5316\u903b\u8f91\u89c4\u5219\u7ec4\u6210\u7684\u96c6\u5408\u4e2d
    \u673a\u68b0\u5730\u63a8\u5bfc\u51fa\u6765\uff0c\u800c\u8bc1\u660e\u5219\u662f\u6307\u5bfc\u7a0b\u5e8f\u68c0\u9a8c\u8fd9\u4e00\u4e8b\u5b9e\u7684\u65b9\u6cd5\u3002\u8fd9\u79cd\u65b9\u6cd5\u5c31\u662f
    _'\u5f62\u5f0f\u5316'_ \u8bc1\u660e\u3002

    \u53e6\u4e00\u65b9\u9762\uff0c\u8bfb\u8005\u4e5f\u53ef\u4ee5\u662f\u4eba\u7c7b\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8bc1\u660e\u53ef\u4ee5\u7528\u82f1\u8bed\u6216\u5176\u5b83\u81ea\u7136\u8bed\u8a00\u5199\u51fa\uff0c
    \u56e0\u6b64\u5fc5\u7136\u662f _'\u975e\u5f62\u5f0f\u5316'_ \u7684\uff0c\u6b64\u65f6\u6210\u529f\u7684\u6807\u51c6\u4e0d\u592a\u660e\u786e\u3002\u4e00\u4e2a\u201c\u6709\u6548\u7684\u201d\u8bc1\u660e\u662f\u8ba9\u8bfb\u8005
    \u76f8\u4fe1 [P]\u3002\u4f46\u540c\u4e00\u4e2a\u8bc1\u660e\u53ef\u80fd\u88ab\u5f88\u591a\u4e0d\u540c\u7684\u8bfb\u8005\u9605\u8bfb\uff0c\u5176\u4e2d\u4e00\u4e9b\u4eba\u53ef\u80fd\u4f1a\u88ab\u67d0\u79cd\u7279\u5b9a
    \u7684\u8868\u8ff0\u8bba\u8bc1\u65b9\u5f0f\u8bf4\u670d\uff0c\u800c\u5176\u4ed6\u4eba\u5219\u4e0d\u4f1a\u3002\u6709\u4e9b\u8bfb\u8005\u592a\u7231\u94bb\u725b\u89d2\u5c16\uff0c\u6216\u8005\u7f3a\u4e4f\u7ecf\u9a8c\uff0c
    \u6216\u8005\u53ea\u662f\u5355\u7eaf\u5730\u8fc7\u4e8e\u611a\u949d\uff1b\u8bf4\u670d\u4ed6\u4eec\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u7ec6\u81f4\u5165\u5fae\u5730\u8fdb\u884c\u8bba\u8bc1\u3002
    \u4e0d\u8fc7\u719f\u6089\u8fd9\u4e00\u9886\u57df\u7684\u8bfb\u8005\u53ef\u80fd\u4f1a\u89c9\u5f97\u6240\u6709\u7ec6\u8282\u90fd\u592a\u8fc7\u7e41\u7410\uff0c\u8ba9\u4ed6\u4eec\u65e0\u6cd5\u6293\u4f4f
    \u6574\u4f53\u7684\u601d\u8def\uff1b\u4ed6\u4eec\u60f3\u8981\u7684\u4e0d\u8fc7\u662f\u6293\u4f4f\u4e3b\u8981\u601d\u8def\uff0c\u56e0\u4e3a\u76f8\u5bf9\u4e8e\u4e8b\u65e0\u5de8\u7ec6\u7684\u63cf\u8ff0\u800c\u8a00\uff0c
    \u8ba9\u4ed6\u4eec\u81ea\u884c\u8865\u5145\u6240\u9700\u7ec6\u8282\u66f4\u4e3a\u5bb9\u6613\u3002\u603b\u4e4b\uff0c\u6211\u4eec\u6ca1\u6709\u4e00\u4e2a\u901a\u7528\u7684\u6807\u51c6\uff0c
    \u56e0\u4e3a\u6ca1\u6709\u4e00\u79cd\u7f16\u5199\u975e\u5f62\u5f0f\u5316\u8bc1\u660e\u7684\u65b9\u5f0f\u80fd\u591f\u8bf4\u670d\u6240\u80fd\u987e\u53ca\u7684\u6bcf\u4e00\u4e2a\u8bfb\u8005\u3002

    \u7136\u800c\u5728\u5b9e\u8df5\u4e2d\uff0c\u6570\u5b66\u5bb6\u4eec\u5df2\u7ecf\u53d1\u5c55\u51fa\u4e86\u4e00\u5957\u7528\u4e8e\u63cf\u8ff0\u590d\u6742\u6570\u5b66\u5bf9\u8c61\u7684\u7ea6\u5b9a\u548c\u4e60\u8bed\uff0c
    \u8fd9\u8ba9\u4ea4\u6d41\uff08\u81f3\u5c11\u5728\u7279\u5b9a\u7684\u793e\u533a\u5185\uff09\u53d8\u5f97\u5341\u5206\u53ef\u9760\u3002\u8fd9\u79cd\u7ea6\u5b9a\u4fd7\u6210\u7684\u4ea4\u6d41\u5f62\u5f0f\u5df2\u7136\u6210\u98ce\uff0c
    \u5b83\u4e3a\u8bc1\u660e\u7684\u597d\u574f\u7ed9\u51fa\u4e86\u6e05\u6670\u7684\u5224\u65ad\u6807\u51c6\u3002

    \u7531\u4e8e\u6211\u4eec\u5728\u672c\u8bfe\u7a0b\u4e2d\u4f7f\u7528 Coq\uff0c\u56e0\u6b64\u4f1a\u91cd\u5ea6\u4f7f\u7528\u5f62\u5f0f\u5316\u8bc1\u660e\u3002\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u6211\u4eec
    \u53ef\u4ee5\u5b8c\u5168\u5ffd\u7565\u6389\u975e\u5f62\u5f0f\u5316\u7684\u8bc1\u660e\u8fc7\u7a0b\uff01\u5f62\u5f0f\u5316\u8bc1\u660e\u5728\u5f88\u591a\u65b9\u9762\u90fd\u975e\u5e38\u6709\u7528\uff0c
    \u4e0d\u8fc7\u5b83\u4eec\u5bf9\u4eba\u7c7b\u4e4b\u95f4\u7684\u601d\u60f3\u4ea4\u6d41\u800c\u8a00 _'\u5e76\u4e0d'_ \u5341\u5206\u9ad8\u6548\u3002 *)

(** \u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u4e00\u6bb5\u52a0\u6cd5\u7ed3\u5408\u5f8b\u7684\u8bc1\u660e\uff1a *)

Theorem plus_assoc' : forall n m p : nat,
  n + (m + p) = (n + m) + p.
Proof. intros n m p. induction n as [| n' IHn']. reflexivity.
  simpl. rewrite -> IHn'. reflexivity.  Qed.

(** Coq \u5bf9\u6b64\u8868\u793a\u5341\u5206\u6ee1\u610f\u3002\u7136\u800c\u4eba\u7c7b\u5374\u5f88\u96be\u7406\u89e3\u5b83\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u6ce8\u91ca\u548c\u6807\u53f7\u8ba9\u5b83
    \u7684\u7ed3\u6784\u770b\u4e0a\u53bb\u66f4\u6e05\u6670\u4e00\u70b9... *)

Theorem plus_assoc'' : forall n m p : nat,
  n + (m + p) = (n + m) + p.
Proof.
  intros n m p. induction n as [| n' IHn'].
  - (* n = 0 *)
    reflexivity.
  - (* n = S n' *)
    simpl. rewrite -> IHn'. reflexivity.   Qed.

(** ...\u800c\u4e14\u5982\u679c\u4f60\u4e60\u60ef\u4e86 Coq\uff0c\u4f60\u53ef\u80fd\u4f1a\u5728\u8111\u888b\u91cc\u9010\u6b65\u8fc7\u4e00\u904d\u7b56\u7565\uff0c\u5e76\u60f3\u8c61\u51fa
    \u6bcf\u4e00\u5904\u4e0a\u4e0b\u6587\u548c\u76ee\u6807\u6808\u7684\u72b6\u6001\u3002\u4e0d\u8fc7\u82e5\u8bc1\u660e\u518d\u590d\u6742\u4e00\u70b9\uff0c\u90a3\u5c31\u51e0\u4e4e\u4e0d\u53ef\u80fd\u4e86\u3002

    \u4e00\u4e2a\uff08\u8fc2\u8150\u7684\uff09\u6570\u5b66\u5bb6\u53ef\u80fd\u628a\u8bc1\u660e\u5199\u6210\u8fd9\u6837\uff1a *)

(** - _'\u5b9a\u7406'_\uff1a\u5bf9\u4e8e\u4efb\u4f55 [n]\u3001[m] \u548c [p]\uff0c

      n + (m + p) = (n + m) + p.

    _'\u8bc1\u660e'_\uff1a\u5bf9 [n] \u4f7f\u7528\u5f52\u7eb3\u6cd5\u3002

    - \u9996\u5148\uff0c\u8bbe [n = 0]\u3002\u6211\u4eec\u5fc5\u987b\u8bc1\u660e

        0 + (m + p) = (0 + m) + p.

      \u6b64\u7ed3\u8bba\u53ef\u4ece [+] \u7684\u5b9a\u4e49\u76f4\u63a5\u5f97\u5230\u3002

    - \u7136\u540e\uff0c\u8bbe [n = S n']\uff0c\u5176\u4e2d

        n' + (m + p) = (n' + m) + p.

      \u6211\u4eec\u5fc5\u987b\u8bc1\u660e

        (S n') + (m + p) = ((S n') + m) + p.

      \u6839\u636e [+] \u7684\u5b9a\u4e49\uff0c\u8be5\u5f0f\u53ef\u5199\u6210

        S (n' + (m + p)) = S ((n' + m) + p),

      \u5b83\u7531\u5f52\u7eb3\u5047\u8bbe\u76f4\u63a5\u5f97\u51fa\u3002_'\u8bc1\u6bd5'_\u3002 *)

(** \u8bc1\u660e\u7684\u603b\u4f53\u5f62\u5f0f\u5927\u4f53\u7c7b\u4f3c\uff0c\u5f53\u7136\u8fd9\u5e76\u975e\u5076\u7136\uff1aCoq \u7684\u8bbe\u8ba1\u4f7f\u5176 [induction]
    \u7b56\u7565\u4f1a\u50cf\u6570\u5b66\u5bb6\u5199\u51fa\u7684\u6807\u53f7\u90a3\u6837\uff0c\u6309\u76f8\u540c\u7684\u987a\u5e8f\u751f\u6210\u76f8\u540c\u7684\u5b50\u76ee\u6807\u3002\u4f46\u5728\u7ec6\u8282\u4e0a\u5219\u6709
    \u660e\u663e\u7684\u4e0d\u540c\uff1a\u5f62\u5f0f\u5316\u8bc1\u660e\u5728\u67d0\u4e9b\u65b9\u9762\u66f4\u4e3a\u660e\u786e\uff08\u4f8b\u5982\u5bf9 [reflexivity] \u7684\u4f7f\u7528\uff09\uff0c
    \u4f46\u5728\u5176\u5b83\u65b9\u9762\u5219\u4e0d\u591f\u660e\u786e\uff08\u7279\u522b\u662f Coq \u8bc1\u660e\u4e2d\u4efb\u4f55\u4e00\u5904\u7684\u201c\u8bc1\u660e\u72b6\u6001\u201d\u90fd\u662f\u5b8c\u5168
    \u9690\u542b\u7684\uff0c\u800c\u975e\u5f62\u5f0f\u5316\u8bc1\u660e\u5219\u7ecf\u5e38\u53cd\u590d\u544a\u8bc9\u8bfb\u8005\u76ee\u524d\u8bc1\u660e\u8fdb\u884c\u7684\u72b6\u6001\uff09\u3002 *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, advanced, recommended (plus_comm_informal) 

    \u5c06\u4f60\u5bf9 [plus_comm] \u7684\u89e3\u7b54\u7ffb\u8bd1\u6210\u975e\u5f62\u5f0f\u5316\u8bc1\u660e\uff1a

    \u5b9a\u7406\uff1a\u52a0\u6cd5\u6ee1\u8db3\u4ea4\u6362\u5f8b\u3002

    Proof: (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *)
*)

(* \u8bf7\u52ff\u4fee\u6539\u4e0b\u9762\u8fd9\u4e00\u884c\uff1a *)
Definition manual_grade_for_plus_comm_informal : option (nat*string) := None.
(** [] *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard, optional (eqb_refl_informal) 

    \u4ee5 [plus_assoc] \u7684\u975e\u5f62\u5f0f\u5316\u8bc1\u660e\u4e3a\u8303\u672c\uff0c\u5199\u51fa\u4ee5\u4e0b\u5b9a\u7406\u7684\u975e\u5f62\u5f0f\u5316\u8bc1\u660e\u3002
    \u4e0d\u8981\u53ea\u662f\u7528\u4e2d\u6587\u6765\u89e3\u91ca Coq \u7b56\u7565\uff01

    \u5b9a\u7406\uff1a\u5bf9\u4e8e\u4efb\u4f55 [n]\uff0c\u5747\u6709 [true = n =? n]\u3002

    \u8bc1\u660e\uff1a (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *)
*)
(** [] *)

(* ################################################################# *)
(** * \u66f4\u591a\u7ec3\u4e60 *)

(** **** \u7ec3\u4e60\uff1a3 \u661f, standard, recommended (mult_comm) 

    \u7528 [assert] \u6765\u5e2e\u52a9\u8bc1\u660e\u6b64\u5b9a\u7406\u3002\u4f60\u5e94\u8be5\u4e0d\u9700\u8981\u5bf9 [plus_swap] \u8fdb\u884c\u5f52\u7eb3\u3002 *)

Theorem plus_swap : forall n m p : nat,
  n + (m + p) = m + (n + p).
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

(** \u73b0\u5728\u8bc1\u660e\u4e58\u6cd5\u4ea4\u6362\u5f8b\u3002\uff08\u4f60\u5728\u8bc1\u660e\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u60f3\u8981\u5b9a\u4e49\u5e76\u8bc1\u660e\u4e00\u4e2a\u8f85\u52a9\u5b9a\u7406\u3002
    \u63d0\u793a\uff1a[n * (1 + k)] \u662f\u4ec0\u4e48\uff1f\uff09 *)

Theorem mult_comm : forall m n : nat,
  m * n = n * m.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(** **** \u7ec3\u4e60\uff1a3 \u661f, standard, optional (more_exercises) 

    \u627e\u4e00\u5f20\u7eb8\u3002\u5bf9\u4e8e\u4ee5\u4e0b\u5b9a\u7406\uff0c\u9996\u5148\u8bf7 _'\u601d\u8003'_ (a) \u5b83\u80fd\u5426\u80fd\u53ea\u7528\u5316\u7b80\u548c\u6539\u5199\u6765\u8bc1\u660e\uff0c
    (b) \u5b83\u8fd8\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\uff08[destruct]\uff09\uff0c\u4ee5\u53ca (c) \u5b83\u8fd8\u9700\u8981\u5f52\u7eb3\u8bc1\u660e\u3002\u5148\u5199\u4e0b\u4f60\u7684
    \u9884\u5224\uff0c\u7136\u540e\u586b\u5199\u4e0b\u9762\u7684\u8bc1\u660e\uff08\u4f60\u7684\u7eb8\u4e0d\u7528\u4ea4\u4e0a\u6765\uff0c\u8fd9\u53ea\u662f\u9f13\u52b1\u4f60\u5148\u601d\u8003\u518d\u884c\u52a8\uff01\uff09 *)

Check leb.

Theorem leb_refl : forall n:nat,
  true = (n <=? n).
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem zero_nbeq_S : forall n:nat,
  0 =? (S n) = false.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem andb_false_r : forall b : bool,
  andb b false = false.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem plus_ble_compat_l : forall n m p : nat,
  n <=? m = true -> (p + n) <=? (p + m) = true.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem S_nbeq_0 : forall n:nat,
  (S n) =? 0 = false.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem mult_1_l : forall n:nat, 1 * n = n.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem all3_spec : forall b c : bool,
    orb
      (andb b c)
      (orb (negb b)
               (negb c))
  = true.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem mult_plus_distr_r : forall n m p : nat,
  (n + m) * p = (n * p) + (m * p).
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

Theorem mult_assoc : forall n m p : nat,
  n * (m * p) = (n * m) * p.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard, optional (eqb_refl) 

    \u8bc1\u660e\u4ee5\u4e0b\u5b9a\u7406\u3002\uff08\u628a [true] \u653e\u5728\u7b49\u5f0f\u5de6\u8fb9\u53ef\u80fd\u770b\u8d77\u6765\u6709\u70b9\u5947\u602a\uff0c\u4e0d\u8fc7 Coq \u6807\u51c6\u5e93\u4e2d
    \u5c31\u662f\u8fd9\u6837\u8868\u793a\u7684\uff0c\u6211\u4eec\u7167\u505a\u5c31\u662f\u3002\u65e0\u8bba\u6309\u54ea\u4e2a\u65b9\u5411\u6539\u5199\u90fd\u4e00\u6837\u597d\u7528\uff0c\u6240\u4ee5\u65e0\u8bba\u6211\u4eec\u5982\u4f55
    \u8868\u793a\u5b9a\u7406\uff0c\u7528\u8d77\u6765\u90fd\u6ca1\u95ee\u9898\u3002\uff09 *)

Theorem eqb_refl : forall n : nat,
  true = (n =? n).
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(** **** \u7ec3\u4e60\uff1a2 \u661f, standard, optional (plus_swap') 

    [replace] \u7b56\u7565\u5141\u8bb8\u4f60\u6307\u5b9a\u4e00\u4e2a\u5177\u4f53\u7684\u8981\u6539\u5199\u7684\u5b50\u9879\u548c\u4f60\u60f3\u8981\u5c06\u5b83\u6539\u5199\u6210\u7684\u9879\uff1a
    [replace (t) with (u)] \u4f1a\u5c06\u76ee\u6807\u4e2d\u8868\u8fbe\u5f0f [t]\uff08\u7684\u6240\u6709\u526f\u672c\uff09\u66ff\u6362\u4e3a\u8868\u8fbe\u5f0f [u]\uff0c
    \u5e76\u751f\u6210 [t = u] \u4f5c\u4e3a\u9644\u52a0\u7684\u5b50\u76ee\u6807\u3002\u5728\u7b80\u5355\u7684 [rewrite] \u4f5c\u7528\u5728\u76ee\u6807\u9519\u8bef\u7684\u90e8\u5206\u4e0a\u65f6
    \u8fd9\u79cd\u505a\u6cd5\u901a\u5e38\u5f88\u6709\u7528\u3002

   \u7528 [replace] \u7b56\u7565\u6765\u8bc1\u660e [plus_swap']\uff0c\u9664\u4e86\u65e0\u9700 [assert (n + m = m + n)]
   \u5916\u548c [plus_swap] \u4e00\u6837\u3002 *)

Theorem plus_swap' : forall n m p : nat,
  n + (m + p) = m + (n + p).
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.
(** [] *)

(** **** \u7ec3\u4e60\uff1a3 \u661f, standard, recommended (binary_commute) 

    \u56de\u5fc6\u4e00\u4e0b\u4f60\u5728 [Basics] \u4e2d\u4e3a\u7ec3\u4e60 [binary] \u7f16\u5199\u7684 [incr] \u548c [bin_to_nat]
    \u51fd\u6570\u3002\u8bc1\u660e\u4e0b\u56fe\u53ef\u4ea4\u6362\u3002

                            incr
              bin ----------------------> bin
               |                           |
    bin_to_nat |                           |  bin_to_nat
               |                           |
               v                           v
              nat ----------------------> nat
                             S

    \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u5148\u81ea\u589e\u7136\u540e\u5c06\u5b83\u8f6c\u6362\u4e3a\uff08\u4e00\u8fdb\u5236\uff09\u81ea\u7136\u6570\uff0c\u548c\u5148\u5c06\u5b83\u8f6c\u6362\u4e3a
    \u81ea\u7136\u6570\u540e\u518d\u81ea\u589e\u4f1a\u4ea7\u751f\u76f8\u540c\u7684\u7ed3\u679c\u3002\u5c06\u4f60\u7684\u5b9a\u7406\u547d\u540d\u4e3a [bin_to_nat_pres_incr]
    \uff08\u201cpres\u201d\u5373\u201cpreserves\u201d\u7684\u7b80\u5199\uff0c\u610f\u4e3a\u201c\u4fdd\u6301\u539f\u72b6\u201d\uff09\u3002

    \u5728\u5f00\u59cb\u505a\u8fd9\u4e2a\u7ec3\u4e60\u4e4b\u524d\uff0c\u5c06\u4f60\u5728 [binary] \u7ec3\u4e60\u7684\u89e3\u4e2d\u7684\u5b9a\u4e49\u590d\u5236\u5230\u8fd9\u91cc\uff0c
    \u8ba9\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u88ab\u5355\u72ec\u8bc4\u5206\u3002\u82e5\u4f60\u60f3\u8981\u66f4\u6539\u4f60\u7684\u539f\u59cb\u5b9a\u4e49\u4ee5\u4fbf\u8ba9\u6b64\u5c5e\u6027\u66f4\u6613\u8bc1\u660e\uff0c
    \u8bf7\u81ea\u4fbf\uff01 *)

(* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *)

(* \u8bf7\u52ff\u4fee\u6539\u4e0b\u9762\u8fd9\u4e00\u884c\uff1a *)
Definition manual_grade_for_binary_commute : option (nat*string) := None.
(** [] *)

(** **** \u7ec3\u4e60\uff1a5 \u661f, advanced (binary_inverse) 

    This is a further continuation of the previous exercises about
    binary numbers.  You may find you need to go back and change your
    earlier definitions to get things to work here.

    (a) First, write a function to convert natural numbers to binary
        numbers. *)

Fixpoint nat_to_bin (n:nat) : bin
  (* \u5c06\u672c\u884c\u66ff\u6362\u6210 ":= _\u4f60\u7684_\u5b9a\u4e49_ ." *). Admitted.

(** Prove that, if we start with any [nat], convert it to binary, and
    convert it back, we get the same [nat] we started with.  (Hint: If
    your definition of [nat_to_bin] involved any extra functions, you
    may need to prove a subsidiary lemma showing how such functions
    relate to [nat_to_bin].) *)

Theorem nat_bin_nat : forall n, bin_to_nat (nat_to_bin n) = n.
Proof.
  (* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *) Admitted.

(* \u8bf7\u52ff\u4fee\u6539\u4e0b\u9762\u8fd9\u4e00\u884c\uff1a *)
Definition manual_grade_for_binary_inverse_a : option (nat*string) := None.

(** (b) One might naturally expect that we should also prove the
        opposite direction -- that starting with a binary number,
        converting to a natural, and then back to binary should yield
        the same number we started with.  However, this is not the
        case!  Explain (in a comment) what the problem is. *)

(* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *)

(* \u8bf7\u52ff\u4fee\u6539\u4e0b\u9762\u8fd9\u4e00\u884c\uff1a *)
Definition manual_grade_for_binary_inverse_b : option (nat*string) := None.

(** (c) Define a normalization function -- i.e., a function
        [normalize] going directly from [bin] to [bin] (i.e., _not_ by
        converting to [nat] and back) such that, for any binary number
        [b], converting [b] to a natural and then back to binary yields
        [(normalize b)].  Prove it.  (Warning: This part is a bit
        tricky -- you may end up defining several auxiliary lemmas.
        One good way to find out what you need is to start by trying
        to prove the main statement, see where you get stuck, and see
        if you can find a lemma -- perhaps requiring its own inductive
        proof -- that will allow the main proof to make progress.) Don't
        define this using [nat_to_bin] and [bin_to_nat]! *)

(* \u8bf7\u5728\u6b64\u5904\u89e3\u7b54 *)

(* \u8bf7\u52ff\u4fee\u6539\u4e0b\u9762\u8fd9\u4e00\u884c\uff1a *)
Definition manual_grade_for_binary_inverse_c : option (nat*string) := None.
(** [] *)

(* 2022-03-14 05:26:55 (UTC+00) *)
